<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谁把钱丢了</title>
  
  <subtitle>Everyday struggle</subtitle>
  <link href="https://jmyblog.top/atom.xml" rel="self"/>
  
  <link href="https://jmyblog.top/"/>
  <updated>2021-08-21T07:30:31.467Z</updated>
  <id>https://jmyblog.top/</id>
  
  <author>
    <name>谁把钱丢了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UiAutomator初体验(下)</title>
    <link href="https://jmyblog.top/ui-automator-test-3/"/>
    <id>https://jmyblog.top/ui-automator-test-3/</id>
    <published>2021-08-07T03:20:35.000Z</published>
    <updated>2021-08-21T07:30:31.467Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/08/07/XE59SbdlRZBJ7iW.png"><div class="note info"><p>上篇博客我们用UiAutomator编写了一个可以用命令行运行的测试，那它就肯定可以集成到CI上，没有完成的同学也不用担心，可以先fork <a href="https://github.com/Summyj/UiAutomatorDemo">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p></div><h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>这里直接复用 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E5%88%9B%E5%BB%BAAndroid%E5%BA%94%E7%94%A8">之前博客</a> 相同部分的内容，按照步骤做就可以了。</p><h2 id="添加UiAutomator-workflow"><a href="#添加UiAutomator-workflow" class="headerlink" title="添加UiAutomator workflow"></a>添加UiAutomator workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为UiAutomator的 workflow：</p><p><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="新建workflow(忽略这里的名字哈)"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：</p><p><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="添加执行步骤(忽略这里的名字哈)"><br>接下来请依次添加以下步骤。</p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步通常为每个workflow最开始的两个步骤，不需要做任何改动，保持默认的配置就好，意思是说用SSH的方式下载主代码库，这里是指上面fork的模拟的Android开发代码库：</p><p><img data-src="https://i.loli.net/2021/08/07/bqzS9O2DV1BgE6h.png" alt="下载主代码库"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>第三步是下载测试代码库，搜索并添加一个Script步骤，直接git clone即可，repo地址请换成自己的哦，Bitrise会把测试代码库下载到$BITRISE_SOURCE_DIR，也就是/bitrise/src/这个目录下：</p><p><img data-src="https://i.loli.net/2021/08/07/VG2rC7TZIXcsRMA.png" alt="下载测试代码库"></p><h3 id="添加安卓模拟器"><a href="#添加安卓模拟器" class="headerlink" title="添加安卓模拟器"></a>添加安卓模拟器</h3><p>然后是创建并启动模拟器，和在本地运行测试一样，运行之前得确保模拟器开启，这里我将默认的API Level改成了29，因为比较常用：</p><p><img data-src="https://i.loli.net/2021/08/07/JwTigPXExe2um97.png" alt="创建模拟器"></p><h3 id="等待模拟器启动"><a href="#等待模拟器启动" class="headerlink" title="等待模拟器启动"></a>等待模拟器启动</h3><p>接着等待模拟器启动，默认是等待5分钟，这里我增加到了10分钟：</p><p><img data-src="https://i.loli.net/2021/08/07/5QtKkLRU28N4jnY.png" alt="等待模拟器启动"></p><h3 id="安装测试App"><a href="#安装测试App" class="headerlink" title="安装测试App"></a>安装测试App</h3><p>接下来就是在模拟器里安装App了，我把测试App也保存到了代码库里，这里使用adb install命令来安装指定位置下的apk文件：</p><p><img data-src="https://i.loli.net/2021/08/07/JzEcfoVBwQGT4Yb.png" alt="安装Apk"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，上篇博客中提到可以用两种命令执行测试，一个是gradle，一个是adb，因为用gradle执行可以生成一个测试报告，为了方便接下来的步骤，这里选择用gardle：</p><p><img data-src="https://i.loli.net/2021/08/07/CYS2gtmpMWDaqw1.png" alt="执行测试"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，上篇博客同样提到gradle执行测试后，会生成html和xml两种格式的测试报告，由于Bitrise只能解析xml格式的测试报告，所以改路径为下图xml文件所在位置，接着添加depoly步骤后才能运行之后看到测试报告，不需要做任何改动，保持默认的配置就好：</p><p><img data-src="https://i.loli.net/2021/08/07/DhFivjswpXt5m8n.png" alt="导出测试报告"></p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>有时候为了安全考虑，代码里不能明文存储像账号密码之类的测试数据，所以这里我将账号密码保存成Bitrise的环境变量：</p><p><img data-src="https://i.loli.net/2021/08/07/mq2bJtDaAT9QGlu.png" alt="Bitrise添加环境变量"><br>接着在代码里用getenv()方法获取环境变量即可，本地运行的话再赋个值就可以了：</p><p><img data-src="https://i.loli.net/2021/08/07/Zqv796Dt3docrXP.png" alt="获取环境变量"></p><h2 id="运行workflow"><a href="#运行workflow" class="headerlink" title="运行workflow"></a>运行workflow</h2><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><p>万事皆备，就可以运行workflow了，点击右上角保存按钮，之后回到应用页面，选择开始build，选择UiAutomator workflow，然后开始Build：</p><p><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="首次运行workflow((这里是之前文章里的图))"><br>以后再运行，可以像上边一样设置Build，更方便的是进入上个build的详情页，直接点击rebuild就可以再次运行了：</p><p><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="Rebuild(这里是之前文章里的图)"><br>也可以选择“Rebuild with remote access”，Bitrise给安卓应用提供了远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="Rebuild with remote access(这里是之前文章里的图)"><br>可以按照Bitrise提供的地址和密码连接该机器(每次运行地址和密码都会变)。</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>如果上面的步骤都设置正确，应该是可以运行成功的，失败的话大概率应该是上边配置不对，自行解决哦：</p><p><img data-src="https://i.loli.net/2021/08/07/uIFs2vK5nBQTROf.png" alt="运行结果"><br><img data-src="https://i.loli.net/2021/08/07/UwucB8XYFqzDGLk.jpg" alt="测试报告"><br>一共10分钟，测试跑了3分半左右，但真正执行测试的时间应该只有几十秒，其他都是在下载依赖：</p><p><img data-src="https://i.loli.net/2021/08/07/WxzDIfAoq1N7bTU.png" alt="测试日志"><br>然后发现模拟器安装测试APP这一步花的时间很长，通常得5分钟左右：</p><p><img data-src="https://i.loli.net/2021/08/07/1dZblQcaHUkRDuI.png" alt="安装apk日志"><br>有时时间更长甚至会失败，没找到解决办法，但失败的情况比较少，重跑就行，所以先不管了：</p><p><img data-src="https://i.loli.net/2021/08/07/XmsRVoIEP8lzq4a.png" alt="安装失败"></p><h3 id="尝试用adb运行测试"><a href="#尝试用adb运行测试" class="headerlink" title="尝试用adb运行测试"></a>尝试用adb运行测试</h3><p>试过不导出测试报告，用adb在CI执行测试，但会报一个互斥锁的错误，感觉在CI上太难连到模拟器了，上边在模拟器安装apk的步骤也很费劲，所以最好不用adb命令吧。</p><p><img data-src="https://i.loli.net/2021/08/07/MTudktDJ41ZcO6G.png" alt="adb运行"></p><h2 id="UiAutomator-vs-Appium"><a href="#UiAutomator-vs-Appium" class="headerlink" title="UiAutomator vs Appium"></a>UiAutomator vs Appium</h2><p>UiAutomator初体验到这里就结束了，因为之前我也写过用Appium进行移动端UI自动化测试的系列文章，所以感受到了很多不同，具体在以下几个方面。</p><h3 id="上手方面"><a href="#上手方面" class="headerlink" title="上手方面"></a>上手方面</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，UiAutomator是更快更简洁的，依赖更少；这是Appium创建的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，这是UiAutomator创建的 <a href="https://jmyblog.top/ui-automator-test/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，还是UiAutomator更快更方便。</p><p>这是Appium用来定位元素的 <a href="https://jmyblog.top/AppUI-AutoTest-1/#Appium-Desktop">Appium Desktop</a> ，这是UiAutomator用来定位元素的 <a href="https://jmyblog.top/ui-automator-test-2/#%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0">uiautomatorviewer</a> ，还是UiAutomator更方便，不用设置Desired Capabilities，但界面其实没人家好看。</p><p>这是利用Appium <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这是用UiAutomator <a href="https://jmyblog.top/ui-automator-test-2/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这里写的是同样的测试用例，其实是差不多的，只是语言不同而已。不过对于Webview，Appium还需要切换context，UiAutomator则可以直接操作Webview，不用手动切换context，这会大大减少测试运行的时间和出错率。</p><p>Appium适用于iOS和Android两个平台，UiAutomator是只针对Android的，其实Appium在Android平台底层用的也是UiAutomator作为自动化引擎，从Desired Capabilities的配置就可以发现：</p><p><img data-src="https://i.loli.net/2021/08/07/y9QTpiPKDWul81b.png" alt="android capabilities"><br>所以UiAutomator相当于是安卓原生的一个自动化测试框架，iOS也有自己原生的UI测试框架XCUITest，它也是Appium在iOS平台底层引用的自动化引擎：</p><p><img data-src="https://i.loli.net/2021/08/07/9GQvkLTlxMgU8Zt.png" alt="ios capabilities"></p><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>再来看看运行时间，还是贴出两个框架的运行视频，这里写的同样的测试用例，先来看UiAutomator用三种方式运行测试的视频，最长的时间是用gradle运行，大概25秒，最短只需要12秒：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe><p>再来看Appium运行视频，是用npm命令跑，大概23秒，看起来和UiAutomator差不多，但更复杂的场景还是UiAutomator更快的。</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe><h3 id="CI配置"><a href="#CI配置" class="headerlink" title="CI配置"></a>CI配置</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E6%B7%BB%E5%8A%A0e2e-workflow">CI配置过程</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test-3/#%E6%B7%BB%E5%8A%A0UiAutomator-workflow">CI配置过程</a> ，看着虽然也差不多，但亲测其实Appium步骤更多，因为要切换Webview，后续还要加一步下载chrome webdriver，而UiAutomator则不用。</p><h3 id="个人体验"><a href="#个人体验" class="headerlink" title="个人体验"></a>个人体验</h3><div class="note info"><p>两个框架各有优劣，可以根据实际需求选择，我自己体验下来还是Ui Automator更方便一些，不过两个框架我都是初次使用，目前除了webview之外我也没遇到别的复杂场景，或许有的方面Appium会更胜一筹，继续学习吧，碰到之后我也会写博客分享的。</p></div>]]></content>
    
    
    <summary type="html">持续集成，将代码部署到Bitrise CI。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
  </entry>
  
  <entry>
    <title>UiAutomator初体验(中)</title>
    <link href="https://jmyblog.top/ui-automator-test-2/"/>
    <id>https://jmyblog.top/ui-automator-test-2/</id>
    <published>2021-08-05T03:20:35.000Z</published>
    <updated>2021-08-21T07:30:31.467Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/08/07/gVpdC1hMQHsrT64.png"><div class="note info"><p>事实上，如何上手编写最基本的UiAutomator测试，<a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing">官网</a> 上已经给出了设置步骤和简单的代码示例，只是没有从零开始介绍怎么创建一个完整的测试而已，所以我们可以基于官网文档，写一个可以在模拟器上运行的测试。</p></div><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>回到上篇博客创建好的测试项目，在app模块的build.gradle文件中，加上UiAutomator库的依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    ...</span><br><span class="line">    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加之后Android Studio可能不会立刻下载依赖，所以为了确保可以使用uiautomator，需要在下图手动Apply一下：</p><p><img data-src="https://i.loli.net/2021/08/06/ljXOiHw7F5KQZIu.png" alt="下载依赖"></p><h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><p>UI测试的第一步当然是定位元素，uiautomatorviewer工具可以做到这一点，它位于 <mark class="label primary">android-sdk/tools/bin/</mark> 目录，android-sdk就是下图中的sdk路径：</p><p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>打开终端，定位到上述目录中，然后运行uiautomatorviewer：</p><p><img data-src="https://i.loli.net/2021/08/06/1lOsYUNK7haAxnV.png" alt="运行uiautomatorviewer"><br>如果上篇博客的环境都准备好了，就能打开uiautomatorviewer窗口，如果有已启动的设备，这里我打开了一个 <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E5%90%AF%E5%8A%A8Android-Emulator">安卓模拟器</a> ，点击窗口左上角第二个按钮，就能获取设备当前页面的screenshot，右侧是页面元素信息，通过这些信息，我们就可以定位元素了。<br>UiAutomator提供了findObject()方法定位UiObject元素，以定位上图页面底部Login按钮为例：</p><div class="tabs" id="定位元素写法"><ul class="nav-tabs"><li class="tab active"><a href="#定位元素写法-1">定位元素写法 1</a></li><li class="tab"><a href="#定位元素写法-2">定位元素写法 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="定位元素写法-1"><p>Kotlin：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val loginButton: UiObject = device.findObject(</span><br><span class="line">        UiSelector().text("Login").className("android.widget.TextView")</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="定位元素写法-2"><p>Java：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UiObject loginButton = device.findObject(new UiSelector()</span><br><span class="line">        .text("Login")</span><br><span class="line">        .className("android.widget.TextView"));</span><br></pre></td></tr></tbody></table></figure></div></div></div><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下来我们就可以编写代码测试App了，我还是用了 <a href="https://jmyblog.top/AppUI-AutoTest-1/">之前文章</a> 里的测试App，可以在 <a href="https://github.com/webdriverio/native-demo-app/releases">这里</a> 下载，然后把它安装到模拟器里。<br>我们来编写最简单的两个Case，登录和注册。</p><p><img data-src="https://i.loli.net/2021/08/06/6wSmbHJQcOIKTgz.png" alt="登录和注册页面"></p><div class="note info"><p>首先是登录，要实现登录操作，我们要切换到登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要先切换到登录页面，再切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p></div><p>这里我只贴出一个步骤，是去打开app的登录页面，就使用上面的元素定义，其它步骤都可以参考这个完成：</p><p><img data-src="https://i.loli.net/2021/08/06/9UVPvcLlJqCKRzD.png" alt="打开登录页面测试步骤"><br>其中，launchApp方法依然是 <a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing#accessing-ui-components">官网提供</a> 的，先定义了一个device对象，通过该对象连接设备，然后再利用PackageName打开对应的App，最后我们定位元素并点击进入登录页面。<br>设备当前打开App的PackageName可以通过以下命令得到：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window | grep -E 'mCurrentFocus'</span><br></pre></td></tr></tbody></table></figure><p>这就是我们使用Ui Automator编写的第一个可以运行的测试。</p><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>有三种方式可以运行Ui Automator测试，第一种是直接在编辑器里点击运行图标：</p><p><img data-src="https://i.loli.net/2021/08/06/LualXZYnq1R49Bv.png" alt="两个地方都可以点"><br>第二种方式是通过adb shell在命令行运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -w -m -e debug false -e class 'com.example.androidtest.ExampleInstrumentedTest#openLoginPage' com.example.androidtest.test/androidx.test.runner.AndroidJUnitRunner</span><br></pre></td></tr></tbody></table></figure><p>第三种方式也是在命令行运行，上篇博客提到，因为Ui Automator测试位于androidTest文件夹，是一种插桩测试，所以可以利用gradle直接运行，和mvn test执行测试的道理差不多：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew connectedAndroidTest</span><br></pre></td></tr></tbody></table></figure><p>后两种运行方式，官网上也给出了 <a href="https://developer.android.com/studio/test/command-line">详细介绍</a> ，并且提供了各个参数的含义。<br>值得一提的是，用第三种方式运行测试还会生成两个测试结果文件，一个是html格式，在 <mark class="label info">path_to_your_project/module_name/build/reports/androidTests/connected/</mark> 目录中：</p><p><img data-src="https://i.loli.net/2021/08/06/S7AfZ3yGMFXTRYo.png" alt="测试报告"><br>另一个是xml格式，在 <mark class="label info">path_to_your_project/module_name/build/outputs/androidTest-results/connected/</mark> 目录中。</p><h2 id="PageObject"><a href="#PageObject" class="headerlink" title="PageObject"></a>PageObject</h2><p>尽管我们已经写好了测试，但把所有的步骤都放在一个文件中显然不是good practice，所以我们可以按照Page Object模式将代码进行优化，把before方法、页面元素、操作步骤和测试分开，完成后的代码结构如下：</p><p><img data-src="https://i.loli.net/2021/08/07/piOLVbxPScuAw5t.png" alt="PageObject"><br>其中，selectors包里是各个页面的元素，pages包则用来存放各个页面的操作方法，公用的方法比如launchApp都放在BasePage里，真正的测试用例则统一放在tests包里，我已将 <a href="https://github.com/Summyj/UiAutomatorDemo">代码库</a> 上传到了github，不足之处还请大家批评指正。<br>以下是用三种方式执行测试的视频，直接点击编辑器图标运行大概12秒，用adb运行16秒，gradle运行也不过25秒：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
    
    
    <summary type="html">利用uiautomatorviewer定位元素并编写代码。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="uiautomatorviewer" scheme="https://jmyblog.top/tags/uiautomatorviewer/"/>
    
  </entry>
  
  <entry>
    <title>UiAutomator初体验(上)</title>
    <link href="https://jmyblog.top/ui-automator-test/"/>
    <id>https://jmyblog.top/ui-automator-test/</id>
    <published>2021-08-03T03:20:35.000Z</published>
    <updated>2021-08-21T07:30:31.467Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/31/hT5tpAjqk2xZN8L.png"><blockquote><p>前段时间博主写了 <a href="https://jmyblog.top/AppUI-AutoTest/">系列文章</a> 来介绍移动端的UI自动化，主要工具是Appium。之后发现Appium还是存在一些问题，比如定位不到元素、运行时间长等等。<br>后来又针对Android平台spike了其它的工具，比如Espresso、UiAutomator，它们都是安卓官网推荐的测试工具，参考了网上诸多文章，如 <a href="https://medium.com/@phamngocson.l13cla/espresso-vs-ui-automator-66af8232259d">Espresso vs Ui Automator</a>。<br>结论是Espresso拥有更多高级的方法，但它对代码能力的要求比较高，所以对于一般QA来说难以使用，而UiAutomator更容易上手，所以我选择了UiAutomator，本来想用一篇博客介绍的，但篇幅太长，所以分了三篇博客分享。</p></blockquote><h2 id="UiAutomator介绍"><a href="#UiAutomator介绍" class="headerlink" title="UiAutomator介绍"></a>UiAutomator介绍</h2><p>UiAutomator是什么呢？参考 <a href="https://developer.android.com/training/testing/ui-automator">官网介绍</a> ：</p><div class="note info"><p>UI Automator 测试框架提供了一组 API，用于构建在用户应用和系统应用上执行交互的界面测试。通过 UI Automator API，您可以执行在测试设备中打开“设置”菜单或应用启动器等操作。UI Automator 测试框架非常适合编写黑盒式自动化测试，此类测试的测试代码不依赖于目标应用的内部实现细节。</p></div><p>hummm…官方介绍总是给人一种似懂非懂的感觉，不过问题不大，接下来我们通过实践来深入了解UiAutomator <span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.下载 <a href="https://developer.android.com/studio">Android Studio</a>，下载后打开以下设置确保sdk location正确：</p><p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>2.下载 <a href="https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u292b10.pkg">JDK 8</a> ，这里版本一定要是8，否则打不开uiautomatorviewer工具。<br>3.下载 <a href="https://download.eclipse.org/eclipse/downloads/drops4/R-4.20-202106111600/">swt</a> ，滑到页面底部找到这里，按照对应平台下载即可：</p><p><img data-src="https://i.loli.net/2021/08/04/k28chb6SsBjpIwH.png" alt="下载swt"><br>这个也是为了打开uiautomatorviewer工具，因为uiautomatorviewer自带的swt包有一些问题，所以得自己下载一个，这个感觉是uiautomatorviewer的一个bug。<br>下载之后解压，然后把里面的swt.jar重命名为swt2.jar：</p><p><img data-src="https://i.loli.net/2021/08/04/WPT7VcmHapot1J5.png" alt="swt2.jar"><br>进入上文的sdk location目录，然后再依次打开<mark class="label primary">tools/lib/x86</mark> 目录，可以看到uiautomatorviewer自带的swt包，然后复制刚才的swt2.jar到这里(我也不知道为啥不干脆替换掉原有的swt包)，下面的x86_64目录也要做同一操作：</p><p><img data-src="https://i.loli.net/2021/08/04/r2IeHSdCPiasYbn.png" alt="添加swt2.jar"><br>4.所有依赖都已经下载完啦，然后我们来设置环境变量，打开你本地的 .bash_profile 或者 .zshrc 文件，没有就新建一个，之后输入下边的设置，直接粘贴改动即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export ANDROID_HOME=path/to/your/Android sdk (eg:/Users/usr/Library/Android/sdk)</span><br><span class="line">export PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">AAPT_HOME=/path/to/your Android sdk build-tools (eg:/Users/usr/Library/Android/sdk/build-tools/28.0，这里的28.0是我本地的版本，你需要打开对应目录查看自己的版本然后修改。)</span><br><span class="line">export AAPT_HOME</span><br><span class="line">export PATH=$PATH:$AAPT_HOME</span><br></pre></td></tr></tbody></table></figure><p>保存后执行 <strong>source .bash_profile</strong> 或者 <strong>source .zshrc</strong> 使配置生效，然后执行 <strong>java -version</strong>，确保java版本正确。</p><h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>打开Android Studio创建新项目，因为我们是要写测试，而不是开发App，所以选择No Activity后继续，这里我把项目名和包名改成了自定义的，你也可以改成别的；项目语言有Java和Kotlin，其实两者非常相像，语法略有不同，这里我选了Kotlin，你也可以用Java，影响不大：</p><p><img data-src="https://i.loli.net/2021/08/04/1Hz826lcKeNWPwV.png" alt="创建项目"><br>之后Android Studio会开始用Gradle构建你的项目，右下角可以看到进度，构建完成后，在页面左上角下拉框中切换到Project视图，可以看到项目结构：</p><p><img data-src="https://i.loli.net/2021/08/04/dgVfhKHEDsjRt95.png" alt="项目结构"></p><h2 id="熟悉项目结构"><a href="#熟悉项目结构" class="headerlink" title="熟悉项目结构"></a>熟悉项目结构</h2><p>这是一个最基本的安卓项目代码结构，根目录和app模块各有一个build.gradle文件，我们重点关注 <strong>app</strong> 模块，src里有三个目录，main目录里一般存放App的activity文件，这里没有是因为我们前边选择了No Activity，不过这个与测试无瓜。<br>其他两个目录 <strong>androidTest</strong> 和 <strong>test</strong> 分别用来存放app的插桩测试(Instrumented tests)和单元测试，单元测试我们都知道，那什么是插桩测试呢？<br>同样引用 <a href="https://developer.android.com/studio/test#test_types_and_location">官网介绍</a>：</p><div class="note info"><p>插桩测试，位于 module-name/src/androidTest/java/ 目录，这些测试在硬件设备或模拟器上运行。这些测试有权使用 Instrumentation API，可让您获取某些信息（例如您要测试的应用的 Context），并且可让您通过测试代码来控制受测应用。在编写集成和功能界面测试来自动执行用户交互时，或者当您的测试具有模拟对象无法满足的 Android 依赖项时，可以使用这些测试。</p></div><p>很明显，我们要写的就是这种测试，所以无论是UiAutomator测试，还是上文提到的Espresso测试，都应该写在各模块文件夹里的AndroidTest目录中。</p>]]></content>
    
    
    <summary type="html">UiAutomator介绍，环境准备和测试项目的创建。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Android" scheme="https://jmyblog.top/tags/Android/"/>
    
    <category term="UiAutomator" scheme="https://jmyblog.top/tags/UiAutomator/"/>
    
  </entry>
  
  <entry>
    <title>工作三年后</title>
    <link href="https://jmyblog.top/three-years-after-graduation/"/>
    <id>https://jmyblog.top/three-years-after-graduation/</id>
    <published>2021-07-24T04:47:29.000Z</published>
    <updated>2021-08-21T07:30:31.467Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/31/FoOkzjwaQncAq3l.png"><h2 id="2018：传说中的试用期"><a href="#2018：传说中的试用期" class="headerlink" title="2018：传说中的试用期"></a>2018：传说中的试用期</h2><p>三年前的今天「2018.7.24」，我入职了，正式成为了打工人，也开始了6个月的试用期。<br>入职第二天，我就去印度浦那参加了为期五周的 <a href="https://jmyblog.top/TWUJourney/">TWU培训</a> ，收获颇丰；培训结束之后，又无缝衔接去了一个国外的项目，TWU练的散装英语正好派上了用场。<br>领取了新的MacBook Pro电脑，18年有touch bar那款，当时的价格大概1.8w左右，给员工配新款Mac，公司真的很良心了。<br>按照公司试用期的安排，我有了一个buddy，她可以帮助我度过试用期。我的buddy也是毕业之后来公司的，刚入职时是开发，后来又做测试，是一个代码能力强的QA。<br>在她的帮助下，我逐渐融入了项目的节奏和公司文化，也开始了一系列学习，比如英语打卡、测试知识之类，总之这一年的关键字就是「学习」，然后试用期就这样无惊无险的过去了，也没加过班，一切都很顺利，我觉得自己找到了「钱多事少离家近」的工作。</p><h2 id="2019：开心搬砖，快乐生活"><a href="#2019：开心搬砖，快乐生活" class="headerlink" title="2019：开心搬砖，快乐生活"></a>2019：开心搬砖，快乐生活</h2><p>这一年，是三年中最开心的一年了。<br>因为试用期结束，工作也稳定下来了，每天干的活都差不多，逐渐明白了「搬砖」是什么意思。再后来，除了搬砖，还能腾出很多时间思考和学习。<br>由于一直在一个项目组，和周围的同事们以及客户都很熟悉，每天上班唠嗑也很欢乐，有时甚至一想到第二天要上班，还很期待，一年中项目里有人走，也有人进来，但我的快乐一直不变。<br>除此之外，公司经常会办一些节日活动，比如3.7女生节的微景观DIY，第二天还放了半天假；还有万圣节做南瓜灯、中秋节做月饼，平时的人文关怀也不少。</p><p><img data-src="https://i.loli.net/2021/08/01/t859kegJHNB6b7o.jpg" alt="公司的节日活动"></p><p>这一年我搬了两次家，第一次搬到了一个朝北的房子(住进去之前我一直以为这房子是朝东的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)，装修很不错，没什么可以自己折腾的空间，而且朝北让人住着很压抑，所以住了一个月又搬了。搬到了同小区另一个朝南的房子，装修一般，但正合我意，一番折腾之后终于把房子改造成了自己喜欢的风格，而且从此后我终于分得请南北了<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p><img data-src="https://i.loli.net/2021/08/01/B4PdgGpbyAROq3t.jpg" alt="第一次搬家(左)第二次搬家(右)"><br>后来还安排了投影仪和烤箱，看电影、研究厨艺也是一种享受。</p><p><img data-src="https://i.loli.net/2021/08/01/t2367xjFVWkTLrR.jpg" alt="投影仪真香"><br><img data-src="https://i.loli.net/2021/08/01/OmK46iCosyIgezG.jpg" alt="各种烤"><br>住处离公司大概5公里，但没有直达的公交，于是买了一个电动滑板车🛴，每天骑着滑板去上班，单程15-20分钟就能到公司，不能骑车的天气就打车，然后就很少坐公交了。</p><p><img data-src="https://i.loli.net/2021/08/01/XNd4KMO5ZcWsalL.jpg" alt="我的滑板车"><br>自从我用滑板出行后，发现通勤路上的滑板车越来越多了，公司里也有人买了，有次澳洲的客户来西安出差，还被我成功安利，回去后也买了一辆<span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span><br>一年中也有和同事一起去 <a href="https://jmyblog.top/5-1-travel/">青海</a>、<a href="https://jmyblog.top/6-6-travel/">色达</a> 旅行，和朋友去 <a href="https://jmyblog.top/HuaShanTravel/">爬山</a> 等 ，经常出去玩，这一年就这样快乐的结束了。</p><h2 id="2020：疫情下的打工人，活着"><a href="#2020：疫情下的打工人，活着" class="headerlink" title="2020：疫情下的打工人，活着"></a>2020：疫情下的打工人，活着</h2><p>2020，对大多数人来讲都是艰难的一年吧，我也不例外。<br>因为新冠疫情，过年后不能回公司上班，但后来又说要在家办公，我也没带电脑，幸亏有个同事帮我把电脑寄到了家，然后就开始在家办公，和家人一起待了1个多月，闲暇时互相切磋麻将技艺。毕业后能有这么多和家人相聚的时间真的难得，以后估计也很少有这样的机会了，所以我们都很珍惜。</p><p>2月底，我终于回到了西安，继续在家办公，期间一直潜心钻研厨艺，吃着美食、用投影仪看电影追剧，宅在家的日子倒也十分自在。<br>4月初，毕业后的第一个项目在疫情的影响下提前结束了，但下个项目还没有着落，所以被强制休假到月底，才去公司上班。然后开始了一个多月自我学习和培训的日子，也算充实。</p><p>6月初，我终于有了项目，此时国内的疫情已经基本控制住了，但国外却越愈发严重起来，这也是我第一个项目提前结束的原因，所以新项目自然是国内项目。<br>早听说过国内项目加班多节奏快，而我在公司近两年的时间里，都在国外项目，从来没加过班。经历过的国内软件项目，还是毕业前 <a href="https://jmyblog.top/%E6%9C%AA%E6%9D%A5%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7-Part2/">实习</a> 的时候，而那时的体验并不好，所以刚开始不太想去，但此时形势很严峻，我没有别的选择，只能硬着头皮上了。</p><p>刚开始的一个项目，虽有些不适，但也还能撑得住，有个同事听说我工作两年没加过班表示非常震惊，他是不久前来公司的，可能之前在别的公司经常加班吧，对比下来，我还真是挺「幸运」的。<br>同时，公司里也有一些微妙的变化，有人离职了，也有人「被」离职。人也越来越多了，办公室重新装修，原先的好多休闲区和休息区被拆掉，全部换成了工位，有的地方连会议室都摆上了工位，让人倍感压抑。</p><p>后来，这个项目终于结束了，但还是没有适合的国外项目可以去，所以又去了另一个国内项目，节奏更加紧张，这次我 <a href="https://jmyblog.top/Silent-protest/">没撑住</a> ，心态直接崩了，然后默默的下了项目。<br>此时已是11月底，剩下的一个月，是一段五味杂陈、胡思乱想的日子，2020就这样结束了。</p><h2 id="2021：优雅的躺平"><a href="#2021：优雅的躺平" class="headerlink" title="2021：优雅的躺平"></a>2021：优雅的躺平</h2><p>2021，我的本命年，目前没有什么奇怪的事情发生。<br>前四个月我是 <a href="https://jmyblog.top/my-1-3-part-of-2021/">这样度过</a> 的，总之就是拨云见日的一段时光，到今天，我已经在新项目上待了三个月，整体来说挺不错，因为熟人很多，也学了不少东西，不出意外今年会在这个项目上一直做下去，这样倒也不错，至于明年之后会如何，见招拆招吧。</p><p>到今天，我已经工作整整三年了。<br>三年以前，我想开心的工作，现在，我只想优雅地躺平<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>，我是一个习惯被安排的人，习惯于被指点江山，被激扬文字，玩游戏喜欢玩辅助，所以工作也选择了辅助角色。<br>在公司我一直无争无为，默默搬砖，除了跟在一个项目工作过的人彼此认识之外，也没有什么大的影响力，可能我忽悠不了别人，也很难被人忽悠吧。搁娱乐圈，这就叫做「搬砖三年，归来仍是素人。」</p><p>记得刚入职的时候，有同事向我感慨「我要是21岁，就可劲儿造」，但我却一直心如止水，「造」不起来。后来，又有很多同事说我太佛系，不像个年轻人。<br>其实我一直都尽力搬砖，遵纪守法，不逃税不漏税，好好活着，不给别人找麻烦，作为社会人，我觉得已经很合格了，我是一个没有太多欲望的人，这就是我对自己的期望，如果这样就叫做「佛系」和「躺平」的话，那就是吧。</p><p>工作后感觉时间过的更快了，好像昨天才拿到公司的offer，转眼就已经三年了，这三年我一直一个人住，所以也练就了不错的 <a href="https://jmyblog.top/myCookingWay/">厨艺</a> ，偶尔请朋友和同事来家里小聚，生活倒也平淡自在。有人老想回到过去，但我还是喜欢现在的生活，因为过去太迷茫，对未来有太多恐惧，还是现在选择更多一些，更自由。<br>按照公司的制度，我又可以更换新的办公电脑了，这次应该是16寸的MacBook Pro，之前的电脑也打算按照员工优惠回购，收拾心情，重新出发。</p><h2 id="我眼里的车和房"><a href="#我眼里的车和房" class="headerlink" title="我眼里的车和房"></a>我眼里的车和房</h2><p>打工三年，我的月薪从税前四位数变成了税后五位数，这三年我每个月都攒钱，一直想买个二手的小房子，期望是用公积金就可以还贷款，这样不用降低生活质量。</p><p>五月份我开始实地看房，但一直找不到合适的，房价真的虚高，我的期望根本达不到，以我能拿出手的首付，只能用得上商贷，想用公积金贷款，只能掏更多的首付，凭我一人之力，目前根本做不到。<br>至于买新房，更难，虽然我有购房资格，但抛开价格不谈，现在买房必然摇号，我并不是刚需，所以希望渺茫。更别说现在无良开发商这么多，少有不维权的楼盘，所以买房这场游戏，我只能暂时被劝退。<br>最近，西安正在进行二手房价格调控，政府出台了指导价，虽不能指望对目前涨到最高点的房价有太多约束，但总归市场还是有一些震荡，买卖双方还在观望，且先看着吧。</p><p>至于买车？倒也不是不能买，但买了车，停哪呢，公司的车位已经排到了2023年，而且在西安开车太难了，除了限号，就是堵车，更别提车到手就贬值，还得买保险保养什么的，主要我一个人，买车的需求实在不强烈。<br>还是骑上我心爱的小滑板吧，它永远不会堵车。</p>]]></content>
    
    
    <summary type="html">搬砖三年，归来仍是素人。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="工作" scheme="https://jmyblog.top/tags/%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="生活" scheme="https://jmyblog.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>安卓模拟器快速冷启动</title>
    <link href="https://jmyblog.top/emulator-cold-boot/"/>
    <id>https://jmyblog.top/emulator-cold-boot/</id>
    <published>2021-07-15T01:54:40.000Z</published>
    <updated>2021-08-21T07:30:31.466Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>问题</p></div><p>博主最近搬砖，发现安卓模拟器有一些小bug，最常见的是App打不开，得冷启动模拟器后，卸载App重新安装才可以。由于项目暂时用不了真机，只能在模拟器测试，所以经常遇到这个问题，每次都得重复这个步骤：<mark class="label primary">冷启动模拟器-&gt;卸载App-&gt;安装App</mark>。</p><div class="note info"><p>解决</p></div><p>首先冷启动模拟器：</p><p><img data-src="https://i.loli.net/2021/08/03/rTQ1wObeRgiEqya.png" alt="Cold Boot"><br>卸载测试App，之后点击模拟器右侧菜单栏 <strong>…</strong> 按钮进入高级设置，然后进入Snapshots选项，点击TAKE SNAPSHOT：</p><p><img data-src="https://i.loli.net/2021/08/03/JYDru2NTiqeoG8Q.png" alt="TAKE SNAPSHOT"><br>之后可以看到新的snapshot，这里我命名为quickboot：</p><p><img data-src="https://i.loli.net/2021/08/03/ZEwqUF9OSnTQaI6.png" alt="命名snapshot"><br>打开AVD Manager页面，编辑刚才的模拟器，在高级设置中选择通过snapshot启动模拟器，点击finish：</p><p><img data-src="https://i.loli.net/2021/08/03/dl2a1SJIHDR6knA.png" alt="编辑设置"><br>最后再打开编辑页面检查一遍，确保设置正确，我自己设置的时候，发现这里要选择两次才可以，感觉又是AVD Manager的一个bug。<br>设置完成后，以后再打开模拟器测试，就是一个干净的测试环境了，只需要再安装测试App就可以了，再也不用经常手动冷启动了。</p>]]></content>
    
    
    <summary type="html">通过保存snapshot快速冷启动安卓模拟器。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="emulator" scheme="https://jmyblog.top/tags/emulator/"/>
    
    <category term="coldBoot" scheme="https://jmyblog.top/tags/coldBoot/"/>
    
  </entry>
  
  <entry>
    <title>Charles连接iOS和Android设备</title>
    <link href="https://jmyblog.top/CharlesConnect/"/>
    <id>https://jmyblog.top/CharlesConnect/</id>
    <published>2021-07-05T07:12:00.000Z</published>
    <updated>2021-08-21T07:30:31.462Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这段时间工作时需要用到Charles来抓包移动端请求，配置的过程中踩了不少坑，所幸最后还是成功了，所以记录一下折腾的过程，非常详细，包括iOS和Android两个平台，免得以后又忘了。</p></div><h2 id="配置Charles"><a href="#配置Charles" class="headerlink" title="配置Charles"></a>配置Charles</h2><h3 id="下载Charles-CA"><a href="#下载Charles-CA" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h3><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate</mark>：<br><img data-src="https://i.loli.net/2021/07/06/6E3AXOaWcfgodDT.png" alt="下载CharlesCA到本地"></p><h3 id="信任Charles-CA"><a href="#信任Charles-CA" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h3><p>之后打开电脑的 Keychain Access，搜索 “Charles” 找到Charles CA，然后设置它为始终信任：<br><img data-src="https://i.loli.net/2021/07/06/SEqwaRA6sGPQ3zl.png" alt="设置信任证书"></p><p>Charles的基础配置就先这样，下边连接设备的过程中，还需要设置一些东西。</p><h2 id="iOS抓包"><a href="#iOS抓包" class="headerlink" title="iOS抓包"></a>iOS抓包</h2><h3 id="iOS-Simulator"><a href="#iOS-Simulator" class="headerlink" title="iOS Simulator"></a>iOS Simulator</h3><h4 id="下载Charles-CA-1"><a href="#下载Charles-CA-1" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate in iOS Simulators</mark>：<br><img data-src="https://i.loli.net/2021/07/07/kzsAhKJD8icNY5M.png" alt="下载CharlesCA到iOS Simulator"><br>之后Charles会弹出添加成功的提示：<br><img data-src="https://i.loli.net/2021/07/07/L1mPro8s7UZxARI.png" alt="添加成功提示"><br>打开iOS Simulator，进入<mark class="label primary">Settings - General</mark>，此时应该有一个 <strong>Profile</strong> 选项显示：<br><img data-src="https://i.loli.net/2021/07/07/c1x7tjPR8S9EI3Q.png" width="230" height="500" alt="CA Profile"><br>如果没有的话， 开启Charles的 <mark class="label primary">Proxy-macOS Proxy</mark>设置，再打开Simlator的Safari浏览器，输入 <strong>chls.pro/ssl</strong>，手动下载Charles，之后再去<mark class="label primary">Settings - General</mark>就可以看到Profile了，里面就是下载的Charles CA:<br><img data-src="https://i.loli.net/2021/07/07/9KhcPUoGeL7s3Vu.png" alt="手动下载CharlesCA到iOS Simulator"></p><h4 id="安装Charles-CA"><a href="#安装Charles-CA" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>点击上边下载好的Charles CA，一路点击安装即可，直到CA为Verified：<br><img data-src="https://i.loli.net/2021/07/07/U19N8bHGYKpifIc.png" alt="安装Charles CA到iOS Simulator"></p><h4 id="信任Charles-CA-1"><a href="#信任Charles-CA-1" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>去<mark class="label primary">Settings - General - About - Certificate Trust Settings</mark>，打开Charles CA的信任按钮就好了：<br><img data-src="https://i.loli.net/2021/07/07/6B19UTo7jVrYIia.png" width="230" height="500" alt="信任CA"></p><h4 id="抓取Simulator请求"><a href="#抓取Simulator请求" class="headerlink" title="抓取Simulator请求"></a>抓取Simulator请求</h4><p>打开Charles, 确保 <mark class="label primary">Proxy-macOS Proxy</mark>设置是开启的，这里还需要设置Charles的SSL Proxy，这样才能抓取到Https的请求，打开<mark class="label primary">Proxy-SSL Proxy Settings</mark>，添加你想要进行Https抓取的url地址，此后Charles只会抓取此地址的Https请求：<br><img data-src="https://i.loli.net/2021/07/07/fVdGbDXUhPlejHg.png" alt="SSL Proxy Settings"><br>然后就可以正常抓取Simulator里的Https请求了：<br><img data-src="https://i.loli.net/2021/07/07/7ihUkHImbWsKJfV.png" alt="Simulator请求"><br>其他请求则会提示需要开启SSL Proxy Settings：<br><img data-src="https://i.loli.net/2021/07/07/orQJheFv2mKna91.png" alt="需要开启SSL提示"></p><h3 id="iOS-真机"><a href="#iOS-真机" class="headerlink" title="iOS 真机"></a>iOS 真机</h3><p>此部分还没有尝试过，后续会更新。</p><h2 id="Android抓包"><a href="#Android抓包" class="headerlink" title="Android抓包"></a>Android抓包</h2><h3 id="Android-Emulator"><a href="#Android-Emulator" class="headerlink" title="Android Emulator"></a>Android Emulator</h3><h4 id="设置Wifi-Proxy"><a href="#设置Wifi-Proxy" class="headerlink" title="设置Wifi Proxy"></a>设置Wifi Proxy</h4><p>打开Charles，点击 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate on a Mobile device or Remote Broswer</mark>:<br><img data-src="https://i.loli.net/2021/07/07/GLb9lJ2gQIWaUY1.png" alt="Charles Proxy"><br>之后会打开一个弹窗，上边是你的本地IP和Charles默认端口，先别关掉它：<br><img data-src="https://i.loli.net/2021/07/07/98VG6rC3EPwIx4n.png" alt="Proxy Detail"><br>先确保模拟器网络连接正常，之后去 <mark class="label primary">Settings-Network &amp; internet-WiFi</mark>，可以看到连接到了<strong>AndroidWifi</strong>，然后按照下图设置此Wifi的Proxy，点击Wifi后的设置按钮，点击铅笔图标，将Proxy设置为Manual，Hostname和Port就是上边弹窗里对应的值：<br><img data-src="https://i.loli.net/2021/07/07/Z159rMfjOetoEuS.png" alt="设置Wifi Proxy"></p><h4 id="下载Charles-CA-2"><a href="#下载Charles-CA-2" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开模拟器的Chrome浏览器，输入 <strong>chls.pro/ssl</strong>，之后弹出下载Charles CA的提示框，选择下载：<br><img data-src="https://i.loli.net/2021/07/07/Pfxc64zlbBUF97y.png" width="230" height="500" alt="下载CA"><br>如果没有网络，尝试冷启动模拟器，看模拟器下拉框中有没有关于Wifi的限制连接提示，点击之后选择仍要连接，应该就有网了，之后再去浏览器下载CA：<br><img data-src="https://i.loli.net/2021/07/07/7M98LEFyqQSitXa.png" width="650" height="550" alt="连接网络"><br>如果这样还是下载不了，那么打开Charles，点击点击 <mark class="label primary">Help - SSL Proxying - Save Charles Root Certificate</mark> 将Charles CA下载到本地:<br><img data-src="https://i.loli.net/2021/07/07/i2JhtF56X9kWI8L.png" alt="Save Charles Root Certificate"><br>然后手动将文件拖到模拟器，也是一样的。</p><h4 id="安装Charles-CA-1"><a href="#安装Charles-CA-1" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>进入模拟器<mark class="label primary">Settings - Security - Encryption&amp;credentials</mark>。</p><blockquote><p>Android 11:</p></blockquote><p>选择Install a certificate，点击CA certificate，选择Install anyway，最后点击下载的Charles CA文件，就可以安装成功了：<br><img data-src="https://i.loli.net/2021/07/07/JcGMQ2ysOYE1WlH.png" alt="Android11安装Charles CA"></p><blockquote><p>其它版本</p></blockquote><p>选择 Install from SD card，你就会看到上面下载的Chares CA文件，点击进行安装，名字可以随便写，Credential Use选择VPN and apps：<br><img data-src="https://i.loli.net/2021/07/07/Hpjz6bJVlr8L4eT.png" alt="安装Charles CA"></p><p>安装完成之后去<mark class="label primary">Encryption&amp;credentials-User credentials</mark> 和 <mark class="label primary">Encryption&amp;credentials-Trusted credentials</mark>应该都可以看到安装成功的Charles CA文件：<br><img data-src="https://i.loli.net/2021/07/07/5hSwycPTOI1rjqN.png" width="600" height="550" alt="Charles CA"></p><h4 id="信任Charles-CA-2"><a href="#信任Charles-CA-2" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>这里是个大坑，很重要，根据 <a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">Charles官方文档</a> 的Android部分所述 ，由于Charles证书是用户安装的，而Android 7.0以后，系统默认不信任用户安装的证书。所以即使我们安装了Charles证书，也并不能成功进行抓包，此时有两种解决办法：</p><ul><li>办法一：使用官网做法，在你要抓包的应用程序源代码中添加配置文件，使该应用程序信任用户安装的Charles证书。</li><li>办法二：将Charles证书的属性更改为系统安装的证书，从根本上解决问题，但是网上能找到的成功案例不多，不过适用于无法改动应用源代码的同学。</li></ul><p>这里我用的办法一，添加配置文件，按照官网说的做就行，在代码库的 <strong>res/xml/</strong> 路径添加network_security_config.xml文件，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;network-security-config&gt; </span><br><span class="line">  &lt;debug-overrides&gt; </span><br><span class="line">    &lt;trust-anchors&gt; </span><br><span class="line">      &lt;!-- Trust user added CAs while debuggable only --&gt;</span><br><span class="line">      &lt;certificates src="user" /&gt; </span><br><span class="line">    &lt;/trust-anchors&gt; </span><br><span class="line">  &lt;/debug-overrides&gt; </span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></tbody></table></figure><p>之后在Manifest.xml里添加下边的reference就行:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;application android:networkSecurityConfig="@xml/network_security_config" ... &gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></tbody></table></figure><p>这里只配置了应用的debug版本，作改动后重新build代码，之后将生成的debug版本.apk文件安装到模拟器，这时信任Charles CA就设置成功了。</p><h4 id="抓取Emulator请求"><a href="#抓取Emulator请求" class="headerlink" title="抓取Emulator请求"></a>抓取Emulator请求</h4><p>打开Charles, 然后<strong>关闭</strong> <mark class="label primary">Proxy-macOS Proxy</mark>设置，其它内容按照上文的 <a href="https://jmyblog.top/CharlesConnect/#%E6%8A%93%E5%8F%96Simulator%E8%AF%B7%E6%B1%82">抓取Simulator请求</a> 部分做就行了，这里不再赘述。</p><h3 id="Android真机"><a href="#Android真机" class="headerlink" title="Android真机"></a>Android真机</h3><p>此部分还没有尝试过，后续会更新。</p><h2 id="利用Breakpoints修改并发送请求"><a href="#利用Breakpoints修改并发送请求" class="headerlink" title="利用Breakpoints修改并发送请求"></a>利用Breakpoints修改并发送请求</h2><h3 id="设置Breakpoints"><a href="#设置Breakpoints" class="headerlink" title="设置Breakpoints"></a>设置Breakpoints</h3><p>通过设置Breakpoints，我们可以修改请求的Request和Response, 鼠标定位到你想要修改的请求，之后右键勾选BreakPints即可，之后再次进行相同请求时，就会出现编辑请求的页面，可以修改Request和Response：<br><img data-src="https://i.loli.net/2021/07/07/chOZeBxnHwtNSyM.png" alt="设置Breakpoints"></p><h3 id="管理Breakpoints"><a href="#管理Breakpoints" class="headerlink" title="管理Breakpoints"></a>管理Breakpoints</h3><p>打开<mark class="label primary">Proxy-Breakpoints Settings</mark>，可以打开管理Breakpoints的弹窗，里面包括已经设置Breakpoints的url，以及Breakpoints的类型：Request和Response<br><img data-src="https://i.loli.net/2021/07/07/3G1OlPSApsaek2b.png" alt="Breakpoints Settings"><br>如果只想修改请求的Request或Response，只需要勾选对应的选项即可：<br><img data-src="https://i.loli.net/2021/07/07/pzOy7Cq2HEDlXrT.png" alt="设置具体抓取类型"></p>]]></content>
    
    
    <summary type="html">抓包移动端请求，测试异常情况。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Charles" scheme="https://jmyblog.top/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>办公室版围城</title>
    <link href="https://jmyblog.top/SomethingsInWork/"/>
    <id>https://jmyblog.top/SomethingsInWork/</id>
    <published>2021-06-27T03:11:26.000Z</published>
    <updated>2021-08-21T07:30:31.464Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/18/s819qyRpVilb2Am.png"><ul><li>城市：X市</li><li>单位：才华有限公司</li><li>角色：G君/L君/H兄/C君/F兄/D兄/王铁锤</li></ul><div class="note info"><p><strong>G君和L君入职了。</strong></p><p>作为应届毕业生的G君，是X市土著，已婚，有留学经历。整体看上去比同龄人少了一丝沧桑，看到G君让王铁锤想到了刚入职的自己，但他可没有G君一样优秀的履历。一段时间下来，周围同事对G君也是一致好评，转正只是时间问题。</p><p>L君为社招入职，有3年工作经验，虽与G君同龄但气质更加沉稳，工作上手也很快。与同事相处也很融洽，无槽点，所以王铁锤同样觉得他转正问题不大。</p><p><strong>H兄要下项目了</strong></p><p>作为项目上的大佬，Leader订了蛋糕并举行了roll off仪式，全项目欢送。王铁锤没有去，因为他刚上项目与H兄并不熟悉亦无交流，加上社恐并不想强行social，所以继续坐在工位上忙(mo)碌(yu)。</p><p>G君看到大家都去，也弱弱的问王铁锤「我也要去吗」，王铁锤诚恳回复「可以不去」，但G君依然去social了，王铁锤表示理解，一个新人确实不能冒被人说不合群的风险。</p><p>Social结束后，大家回到工位，王铁锤旁边刚上项目的C君看到王铁锤已在工位，疑惑发问「你是刚回来还是没去」，王铁锤淡淡回复「没去」，C君作惊讶状「你为什么不去」，王铁锤只好回复「因为不熟，所以不想强行social」，C君停止发问且表情复杂。</p><p><strong>D兄、L兄、F兄要离职了。</strong></p><p>D兄在公司over5年了，王铁锤和他比较相熟，也一起呆过几个项目。他为人风趣，在公司朋友很多，经常邀请王铁锤一起聚餐出游。在 <a href="https://jmyblog.top/Silent-protest/">沉默的抗争</a> 事件后也给了王铁锤极大的安慰，或许这个事件对他也有一些影响吧，在后边待了与该事件几个类似的项目后，也离开了。总之，他是一个有能力的人，确实值得更好的。</p><p>L兄也是 <a href="https://jmyblog.top/Silent-protest/">上述事件</a> 主要人员之一。事件后王铁锤某次电梯中首次与L兄相遇，寒暄时得知他要离职的消息，惊讶之余同样表示理解，虽然L兄只在公司一年，但任谁在那种项目待下去，都会受不了的。</p><p>F兄也是王铁锤相熟的同事，一起呆过几个项目，在公司两年左右。在H兄欢送会结束不久，王铁锤得知他要离职的消息，震惊之余也只能祝好，准备线下再找他八卦一波。</p><p>默默离职的D兄/L兄/F兄，对比H兄声势浩大的roll off仪式，不能不让王铁锤感叹世界的参差。</p><p><strong>H兄欢送会之后，王铁锤被告知要开始写下半年的期望了。</strong></p><p>对于以搬一辈子砖的「不内卷生活」为理想的王铁锤而言，每次搞制定期望或年终总结之类活动的时候，他都不知道自己该干点啥。但为了 <a href="https://jmyblog.top/WorkerStates/">生存</a> ，只得按照套路绞尽脑汁的想点啥写出来。王铁锤无语望天，什么时候才能实现「搬砖自由」呢。</p></div>]]></content>
    
    
    <summary type="html">有人入职，有人离职，有人roll off，还有人要写下半年的期望。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="王铁锤" scheme="https://jmyblog.top/tags/%E7%8E%8B%E9%93%81%E9%94%A4/"/>
    
  </entry>
  
  <entry>
    <title>博客Next主题升级</title>
    <link href="https://jmyblog.top/themeUpgrade/"/>
    <id>https://jmyblog.top/themeUpgrade/</id>
    <published>2021-06-16T02:46:28.000Z</published>
    <updated>2021-08-21T07:30:31.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>前几天在优化博客的浏览体验，过程中参考了一些同道博客，发现他们在聊Next主题的v8版本。因为我也用的是这个主题，但我只更新到了v7.8版本，而且浏览了官网，最新的就是v7.8版本，引起了我的疑惑🤔，然后就开始了解惑和升级之路。</p><h2 id="解惑：theme-next-amp-next-theme"><a href="#解惑：theme-next-amp-next-theme" class="headerlink" title="解惑：theme-next&amp;next-theme"></a>解惑：theme-next&amp;next-theme</h2><p>我目前用的是 <a href="https://github.com/theme-next/">theme-next</a> 团队提供的Next主题，最新的是我在用的v7.8版本：<br><img data-src="https://i.loli.net/2021/06/25/h54FWYfywklibjV.png" alt="theme-next-v7.8"></p><p>浏览了同道博客，发现他们用的是 <a href="https://github.com/next-theme">next-theme</a> 团队提供的Next主题，最新版本确实是v8.x：<br><img data-src="https://i.loli.net/2021/06/25/lpjf4UEsiXhkW8M.png" alt="next-theme-v8"></p><p>那么问题来了，同一个主题为什么有两个团队在维护呢？作为一个合格的吃瓜群众🍉，我嗅到了一丝不寻常的气息，果然，有疑惑的不止我一个人：<br><img data-src="https://i.loli.net/2021/06/25/5fkAD2LBXtCyWux.png" alt="同样疑惑的吃瓜群众"></p><p>紧接着我就找到了答案：<br><img data-src="https://i.loli.net/2021/06/25/oliLXKknhpUQG51.png" alt="原来是一场神仙打架"></p><p>好了，疑惑没有了，虽然已经完成了对当前使用主题的一些优化，但为了与时俱进，还是决定使用新团队开发的Next主题，当然，我心中对大佬们的敬畏是一样的😂</p><h2 id="升级之路"><a href="#升级之路" class="headerlink" title="升级之路"></a>升级之路</h2><p>首先git clone新的 <a href="https://github.com/next-theme/hexo-theme-next">next仓库</a> ，通读了read me，然后按照同道文章进行更新，参考了：<a href="https://asurada.zone/post/Update-Next-From-V7-To-V8/">Hexo Next 主题 V7 升级 V8 记录</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>关于配置文件，新团队提出了 <a href="https://hexo.io/docs/configuration.html#Alternate-Theme-Config">Alternate Theme Config 存储配置</a> 的概念，简单来说就是推荐两种方式存放主题配置文件：</p><ol><li>在博客根目录创建一个_config.next.yml 文件，将next主题的配置迁移到这里，然后在博客配置文件_config.yml里指向这个配置文件。</li><li>直接在博客配置文件_config.yml里添加next主题的所有配置，在一个文件里同时管理博客配置和主题配置。</li></ol><p>我参考的同道文章中使用的就是第一种方式，但我尝试之后，还是觉得之前配置方式(在主题目录和博客根目录管理各自的_config.yml)比较适合我，因为我只有一个主题，而且我一直都是这么做的，已经习惯了，所以上面两种我都不采取。</p><p>于是按照之前的做法，对比新旧next主题配置，直接更改 <strong>next/_config.ym</strong>l 里的内容，从上到下依次改动了：</p><div class="note info"><ul><li>切换到Mist主题</li><li>修改网站图标</li><li>打开博文copyright</li><li>添加菜单栏</li><li>修改头像，打开圆角和旋转效果</li><li>添加社交链接</li><li>添加友链</li><li>修改网站底部信息</li><li>打开标签图标</li><li>开启博客赞赏并添加收款码</li><li>开启代码库复制按钮</li><li>开启浏览进度header bar</li><li>修改字体</li><li>开启图片fancybox和lazyload</li><li>开启livere评论</li><li>开启chatra chat</li></ul></div><p>这些配置大部分都只是把 next/_config.yml 文件里的toggle打开，把false改成true而已，非常方便，没什么可讲的，但有两个功能我觉得可以高亮一下。</p><h4 id="图片fancybox"><a href="#图片fancybox" class="headerlink" title="图片fancybox"></a>图片fancybox</h4><p>开启fancybox只需要在_config.xml里搜索fancybox，然后将false改成true就可以了，简单到不可置信。之后就可以点开博客里的图片，而且还能切换查看上下图、幻灯片播放、查看图片列表，而且还可以看到图片下方的描述，简直了，什么神仙功能，大佬们太棒了❤️：</p><p><img data-src="https://i.loli.net/2021/06/25/iMc3p7a8WSoGsdQ.png" alt="fancybox"></p><h4 id="chatra-chat"><a href="#chatra-chat" class="headerlink" title="chatra chat"></a>chatra chat</h4><p>事实上，之前使用的next主题也有这项配置，但一直没深入研究，不过这次使用之后也觉得超级方便！开启chatra chat只需要在_config.xml里搜索Chat Services，之后开启chat button展示，接着去chatra官网注册账号，把id加上就可以了，官网和找id的路径也在文件里注释了：</p><p><img data-src="https://i.loli.net/2021/06/25/yVWdFzJloPquMt9.png" alt="开启chatra chat"></p><p>chatra官网中也可以进行个性化配置，包括默认回复的信息，展示文本等等：</p><p><img data-src="https://i.loli.net/2021/06/25/ikAVf1JdjSrOxYs.png" alt="自定义弹窗展示文本"><br><img data-src="https://i.loli.net/2021/06/25/J1F2fexgbtGrQ8I.png" alt="自定义用户信息表单"><br><img data-src="https://i.loli.net/2021/06/25/ykLIPbEMOqUQT3s.png" alt="自定义默认回复信息"></p><p>至于使用成本，自注册之日起，会赠送10天的pro套餐，10天之后会回到免费套餐，但这并不影响简单使用，基本的聊天功能还是会支持的，所以还是推荐使用：<br><img data-src="https://i.loli.net/2021/06/25/K7Sug1ksNRw8WyM.png" alt="价格信息"></p><p>Chat Services里列出的其它Chat服务tidio和gitter我也试了，但tidio貌似需要科学上网，gitter貌似只能群聊，隐私感体验较差，所以还是选择了chatra。<br>chatra可以用邮件的方式提示新消息，但刚开始只能在网页上回复消息，后来发现AppStore也有这个应用，叫<strong>Chatra</strong>，下载后就能及时用手机回复消息了：</p><p><img data-src="https://i.loli.net/2021/08/07/fNKCAtxyvwecpRF.png" alt="用手机App发送消息"><br>手机端交互和网页差不多，但不能同时在线：</p><p><img data-src="https://i.loli.net/2021/08/07/fvbPwaZUjMtzOlS.jpg" alt="chatra手机端"></p><h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><p>到这里，基本的配置就ok了，然而我之前还给主题加了一些 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE">个性化设置</a> ，但这次不打算添加太多了，只留下一些必要的就可以，返璞归真。</p><mark class="label success">博客宠物</mark><p>首先就是我们博客右下角萌萌的小黑啦，依然是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E5%8D%9A%E5%AE%A2%E5%AE%A0%E7%89%A9">之前的文章</a> ，在路径 /themes/next/layout/_layout.njk 尾部加上 <strong>live2d()</strong> 的标签就行。</p><mark class="label success">博客运行时间</mark><p>在博客底部加上运行时间真的很有仪式感，跳动的时间感觉博客是“活着的”，还是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4">之前的文章</a> 设置。</p><mark class="label success">校正livere评论的refer值</mark><p>之前由于livere评论的refer值不对，导致评论数据缺失，后来找回来并写了 <a href="https://jmyblog.top/comments-comeback/">一篇文章</a> 讲述解决办法，所以还是按照这个解决办法，在路径 next/source/js/third-party/comments/livere.js 改动之后才能看到所有的评论数据:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refer: 'jmyblog.top' + location.pathname</span><br></pre></td></tr></tbody></table></figure><h2 id="升级后对比"><a href="#升级后对比" class="headerlink" title="升级后对比"></a>升级后对比</h2><p>新版Next主题内置了更多插件，只需要打开开关就能用，确实挺香的。这次升级我也把之前的Next_Gemini卡片式布局，切换到了现在的Next_Mist布局，博客展示更加返璞归真了，对比感觉还是现在的效果比较适合展示博客：</p><p><img data-src="https://i.loli.net/2021/06/24/ibkeCQwLaV9xsXd.jpg" alt="之前是有点花里胡哨哈"></p><p><img data-src="https://i.loli.net/2021/06/24/cHQjPZJUMAq5fta.png" alt="现在沉稳多了"></p><p>这段时间真折腾啊，又是升级博客服务，又是升级主题的，终于告一段落了，之后很长一段时间应该不会再有升级了。为了维护这个小破站，我真是操碎了心，接下来就是专注写作，多更新博客了。</p>]]></content>
    
    
    <summary type="html">返璞归真式主题升级。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="next-theme" scheme="https://jmyblog.top/tags/next-theme/"/>
    
    <category term="theme-next" scheme="https://jmyblog.top/tags/theme-next/"/>
    
  </entry>
  
  <entry>
    <title>博客Pages服务升级</title>
    <link href="https://jmyblog.top/PageServiceUpdate/"/>
    <id>https://jmyblog.top/PageServiceUpdate/</id>
    <published>2021-06-08T08:54:05.000Z</published>
    <updated>2021-08-21T07:30:31.464Z</updated>
    
    <content type="html"><![CDATA[<img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1graz9zi8goj61qm15oah202.jpg"><h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>首先我的博客是同时部署在GithubPages和CodingPages上的，GithubPages提供国外访问，CodingPages加速国内访问。两个服务都加了我的自定义域名 <mark class="label info">jmyblog.top</mark>，且都开启了Https。</p><p>两个服务给我的自定义域名申请的Https证书都是由国外的Let’s Encrypt机构签发，一般这个证书有效期只有三个月。由于我的域名解析设置，在证书快到期时，GithubPages可以帮我自动续申请证书，而CodingPages却不能，这就导致证书到期后在国内不能通过Https的方式访问我的博客，所以每次证书快到期时，我都要登录CodingPages <a href="https://jmyblog.top/HttpsUpdate/">手动续申证书</a>。</p><p>去年的时候，CodingPages服务就一直给我发短信说是升级啥的，但我没有关注，我一直是个破罐子破摔的人，只要它没有停服，博客还能访问就懒的升级。<br>直到有一天我打开博客的时候出现异常，有时是直接访问不了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjgogovj624u10stbw02.jpg" alt="1622540423142.jpg"><br>有时是一些报错，好像是https证书过期之类：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjzp6g2j61xo1g8n5f02.jpg" alt="1622540733603.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazkajnejj61ww15ywjr02.jpg" alt="1622540555676.jpg"><br>所以想先手动更新一波证书，然而登录Coding之后发现并不是证书的问题，而是CodingPage旧版直接停服了，必须更新才行：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazp0008pj62l20wuk0u02.jpg" alt="1622532281585.jpg"><br>于是新的一波折腾又开始了，为了以后温故知新，我把折腾过程全程截图保存了下来，就有了这篇博客。</p><h2 id="CodingPages升级腾讯云服务"><a href="#CodingPages升级腾讯云服务" class="headerlink" title="CodingPages升级腾讯云服务"></a>CodingPages升级腾讯云服务</h2><h3 id="绑定腾讯云账号"><a href="#绑定腾讯云账号" class="headerlink" title="绑定腾讯云账号"></a>绑定腾讯云账号</h3><p>先按照升级提示绑定腾讯云账号，看来腾讯是和Coding有某种关系了(后来搜了下好像是CodingPages被腾讯收购了，以后底层全用腾讯云服务，Coding这边只是一个UI的壳子)，总之不管他们啥关系，先升级再说，账号绑定完成后又开启了新的关卡：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grb00pbdghj62e80wkq9s02.jpg" alt="1622538814928.jpg"><br>然后按照指示一顿操作，终于可以使用新版Coding Pages了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyc2uyn8j62g812ijz702.jpg" alt="1622539615813.jpg"></p><h3 id="旧版网站升级"><a href="#旧版网站升级" class="headerlink" title="旧版网站升级"></a>旧版网站升级</h3><p>由于我是要升级之前的网站，所以进入旧版网站列表，找到之前的静态网站，在右上角看到了「升级至新版」的入口：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydne1euj62780kstcx02.jpg" alt="1622539639577.jpg"><br>于是果断进入，选择相应的网站类型，最开始我选择了自己使用的Hexo，后来部署报错了，是因为我并没有把Hexo的配置文件上传到仓库(因为里面有许多我自己使用的插件私钥和密码，不能上传到public的仓库中)。所以后来又选择了静态网站，才部署成功：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyez5zm5j60qw0lhabu02.jpg" alt="1622539686983.jpg"><br>之后又按照提示，去阿里云更改域名的CNAME设置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd41p2dwuj61ac0g840o02.jpg" alt="1623303229231.jpg"><br>完成设置后(顺便改了下网站名字)，新版的网站就开始部署了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcygr10k3j61bs0mewha02.jpg" alt="1622539996713.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyh19l0uj613r07y74z02.jpg" alt="1622540194028.jpg"><br>部署成功后，看到基本信息，有两个网站地址，一个是我的自定义域名，一个是CodingPages提供的访问域名：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd4c4r47uj625210cq8e02.jpg" alt="1623303831826.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyhzt9osj624w0pudm002.jpg" alt="1622540298235.jpg"></p><h3 id="申请腾讯云证书"><a href="#申请腾讯云证书" class="headerlink" title="申请腾讯云证书"></a>申请腾讯云证书</h3><p>切换到自定义域名页面，发现Https证书还在审核中：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyk7l6l7j61620f2jtx02.jpg" alt="1622541431872.jpg"><br>点击「审核中」，就跳转到了腾讯云页面，新的关卡又增加了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcykxfwymj61ag0ic0v902.jpg" alt="1622541560047.jpg"><br>所以根据提示步骤申请证书，进行域名验证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyl51q8ej61610j0n0502.jpg" alt="1622541615687.jpg"><br>去阿里云添加一条TXT的记录进行验证(证书申请成功后就可以删掉这条验证了)：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyloweifj61040kuwg902.jpg" alt="1622541722382.jpg"><br>验证成功后，到了使用证书这一步，不过我们的证书其实已经签发成功了，并不需要自己手动安装，所以忽略掉后边的步骤：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcym15hk2j610y0p076f02.jpg" alt="1622541808007.jpg"><br>等到第二天再打开Coding页面，发现域名的证书审核已经通过了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcymo4m6lj61620fsdid02.jpg" alt="1622614304295.jpg"><br>之后再访问博客，可以看到证书已经更新了，到期日为明年6/1:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p><h3 id="探索腾讯云"><a href="#探索腾讯云" class="headerlink" title="探索腾讯云"></a>探索腾讯云</h3><p>在腾讯云工作台可以看到证书详情，可以看到它同时帮我们开启了www的subdomain访问方式：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6tw6dw3j60ni0kuwfn02.jpg" alt="1623308612737.jpg"><br>也可以进行管理:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6ueay7lj62ke0l0n2i02.jpg" alt="1623308652667.jpg"><br>域名管理：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>然而，世上没有免费的午餐，腾讯云的服务是要收费的，就在我刚开通一天后，它就给我发了欠费的信息：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd741nv9bj60bl0mwwgr02.jpg" height="400" width="200"><br>虽然不贵，但比起之前免费的CodingPages服务，还是有些差距。而且这里的证书期限是一年，一年以后又不知道有啥幺蛾子，先这样吧，就这样破罐子破摔的凑合着用，我已经充值了10块钱，看它能花多少。</p><h2 id="GithubPages问题解决"><a href="#GithubPages问题解决" class="headerlink" title="GithubPages问题解决"></a>GithubPages问题解决</h2><p>到这里，CodingPages的升级已经完成了，然而我的博客还部署在了GithubPages，所以要再看看GithubPages的服务是否正常。不看不知道，一看吓一跳，果然有问题 <mark class="label warning">Domain's DNS record could not be retrieved...</mark>：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydajfznj61mk17oqba02.jpg" alt="1622539358158.jpg"><br>说我的DNS配置不对，要加CNAME。但是我有CNAME呀，不知道为啥有这个报错，于是为了解决这个报错，我开始了漫长的旅途。</p><h3 id="百度-amp-Google"><a href="#百度-amp-Google" class="headerlink" title="百度&amp;Google"></a>百度&amp;Google</h3><p>首先，是在百度和谷歌寻找解决方案，找到了几种方案：<br><span id="inline-toc">1.</span> <a href="https://www.sawlove.com/github-custom-domain-use-https.html">重新绑定域名</a>：是说先把域名remove，然后再重新添加，但是没有解决我的问题。<br><span id="inline-toc">2.</span> 加上www域名前缀：是说在代码库的CNAME文件里给域名加上www前缀，然后在域名解析里也加上www，最后绑定www前缀的域名。但还是没有解决我的问题。<br><span id="inline-toc">3.</span> 让Github自己添加CNAME文件：是说绑定域名后Github会自动在代码库里加上CNAME文件，所以要先把CNAME文件删掉，再重新绑定域名等Github添加文件，然而我照做之后发现Github并没有自动给我添加CNAME文件，所以依然没有解决我的问题。</p><p>总之，折腾了半天，问题还是没有解决，瞧把我给折腾的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd8vxs7z9j60qs1ac0wv02.jpg" height="600" width="350"><br>而且遇到了更多的报错，比如<mark class="label danger">Domain does not resolve to the GitHub Pages server... ：</mark><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vkp1gaj61lu0lg43f02.jpg" alt="1622785367590.jpg"><br>再比如：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30evnlej61mc0fqadr02.jpg" alt="1623129057591.jpg"></p><p>真的累了，甚至想着就用github.io访问好了，GithubPages就不绑定域名了吧：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2tkvgn8j626o0gw78b02.jpg" alt="1622712116380.jpg"></p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>想归想，问题还是要解决的。<br>既然网上的办法解决不了，就乖乖去看官方文档吧，于是直接点击报错信息里的learn more，打开官方文档，开始通读全文：<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a><br>文档里提供了两种自定义域名的绑定配置方法，一种是subdomian，比如 <a href="http://www.example.com/">www.example.com</a> 或者 blog.example.com 这样的，显然我不是这种类型；另一种是apex domain，比如example.com这种的，那可不就是我的域名类型嘛，好，找到方向了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="配置apex-domain"><a href="#配置apex-domain" class="headerlink" title="配置apex domain"></a>配置apex domain</h4><p>然后就按照文档里描述的apex domain的配置方法开始操作，直接跳到第五步：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda1c6edtj61bk0iatcw02.jpg" alt="1623315661401.jpg"><br>说让我添加A记录指向GithubPages提供的这些IP地址，好嘛，安排！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda3xez8lj61qg0a8jte02.jpg" alt="1623315810471.jpg"><br>然后又让我用命令验证配置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda6byoyhj61920h8gp102.jpg" alt="1623315955716.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/pmkCEzlanyQBiD5.png" alt="image.png"><br>接着让我加CNAME文件到我的代码库里：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdae57e55j618s05cgne02.jpg" alt="1623316383313.jpg"><br>这个本来就有，最后是可选项，开启强制Https，也打开了，但据说要等24小时：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdaihv34jj61a60d041302.jpg" alt="1623316394352.jpg"><br>好，所有的配置都没毛病，可以添加域名了，那你倒是说说，为毛这个错它还在？！！！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vvzu3nj62am18agvy02.jpg" alt="1622786325436.jpg"><br>唉，心态崩了。<br>后来问题解决之后，冷静下来想想，此时报错可能有两个原因，一个是我没等够24小时，等够时间后check again应该就没错了；或者我不开启https应该也不会有错，但我还是想有https的，所以没有采取这种做法。<br>但是，我的关注点在这个报错，为毛我绑定的是没有www的域名，报错里却有www的subdomain?<br>好吧，接着看官方文档。</p><h4 id="配置www-subdomain"><a href="#配置www-subdomain" class="headerlink" title="配置www subdomain"></a>配置www subdomain</h4><p>官方文档上说，如果用的是apex domain，推荐再给它配置www subdomain，好吧，就按你推荐的来：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb5pbocfj61a406stap02.jpg" alt="1623317938517.jpg"><br>上边还说，给apex domain配置www submain的前提是你已经按照上边的方法配置好了apex domain，虽然我的报错还在，但我认为自己还是配置好了apex domain的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb6kmrwgj619q05gjt502.jpg" alt="1623317950652.jpg"><br>所以按它说的接着来，第一步，域名解析里添加一个www的CNAME记录，指向 xxx.github.io：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb79fv7hj619y0as42e02.jpg" alt="1623317969868.jpg"><br>安排：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbb8h8q7j624805kt9v02.jpg" alt="1623318311090.jpg"><br>接着把代码库里的CNAME文件也加上www：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbct4avzj62640n042t02.jpg" alt="1623318380827.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbcyyp7nj624y0me42v02.jpg" alt="1623318402390.jpg"><br>第二步，命令验证配置是否正确：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb7f8we4j61ac0dgad002.jpg" alt="1623317982442.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/LeoMy5p6SKGX71O.png" alt="image.png"><br>到这里，配置就已经结束了，激动人心的时候到来了，绑定我的www域名，竟然。。。。。成功了！！！！！小绿勾也打上了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30nk1faj60s40ku77202.jpg" alt="1623130387731.jpg"><br>而且也开启了Https，由于我配置www subdomain是在配置apex domain 24小时之后，此时是已经等够24小时的，所以可以开启Https没有报错。<br>血的教训告诉我们，官方文档是真的有用。所以遇到问题，还是先看看人家让你看的官方文档，然后再搜其他的办法。</p><h2 id="为啥要用CodingPages"><a href="#为啥要用CodingPages" class="headerlink" title="为啥要用CodingPages"></a>为啥要用CodingPages</h2><h3 id="CodingPages在哪"><a href="#CodingPages在哪" class="headerlink" title="CodingPages在哪"></a>CodingPages在哪</h3><p>配置好了GithubPages，目前我的个人域名DNS设置是：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3eg62esj61620gkadb02.jpg" alt="1623301889628.jpg"><br>通过命令再次验证DNS设置：<br><img data-src="https://i.loli.net/2021/06/11/JXKaRVnq3iC7GkQ.png" alt="image.png"><br>有没有发现什么问题？<br>是呀，CodingPages的作用在哪呢？验证到的DNS设置只指向了GithubPages服务，而且无论是访问 <a href="https://jmyblog.top/">https://jmyblog.top</a> 还是 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ，显示的Https证书都是Let’s Encrypt签发的：<br><img data-src="https://i.loli.net/2021/06/11/k4UF5refWqgYNCz.png" alt="image.png"></p><h3 id="CodingPages部署节点"><a href="#CodingPages部署节点" class="headerlink" title="CodingPages部署节点"></a>CodingPages部署节点</h3><p>然后再次探索CodingPages，发现它部署的节点是香港：<br><img data-src="https://i.loli.net/2021/06/11/8TQYjyKRqkbOnhw.png" alt="image.png"><br>想部署到其他节点还得备案才行：<br><img data-src="https://i.loli.net/2021/06/11/ltPUcyOdvebphfB.png" alt="image.png"><br>于是连接一个香港区域的VPN，然后再通过命令再次验证DNS设置，终于看到了指向CodingPages的信息和腾讯云签发的证书：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2xyjpa7j616409ejtt02.jpg" alt="1623054662478.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p><h3 id="腾讯云CDN加速"><a href="#腾讯云CDN加速" class="headerlink" title="腾讯云CDN加速"></a>腾讯云CDN加速</h3><p>登录腾讯云，发现它对站点的加速和服务区域都是境外：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>想切换加速区域还是得备案才行，而且还得另付国内加速的费用：<br><img data-src="https://i.loli.net/2021/06/11/6N8ZSgoWrUtIQcb.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/06/11/n5TdHZtcaL7Azs6.png" alt="image.png"></p><p>但是备案太麻烦了，而且就我这个小破站估计也没多少人看，孤芳自赏罢了，也不至于搞这么多服务。所以在已经有了GithubPages之外，我需要CodingPages的理由是什么呢？</p><h3 id="使用CodingPages的理由"><a href="#使用CodingPages的理由" class="headerlink" title="使用CodingPages的理由"></a>使用CodingPages的理由</h3><p>从前用CodingPages是想用它免费的国内加速服务，现在虽然不备案就不能加速了，但仔细想了想，虽然我不想备案，也不想开启高端的CDN加速服务，还是有一些理由让我使用它的：</p><p><span id="inline-toc">1.</span> 博客内容推送到百度，理由如下：</p><p><img data-src="https://i.loli.net/2021/06/11/6p5iyxc4XZrM9Yo.png" alt="image.png"></p><p><span id="inline-toc">2.</span> 一个备胎，为了保险起见，同时使用两个服务还是不错的，虽然它们的功能有一些重复。<br><span id="inline-toc">3.</span> 虽然目前只有国外加速服务，好歹能给国外的朋友提高访问体验啊，而且万一以后又想备案呢，留条后路总没错。<br><span id="inline-toc">4.</span> 虽然用它的理由的确乏善可陈，但是配都配好了，我上边折腾这么久也不能白折腾。</p><h2 id="站点验证"><a href="#站点验证" class="headerlink" title="站点验证"></a>站点验证</h2><p>到这里，博客配置就已经结束了，但还是要通过第三方工具验证博客的可访问性和速度。</p><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><p>之前做了百度SEO优化，所以使用百度站长工具验证站点，首先是Https认证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2zj0qnrj61qk0s6ae502.jpg" alt="1623056320673.jpg"><br>没毛病，这Https是真的，再看看URL抓取：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3hl9bjdj626i0wa0zl02.jpg" alt="1623302070854.jpg"><br>也没毛病，看来百度可以收录我网站的URL，访问抓取都可以，放心了。</p><h3 id="Google收录"><a href="#Google收录" class="headerlink" title="Google收录"></a>Google收录</h3><p>也做过Google的SEO优化，所以使用Google站点工具，先连上站点验证所有权：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2u22ec8j62l418kqah02.jpg" alt="1622714334036.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2ugu9a6j62la12ewit02.jpg" alt="1622714361935.jpg"><br>然后再上传一次sitemap，确保Google可以抓取网站的URL:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3012an4j62co0sagq802.jpg" alt="1623122594184.jpg"><br>没毛病，看来也ok:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre98vekm5j61j20xcjyc02.jpg" alt="1623388402076.jpg"></p><h3 id="访问速度"><a href="#访问速度" class="headerlink" title="访问速度"></a>访问速度</h3><p>通过 <a href="http://tool.chinaz.com/speedtest/">这个网站</a> 可以检测博客的访问速度，在国内测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> ，国际测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> 和 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ， 结果都还不错：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9o9veadj61n41b411r02.jpg" alt="1623389603223.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9omgv7sj61ne0suwjw02.jpg" alt="1623389638753.jpg"><br><img data-src="https://i.loli.net/2021/06/11/jIZwMAUEbsK4VPa.png" alt="image.png"><br>本来只是想记录自己是咋升级，咋解决问题的，结果却写了这么多<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，可能有一些自己的思考吧。先这样凑合着用吧，这样折腾完了，至少以后不用三个月再手动申请证书了。</p>]]></content>
    
    
    <summary type="html">想用自定义域名，可太难了。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="GithubPages" scheme="https://jmyblog.top/tags/GithubPages/"/>
    
    <category term="CodingPages" scheme="https://jmyblog.top/tags/CodingPages/"/>
    
    <category term="腾讯云" scheme="https://jmyblog.top/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第三弹-Android篇</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-3/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-3/</id>
    <published>2021-05-23T10:15:19.000Z</published>
    <updated>2021-08-21T07:30:31.461Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/25/f8GPuvCgVNoA61q.png" alt="image.png"></p><p>上篇博客我们完成了测试代码库在iOS平台的CI集成，这篇文章继续讲Android平台。没有看过前几篇的同学也不用担心，可以先fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p><h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>刚注册Bitrise的小伙伴可以选择standard plan -&gt; add first app：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"><br>或者回到Dashboard页面，点击Add new app，选择第一项，就会出现创建App页面：<br><img data-src="https://i.loli.net/2021/05/24/daeLy83u7s15xvJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>选择Privare后继续，然后是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的Android应用代码库 <strong>sample-apps-android-sdk22</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/26/KHQy36Wuvdk9mqX.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/26/X9xa5heLAZbzSrk.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现Android图标，说明它被识别为一个Android app，完成后我们直接点击Next&amp;Next&amp;Confirm走完这一步：<br><img data-src="https://i.loli.net/2021/05/26/v8qybjcYhpX5wFJ.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/26/V4r95zG1pHQkDBP.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/26/2LIiTUCwEjbG1lu.png" alt="image.png"></p><h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p><h3 id="添加Emulator并等待启动"><a href="#添加Emulator并等待启动" class="headerlink" title="添加Emulator并等待启动"></a>添加Emulator并等待启动</h3><p>第一步是启动模拟器，由于模拟器启动很慢，所以把它放在第一步。且与iOS不同，Bitrise给Android emulator提供了等待启动的步骤，这样就不用担心模拟器连不上了。可以利用上面的方法在ALL选项里搜索到这一步，然后修改API Level, 这个值对应测试代码库文件 android.conf.js 里的platformVersion(10就是29，11就是30)：<br><img data-src="https://i.loli.net/2021/05/26/Qt6iFbkRIJjZMVq.png" alt="image.png"><br>这一步不需要改动：<br><img data-src="https://i.loli.net/2021/05/26/nZP1lfE2az4DyCo.png" alt="image.png"></p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-android-sdk22</strong> 这个代码库：<br><img data-src="https://i.loli.net/2021/05/26/ZWX6gSilAVazqDu.png" alt="image.png"></p><p>我们先保留以上四步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/26/XtOwQhn29dKgubN.png" alt="image.png"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/26/2iJ5YMVmqOUFKsD.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/26/qgQIob1tMZDPNjx.png" alt="image.png"><br>然后需要改一下代码库里android.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/26/Jj6OA1CUcwlz5Zo.png" alt="image.png"><br>与iOS不同，在Bitrise配置时，这里deviceName的值不是某个具体设备名称，比如“iPhone 11”，而是固定的“emulator”。</p><h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/Va9m3KDYjM6RTv4.png" alt="image.png"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/NDQk2PqSUI3vceo.png" alt="image.png"><br>这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，与iOS不同，Bitrise只给安卓提供了通过Terminal连接Bitrise的远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="image.png"><br>按照Bitrise提供的地址和密码连接即可(每次运行地址和密码都会变)，但只能通过命令行访问，不能直观的看到机器，可以看到我们的测试代码库：<br><img data-src="https://i.loli.net/2021/05/26/FfLzO8Amj7BdxoN.png" alt="image.png"><br>耐心等待，测试就会开始执行并且运行成功，虽然不能通过screen sharing连接服务器直观看到测试执行，但有了等待模拟器的步骤，只要测试代码没有问题，运行速度会很快且成功率高：<br><img data-src="https://i.loli.net/2021/05/26/Bk1JX5f4GgNlc38.png" alt="image.png"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/26/qP6WtDV8L7OAIzl.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/26/u9ScPnVjtvyi57K.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>忽略这个iphone11的名字哈，不知道为啥会带上这个，本来应该是android-emulator之类的开头，不过不要在意这些细节哈哈哈，成功了就行：<br><img data-src="https://i.loli.net/2021/05/26/1scBq5ml7w4nAzO.png" alt="image.png"></p><h2 id="结束之后"><a href="#结束之后" class="headerlink" title="结束之后"></a>结束之后</h2><p>AppUI自动化入门系列到这里就结束啦，不知不觉已经写了一万多字呢，虽然是机器写的，但是手也很酸呐哈哈哈。希望能给大家带来一些新知识和新启发，测试君冲鸭！！！</p>]]></content>
    
    
    <summary type="html">将代码库部署到Bitrise CI，实现Android平台的持续集成。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
    <category term="Android" scheme="https://jmyblog.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第三弹-iOS篇</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-2/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-2/</id>
    <published>2021-05-21T08:46:15.000Z</published>
    <updated>2021-08-21T07:30:31.461Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/C63wHlmUE5o4Nh8.png" alt="image.png"></p><p>通过前两篇博客我们有了一个测试代码库，没有的话可以直接fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 到你的github账户，之后就可以进行CI集成啦，本来是想iOS和Android一起讲的，但篇幅太长，就分开了，多图预警。。。</p><h2 id="Bitrise介绍"><a href="#Bitrise介绍" class="headerlink" title="Bitrise介绍"></a>Bitrise介绍</h2><p><a href="https://www.bitrise.io/">Bitrise</a> 是一款CI工具，与同领域其它工具，比如Jenkins/GoCD/Travis CI的不同在于它是专门用来部署手机应用的，它内置了很多手机应用开发的插件，可以帮助开发团队快速搭建环境、构建部署应用，并执行测试。此外，简洁易懂的UI也是它的一大优势。</p><p>由于Bitrise是一个部署App的工具，所以我们需要一个App开发代码库，Bitrise提供给我们两个可以使用的代码库，把它们fork到你的github就行：<a href="https://github.com/bitrise-io/sample-apps-ios-simple-objc">iOS</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">Android</a>。</p><p>由于步骤不尽相同，所以两个平台分开讲，开始之前请先注册一个Bitrise账号，然后登录，选择standard plan，你会看到如下页面：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"></p><h2 id="创建iOS应用"><a href="#创建iOS应用" class="headerlink" title="创建iOS应用"></a>创建iOS应用</h2><p>选择 add first app，会进入创建应用页面，选择自己的Bitrise账号，然后选择Private后继续：<br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>下一步是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的iOS应用代码库 <strong>sample-apps-ios-simple-objc</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/24/835XDmsRhif7PCl.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/24/XJkaPhegf62cK1Y.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现iOS图标，说明它被识别为一个iOS app，完成后我们选择 app-store 为导出方式：<br><img data-src="https://i.loli.net/2021/05/24/XuqvxZcNVnSl5LE.png" alt="image.png"><br>编辑以下设置，然后点击confirm后继续：<br><img data-src="https://i.loli.net/2021/05/24/lvsUiuCqImEkZga.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/24/zNgWhZAep1suL8t.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/24/R1lQBKVOtpTN9JX.png" alt="image.png"></p><h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/24/pDifPg2hGw9ROcl.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-ios-simple-objc</strong> 这个代码库。</p><h3 id="添加Simulator"><a href="#添加Simulator" class="headerlink" title="添加Simulator"></a>添加Simulator</h3><p>第三步是启动模拟器，就像在本地运行测试一样，我们需要用模拟器执行测试。由于模拟器启动很慢，所以把它放在第三步，可以利用上面的方法搜索到这一步，然后修改Device Model、OS version、Platform，这三个值分别对应测试代码库文件 ios.conf.js 里的deviceName、platformVersion、platformName，在我的代码库里它就对应下图的值:<br><img data-src="https://i.loli.net/2021/05/24/Qr9CitX4TwjNEae.png" alt="image.png"></p><p>我们先保留以上三步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/24/eJPU6g3AQf52cHy.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/24/6bvo2qVZQJiLUrM.png" alt="image.png"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/24/YJTKr2nZFby1P6j.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/24/FWTqsZHCjLbR3p5.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/24/mzqBDbnFk3ew2rx.png" alt="image.png"><br>然后需要改一下代码库里ios.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/24/pFK1HIQv2aDBmiR.png" alt="image.png"></p><h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/HSrBmEPCRUysTuD.png" alt="image.png"></p><h3 id="配置WebDriver-Agent"><a href="#配置WebDriver-Agent" class="headerlink" title="配置WebDriver Agent"></a>配置WebDriver Agent</h3><p>还是搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/XBCVvrxsTWOpLIl.png" alt="image.png"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/D1iT3QGEnmtxu4d.png" alt="image.png"><br>其实上边几步是可以合到一步的，但为了方便定位错误，我们分的越细越好。这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，这样我们就可以通过Terminal或者Screen sharing连接到Bitrise的远程机器了，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/24/HLoqAcZhWnmKfTv.png" alt="image.png"></p><ul><li>Screen Sharing方式<br>Mac电脑搜索Screen Sharing，然后按照上图提供的地址和用户名密码连接即可，不用保存密码，因为每次运行地址和密码信息都不一样：<br><img data-src="https://i.loli.net/2021/05/24/LkcajHwsOi2NGdJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/2XTuhMC4RzvL1dj.png" alt="image.png"><br>连接成功后，可以看到模拟器已经启动并安装好了测试app：<br><img data-src="https://i.loli.net/2021/05/24/owjWUS7AJXz2CcO.png" alt="image.png"></li><li>Terminal方式<br>按照Bitrise提供的地址和密码连接即可，但只能通过命令行访问，不能直观的看到机器：<br><img data-src="https://i.loli.net/2021/05/24/UClrYfRTsPz9pvN.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/8tuIP7OLKgi5b3R.png" alt="image.png"></li></ul><p>可以看到测试已经开始运行，并尝试连接模拟器：<br><img data-src="https://i.loli.net/2021/05/24/SqhAMYJP6HG91KL.png" alt="image.png"><br>然而，在Bitrise远程机器上启动模拟器太慢了，即使我们把初始化simulator的步骤放在第三步，但无法确定它是否成功启动，所以在执行测试时也经常连不上模拟器。只能延长等待时间或者重试次数(这里会重试前10次，每次5分钟左右)，但也还是经常连不上，然后测试就会挂掉，目前我没找到解决方式(也可能是我网络太差或者bitrise免费版会有一些限制)，这算是一个痛点了，在我之前的Build里，只有两次测试执行成功：<br><img data-src="https://i.loli.net/2021/05/24/reWRbGQHMacCt72.png" alt="image.png"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/24/4ZJHWCGgRUzjb8m.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/24/k1DOBazSQie7v2R.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>成功：<br><img data-src="https://i.loli.net/2021/05/24/qQFKNkY5IfhjuTO.png" alt="image.png"><br>失败：<br><img data-src="https://i.loli.net/2021/05/24/wvBzbI3ya4tWUHQ.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">将代码库部署到Bitrise CI，实现iOS平台的持续集成。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
    <category term="iOS" scheme="https://jmyblog.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第二弹</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-1/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-1/</id>
    <published>2021-05-20T08:46:15.000Z</published>
    <updated>2021-08-21T07:30:31.461Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/BaDFwHCvbWk8g1x.png" alt="image.png"></p><p>上篇博客我们创建好了测试项目，本篇博客就带大家编写测试代码，然后利用模拟器运行。</p><h2 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h2><p>熟悉了测试项目的结构后，我们就可以按照相同的代码格式编写自己的测试代码啦。<br>首先我们想一想，UI测试的第一步是什么呢？当然是定位元素。<br>对于Web应用，我们可以直接使用浏览器的开发者工具inspector定位页面元素：<br><img data-src="https://i.loli.net/2021/05/20/LWRPKYaSbQji4yH.png" alt="image.png"><br>然而我们的测试对象是App，怎么定位App里的元素呢？答案是利用Appium和模拟器。<br>打开我们下载的Appium desktop应用：<br><img data-src="https://i.loli.net/2021/05/20/Xb2R1rJf3PNDEkV.png" width="350" height="300"><br>选择 Start Server, Appium Server就运行起来啦:<br><img data-src="https://i.loli.net/2021/05/20/r27GjW6cAdwHtSK.png" alt="image.png"><br>鼠标hover到右上角的🔍图标，出现tip提示 <strong>Start Inspector Session</strong>，很明显这就是我们用来定位App元素的工具啦，点击之后出现下图窗口：<br><img data-src="https://i.loli.net/2021/05/20/t3b2iRPjNBOpW8x.png" alt="image.png"><br>这里我们只关注当前的Tab窗口，其它部分不做介绍。在这个窗口中，我们可以通过设置 <strong>Desired Capabilities</strong> 来启动一个iOS/Android模拟器，Desired Capabilities是一系列模拟器配置项的集合，分为iOS和Android两个平台，有很多配置项，有两个平台公共的也有各平台单独的配置，完整的配置项列表在这里：<a href="http://appium.io/docs/en/writing-running-appium/caps/index.html#appium-desired-capabilities">Appium Desired Capabilities</a>。</p><p>下边我们使用5个公共的Desired Capabilities配置项分别启动iOS和Android的模拟器：platformName、platformVersion、deviceName、automationName、app，他们分别代表操作系统名称、操作系统版本、设备名称、自动化引擎名称、app路径，想更多的了解这五个配置项可以看上边的配置项列表。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h3 id="启动iOS-Simulator"><a href="#启动iOS-Simulator" class="headerlink" title="启动iOS Simulator"></a>启动iOS Simulator</h3><p>首先执行 <strong>xcrun instruments -s</strong> 命令来查看Xcode提供给我们所有的iOS模拟器种类，包括设备名称和操作系统版本等等：</p><p><img data-src="https://i.loli.net/2021/05/20/eJZMpn3ayOgB78i.png" alt="image.png"></p><p>然后选择一个模拟设备，按照json格式新增一个Desired Capabilities，这里我们以iPhone 11为例，粘贴下边的Desired Capabilities到Appium Start Inspector窗口，然后点击Save As按钮保存这个配置，这里我把它保存为iOS：<br><img data-src="https://i.loli.net/2021/05/20/VdDgGbmSFpCOUea.png" alt="image.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "iOS",</span><br><span class="line">  "platformVersion": "14.0",</span><br><span class="line">  "deviceName": "iPhone 11",</span><br><span class="line">  "automationName": "XCUITest",</span><br><span class="line">  "app": ""</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后它就可以在 Saved Capability Sets 窗口里看到啦，以后可以单独对它做修改。<br>然而我们还缺少一个app字段，它是我们测试app的绝对路径，WebdriverIO给初学者提供了iOS和Android两个平台的 <a href="https://github.com/webdriverio/native-demo-app/releases">demo app</a>，它们具有现代App的代码结构，非常适合用来做App测试：<br><img data-src="https://i.loli.net/2021/05/20/Ayx3YSEpuZlFc8a.png" alt="image.png"><br>下载完成后，把.apk文件和解压后的.app文件都放入项目的app文件夹中，之后修改Desired Capabilities里的app路径为绝对路径，然后保存：<br><img data-src="https://i.loli.net/2021/05/20/wJlyN5mUjLFdXeM.png" alt="image.png"><br>点击Start Session后，稍等片刻，就能看到模拟器启动并出现元素定位窗口，测试app已被打开：<br><img data-src="https://i.loli.net/2021/05/20/kTL578EawBCpRno.png" alt="image.png"><br>元素定位窗口由两部分组成，左侧为App视图，右侧为代码和元素视图，在左侧视图中点击App元素，对应的元素信息就会出现在右侧视图，比较常用的是Xpath，但也可以用id/class来定位元素：<br><img data-src="https://i.loli.net/2021/05/20/cDygiatb1qG3EX2.png" alt="image.png"><br>元素定位窗口的App视图只能展示一个页面，不能通过点击直接切换App页面。要做到这一点，我们只能先切换模拟器页面，之后点击元素定位窗口上方的刷新图标，新的页面视图才会出现：<br><img data-src="https://i.loli.net/2021/05/20/ihJ7OZzbE2rFXYV.png" alt="image.png"></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位iOS平台的App元素了，然后我们来编写测试代码，这里我们来编写最简单的两个Case，登录和注册。</p><div class="note info"><p>首先是登录，要实现登录操作，我们首先要切换到上边的登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要切换到上边的登录页面，然后切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p></div><p>回到VSCode，登录页面已被定义，且已有示例的selector写法，通过定位元素，我们可以按照示例定义页面元素的selector，再新增方法对元素进行操作，最后在e2e.js中调用页面方法完成测试。</p><p><img data-src="https://i.loli.net/2021/05/20/MLUTP2BbmGR76Op.png" alt="image.png"></p><p>大家可以按照这个思路自己编写测试代码，这里我就不贴代码了，不过可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将内容copy到对应文件夹(results文件夹只用copy result.txt)，其中ios.conf.js就是我们上边设置的Desired Capabilities，要在编辑器里运行代码我们必须得加上它，将其修改成你本地的配置即可，这里我有两个app路径，其中一个(没注释的)与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/SrQML96uvleWqBX.png" alt="image.png"></p><p>最后运行 <strong>npm run test:ios</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，运行视频：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3OTk3Ng==" frameborder="0" 'allowfullscreen'=""></iframe><p>测试报告是利用junit做的，可以在 wdio.conf.js 文件里查看：<br><img data-src="https://i.loli.net/2021/05/26/nhUuXidOpwWzZ9G.png" alt="image.png"></p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="启动Android-Emulator"><a href="#启动Android-Emulator" class="headerlink" title="启动Android Emulator"></a>启动Android Emulator</h3><p>打开我们下载的Android Studio，进入编辑页面，点击右上角AVD Manager图标打开模拟器窗口：<br><img data-src="https://i.loli.net/2021/05/20/wiFyJgqWZXbDAmG.png" alt="image.png"><br>这里会列出所有可以使用的安卓模拟器，初次打开时，可能没有Virtual Device，可以通过“Create Virtual Device”来创建一个，创建时下载OS版本需要一些时间哦，如果有默认的Virtual Device就不用下载了。然后启动你的安卓模拟器：</p><p><img data-src="https://i.loli.net/2021/05/24/n1865FmjlbKyupU.png" alt="image.png"></p><p>安卓模拟器右侧是一些菜单项，包括开关机、音量、旋转等等，以及一些高级设置，可以访问 <a href="https://developer.android.com/studio/run/emulator">在Android模拟器上运行应用</a> 了解更多。</p><p>接着和iOS一样，在Appium desktop里新增Virtual Device对应的Desired Capabilities，然后Save as保存它，下边是我保存的配置，需要修改成和你的模拟器一致：</p><p><img data-src="https://i.loli.net/2021/05/24/TM3skJ47iDX8l9b.png" alt="image.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "Android",</span><br><span class="line">  "platformVersion": "10.0",</span><br><span class="line">  "deviceName": "Pixel_3_XL_API_29",</span><br><span class="line">  "automationName": "UiAutomator2",</span><br><span class="line">  "app": "你的安卓app绝对路径，应该在app文件夹里"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>保持你的安卓模拟器启动状态，然后Start Session，就会看到和刚才iOS一样的元素定位窗口，测试app已在模拟器中打开：</p><p><img data-src="https://i.loli.net/2021/05/24/MoekacB4D9TAtsu.png" alt="image.png"></p><p>事实上，你可以同时打开iOS和Android的模拟器和元素定位窗口，一起定位iOS和Android的元素：</p><p><img data-src="https://i.loli.net/2021/05/24/R6yJCZVgfUNwQB5.png" alt="image.png"></p><h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位Android平台的App元素了，同样可以按照之前的思路自己编写登录注册的测试代码，事实上只需要修改上边iOS的Selector为Android格式即可。<br>也可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将android.conf.js内容修改成你本地的配置即可，这里我有两个app路径和两个deviceName，多出的两个(没注释的)同样与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/dvgs5SKQrHXEkUh.png" alt="image.png"></p><p>最后运行 <strong>npm run test:android</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，也要确保安卓模拟器为启动状态，运行视频：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p>上面我们使用模拟器和两个demo app，利用Appium inspector完成了登录注册功能的自动化测试。当然，只懂得这些是远远不够的，首先我们知道，当代App有几种类型：<strong>Native app</strong>、<strong>Web app</strong>以及<strong>Hybrid app</strong>，这三者的区别是什么、如何测试显然是一个重要的课题，网上已经有许多文章讲述它们的区别，比如 <a href="https://www.jianshu.com/p/a40fefcadc94">这篇文章</a> ，所以我就不再赘述了。</p><p>而除了login页面，demo app也提供了其它不同类型的页面，比如WebView、Swipe等生活中常见的页面类型。同样，针对于此demo app，WebDriverIO提供了 <a href="https://github.com/webdriverio/appium-boilerplate">示例代码库</a>，也包括iOS和Android两个平台，里面有包含以下类型的测试示例代码：</p><ul><li>测试native app</li><li>测试webview</li><li>在手机端利用Safari/Chrome执行浏览器测试</li><li>利用Sauce Labs Service、BrowserStack两个云服务平台提供的真机/模拟器执行测试</li></ul><p>每一种测试类型都有对应的config文件，但此代码库用的不是mocha框架，而是jasmine框架。而且虽然它测试了两个平台，但由于只是selector不同，所以通过配置不用重复定义页面，一个页面可以被两个平台调用，感兴趣的同学可以深入学习。</p><p>完成后别忘了把代码推送到Github哦，方便进行下一步的CI集成。</p>]]></content>
    
    
    <summary type="html">利用模拟器和Appium定位App元素，编写测试代码。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Appium" scheme="https://jmyblog.top/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第一弹</title>
    <link href="https://jmyblog.top/AppUI-AutoTest/"/>
    <id>https://jmyblog.top/AppUI-AutoTest/</id>
    <published>2021-05-19T08:46:15.000Z</published>
    <updated>2021-08-21T07:30:31.461Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/05/19/AwIHB8nugEVPGRz.png"><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>博主之前有文章介绍了<a href="https://jmyblog.top/WebUI-AutoTest-Demo-1/">WebUI自动化</a>，但相较于Web端，App的使用场景更多。所以博主又开发了系列课程，共4篇博客，带大家从0到1开始简单的AppUI自动化测试，并且将测试代码集成到CI，难度为入门级别，包含iOS和Android两个平台，内容详尽，包教包会哦(是和之前WebUI自动化博文一样，看也能看懂的程度哈哈哈哈)，本篇主要带大家配置环境，然后创建测试项目。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><span id="inline-toc">1.</span> 首先，你需要有一个IDE，推荐使用<a href="https://code.visualstudio.com/download">VS Code</a>。<br><span id="inline-toc">2.</span> <a href="https://developer.apple.com/download/more/">下载安装</a> Xcode(12.0.1)和Xcode command line tool(12.2 beta2)，直接下载后按照提示安装即可，这两个工具是为了iOS平台的自动化。安装可能需要一些时间，可以同时进行下边的步骤。<br><span id="inline-toc">3.</span> 下载 <a href="https://developer.android.com/studio">Android Studio</a> ，这是一个开发App的IDE，但我们不用它写代码，只是用它里边的一个工具，是为了Android平台的自动化。下载后打开以下设置确保sdk location正确：<br><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br><span id="inline-toc">4.</span> 使用命令下载homebrew，这是一个下载工具，可以帮助下载别的依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span><br></pre></td></tr></tbody></table></figure><p>然后执行 <mark class="label info">export HOMEBREW_NO_AUTO_UPDATE=true</mark> ，这样就不会每次用homebrew下载东西的时候它都自动更新了，最后执行 <strong>brew -v</strong> 检查你是否安装成功。<br><span id="inline-toc">5.</span> 使用brew下载node：<strong>brew install node</strong><br><span id="inline-toc">6.</span> 使用brew下载jdk，依次执行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap AdoptOpenJDK/openjdk</span><br><span class="line">brew cask install adoptopenjdk11</span><br></pre></td></tr></tbody></table></figure><p><span id="inline-toc">7.</span> 使用brew下载carthage：<strong>brew install carthage</strong><br><span id="inline-toc">8.</span> 下载 <a href="https://github.com/appium/appium-desktop/releases/tag/v1.20.2">Appium desktop</a><br><span id="inline-toc">9.</span> 下载 Appium-Doctor：<strong>npm install -g appium-doctor</strong><br><span id="inline-toc">10.</span> 所有依赖都已经下载完啦，然后我们来设置环境变量，打开你本地的 .bash_profile 或者 .zshrc 文件，没有就新建一个，之后输入下边的设置，直接粘贴改动即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=path/to/your/Android sdk (eg:/Users/usr/Library/Android/sdk)</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk</span><br><span class="line">export PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">AAPT_HOME=/path/to/your Android sdk build-tools (eg:/Users/usr/Library/Android/sdk/build-tools/28.0，这里的28.0是我本地的版本，你需要打开对应目录查看自己的版本然后修改。)</span><br><span class="line">export AAPT_HOME</span><br><span class="line">export PATH=$PATH:$AAPT_HOME</span><br></pre></td></tr></tbody></table></figure><p>保存后执行 <strong>source .bash_profile</strong> 或者 <strong>source .zshrc</strong> 使配置生效。<br><span id="inline-toc">11.</span> 最后执行 <strong>appium-doctor</strong> 命令查看你的环境是否已经准备完成，necessary的部分全部打绿勾就可以啦，如果上边的部分都做完了，应该是没有 ❌ 的，否则就要看对应的报错然后自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/20/DL9UPqaNYrgnGsQ.png" alt="appium-doctor.png"></p><h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>环境准备好了，就可以着手开始创建测试项目了，这里我们使用 <a href="https://webdriver.io/docs/what-is-webdriverio">WebdriverIO</a> 来帮助我们初始化一个可以进行App自动化测试的项目，首先新增一个文件夹，之后进入该文件夹依次执行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init –y //在文件夹里生成一个package.json文件，记得之前WebdriverIO会默认生成的，后来好像没了，就自己手动添加一个</span><br><span class="line">npm install --save-dev @wdio/cli //下载帮助我们初始化项目的wdio工具</span><br></pre></td></tr></tbody></table></figure><p>然后执行 <strong>npx wdio config</strong> 进入项目的初始化步骤，之后该程序会让我们选择各种自动化测试的工具和规范，比如选择测试框架、PageObject、测试报告类型、测试服务端等等，非常全面。这里我们按下边的设置来初始化我们的项目(上下键切换选项，空格键选中/取消选中选项，enter键选择)：</p><p><img data-src="https://i.loli.net/2021/05/20/oJhBqNp4asPAljC.png" alt="config.png"></p><p>如果把一个 <a href="https://jmyblog.top/AutoTest-FrameWork/">自动化测试框架</a> 比做车辆，那WebdriverIO就像是一个造车工厂，用各种不同的零件构造出各式各样的自动化测试框架。<br>完成后的项目结构应该如下图：<br><img data-src="https://i.loli.net/2021/05/20/p8ZGHsWCD5nPjbS.png" alt="project.png"><br>其中有默认的测试代码示例，相关依赖也已经写入package.json里。</p><div class="note info"><p>观察示例代码，不难发现它使用的语言是javascript；采用pageobject模型，有示例的公共页面page.js、登陆页面login.page.js，login页面中还给出了selector和function的示例定义方法，所有页面都放在pageobjects文件夹中；一般我们会把所有页面的公共方法放在page.js；specs文件夹里有一个示例的e2e测试文件，在此文件中会引入各个页面并使用其方法编写测试步骤，describe/it/await等都是mocha框架的关键字。</p></div><p>我们需要再做一些改动使项目结构更加标准，在根目录新增app和config文件夹，然后把wdio.conf.js文件放入config文件夹中，app文件夹将用来存放测试app，改动之后的项目结构：</p><img data-src="https://i.loli.net/2021/05/20/T2DvQJGWrgsYqlH.png" width="200" height="280">]]></content>
    
    
    <summary type="html">环境准备以及测试项目的创建。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="WebdriverIO" scheme="https://jmyblog.top/tags/WebdriverIO/"/>
    
  </entry>
  
  <entry>
    <title>我的前1/3 of 2021</title>
    <link href="https://jmyblog.top/my-1-3-part-of-2021/"/>
    <id>https://jmyblog.top/my-1-3-part-of-2021/</id>
    <published>2021-04-28T08:10:51.000Z</published>
    <updated>2021-08-21T07:30:31.466Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/05/19/Oe4vFPdGs7K3Nlc.png"><h2 id="被「内卷」了吗？"><a href="#被「内卷」了吗？" class="headerlink" title="被「内卷」了吗？"></a>被「内卷」了吗？</h2><p>2021年开始之前，我还没从王铁锤的suffer中走出来。</p><p>等到半年之后我再思考王铁锤经历的一切，好像是跟今年的流行词「内卷」有点关系。通过拜读一篇关于<a href="https://mp.weixin.qq.com/s/5RrEOppRanZHfKzfqRs25w">内卷是什么</a>的文章，其中有几点定义和王铁锤经历的一些事情仿佛可以对得上号，包括但不限于：</p><ol><li>将简单问题复杂化：各种评审会议和报告，实际上意义并不大，只是为了按部就班的走所谓的「程序」</li><li>与预期目标严重偏离：过分追求bug数量的趋势图，却从不考虑预防bug的产生</li><li>内部竞争：加班时间的battle，很多时候明明无事可干，比如环境挂了之类只能干等，却还是得等到9点甚至10点然后并没有任何产出</li><li>被动应付工作：在上线时间本就紧张的情况下，还要强行搞一些并不能发现问题的非功能测试，比如在测试环境做性能测试，一切只是为了走流程</li></ol><p>所以王铁锤其实是「被内卷」吗？我也不太确定，只是觉得王铁锤不属于这种环境，所以他只能退出。</p><p>关于内卷，我还在深圳航空上看到一篇飞机读物，航空公司不怎么样，但那篇文章还不错；下飞机后又在网上搜了一下电子版，分享给大家：<a href="https://mp.weixin.qq.com/s/RtRkisO9p6xgJD3zcGU6kA">不内卷的38岁北京程序员</a>。<br>文章的主人公实现了我理想中的「不内卷」生活，我也想搬一辈子砖；但人家能做到不内卷也是有前提的，他08年之前在北京买了房，外企工作，还丁克，我想在当前的中国社会这三个条件少了一个，都不能做到不内卷吧，所以普通人要做到不被内卷，难度还是相当高的。</p><h2 id="在家办公"><a href="#在家办公" class="headerlink" title="在家办公"></a>在家办公</h2><p>王铁锤事件之后，是11月底。</p><p>先是开始了两周没有项目的生活，算是缓了缓心情，也在复盘和思考，学了一些零散的知识。后来作为非正式成员加入了一个公司内部项目做了半个月，没有无意义的加班，项目安排也比较合理，只是再也没有归属感了。一个月的时间里，每天想离职想到睡不着，还会怀疑自己是不是不适合做这个行业，又想转行，但综合考虑各种因素后，还是决定苟且，终究没有付诸行动。</p><p>时间到了12月底，我又作为非正式成员加入了新项目，与之前不同，这个项目是做自己的产品，一个线上画图的工具。依然没有无意义的加班，项目安排有时不太合理但还可以接受，但还是没有归属感。项目的成员大多都异地，比较分散(比如在我的城市只有我一个成员)，所以基本上都在家办公。</p><p>于是我开始了在家办公的生活，时间是1月初到4月中旬，大概4个半月的时间。</p><p>对我而言，在家办公的这段时间是挺开心的。因为在家，不用通勤，也不用早起。有时我甚至一上午都可以躺在床上办公，然后中午起床做饭，就可以吃一天。而且可以自由安排时间，在不影响别人和项目进度的情况下，有时我会把输出时间挪到晚上，白天只参加一些必要的会议。甚至会边看电视边上班，早上起床打开投影仪播放自己喜欢的电视剧，然后躺在沙发上敲电脑，一躺就是一天。有时晚上虽然也会加点班，但是因为真的有事干才加，而且因为在家，也感觉不那么抵触了。</p><p>虽然是远程办公，但项目里的同事都很不错，每天工作也充满了欢声笑语，感觉很温暖，大家对我的评价也都是积极的。就这样，王铁锤事件带来的阴霾也渐渐散去了，由此带来的工作倦怠感也没了，甚至有点想去公司上班，见见之前熟悉的同事。</p><p>最后安利一下我们的线上画图工具：<a href="https://beeart.hello-bees.com/introduce">BeeArt</a> (谁用谁知道，一般人我不告诉他～)</p><h2 id="新项目旧生活"><a href="#新项目旧生活" class="headerlink" title="新项目旧生活"></a>新项目旧生活</h2><p>4月中旬我交接了工作，在两周的准备后，作为正式成员在5月初又加入了新项目。</p><p>虽然是新项目，但之前经历过类似的项目，而且待了很久，无论是节奏还是工作方式都大同小异。总之就是熟悉的配方，熟悉的味道，所以过的是旧生活，但学到了很多。我的散装英语又派上了用场，之前的归属感回来了一点，但并不多，也许我再也不会有从前的「归属感」了，只是平淡的打工人，搬砖挣钱而已，并不会有太多的情怀。</p><h2 id="2021剩下的1-3"><a href="#2021剩下的1-3" class="headerlink" title="2021剩下的1/3"></a>2021剩下的1/3</h2><p>2021是我的本命年，虽然已经过去了1/3，不过也是开心的1/3，人生已经如此的艰难，还是开心最重要。<br>剩下的2/3，大概会继续平淡的过着我的旧生活，然后学点工作上的新技能。未来也许并不能实现搬一辈子砖的愿望，但搬砖的每一天都要开心，活在当下。</p>]]></content>
    
    
    <summary type="html">在家办公和一些胡思乱想。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="活着" scheme="https://jmyblog.top/tags/%E6%B4%BB%E7%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>沉默的抗争</title>
    <link href="https://jmyblog.top/Silent-protest/"/>
    <id>https://jmyblog.top/Silent-protest/</id>
    <published>2020-11-27T09:37:29.000Z</published>
    <updated>2021-08-21T07:30:31.464Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2020/12/03/8Y5qidj3v1rwWLn.png"><blockquote><p>那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p><footer><strong>王小波</strong><cite><a href="http://www.bwsk.com/xd/w/wangxiaobo/hjsd/index.html">黄金时代</a></cite></footer></blockquote><hr><div class="note default"><p>王铁锤，一个在沉默中「灭亡」的人。</p><p>王铁锤来到了一个新的项目组，作为QA，他刚开始就充分体会到了业务的复杂性和人力的严重不足，但他只想测卡挪卡，安安静静的搬砖。</p><p>但后来项目的走向，打破了他的期望。</p><p>他一直觉得，无论干什么，得先把事情做对，再把对的事情做好。然而项目的情况恰恰相反，首先作为一个敏捷开发的项目，基础设施像环境、流水线这些东西在项目开始一个月后，还没准备好。整个团队都在赶工，像一只只顾往前奔跑的斗牛，莽撞而没有方向。</p><p>其次，各种各样的文档让他烦不胜烦，每天都在搞一些流于形式的东西，但这是客户爸爸要求的，他也无力改变。慢慢的他发现整个项目就是一个披着敏捷开发外衣的瀑布式开发项目。此外，测试环境极其不稳定，每天最多的时间都是在等修复，真正搬砖的时间很少，这些问题多次反馈还是得不到解决。</p><p>然后就是工期的紧缩，团队大佬甚至召集大家开会说明情况，确定996的工作模式，一切都是为了让产品在客户要求的时间前上线。大鱼吃小鱼，小鱼吃虾米，这样一层层压下来，王铁锤觉得自己就是一个小虾米，是被剥削的底层搬砖工，第一次体会到「社畜」这个词的含义。</p><p>尽管如此，他还是想安安静静的搬砖，只想搬完分配给自己的那坨砖，强制让自己不加班，让「社畜」的感觉不那么强烈。这样过了一些时日，王铁锤觉得自己找到了在项目里保持「love&amp;peace」的方式，有时候他觉得自己像一个隐士，但不是身怀绝技的隐士，而是无能为力的隐士。</p><p>但好景不长，项目后期，客户开始了验收测试。一些对产品细节的扯皮和对业务的一遍遍确认搞得BA和PM也筋疲力尽，很多项目初期没有提出的问题到现在才通知，导致需求不断的变更和返工。王铁锤觉得疲倦，但客户却精气十足，他知道，这场沉默的抗争，是他输了。</p><p>看着项目里的开发日日加班到深夜，周末也在公司度过，他觉得不忍，但更多的是感到害怕。也许这就是「成年人」的不易吧，有谁不是负重前行呢？王铁锤突然发现自己并不是一个合格的「成年人」，因为他还没有「重」要「负」，但同时又害怕自己变成一个「成年人」，因为他并不想这样做一个「社畜」，为了「负重」而做自己不想做的事。至少现在，不想做的事，他还可以不做。</p><p>后来，他开始负责协助客户的验收测试，处理客户提出的问题。call center般的工作体验就好像压死骆驼的最后一根稻草，他完全失去了搬砖的积极性，他开始变得更沉默，频繁请假，拒绝加班，他知道这样做很不专业，但只想逃避。不难想到，由于他的「格格不入」，他从这样一个「成年人」的项目中淘汰了。</p><p>在最后的谈话中，二十三岁的王铁锤第一次听到「老油条」这样的评价。他淡然一笑，也不做他想。项目依然是一地鸡毛，而他已经不想再面对了。他也想过何以至此，但他不懂怎么评价别人的工作，只是觉得在这个项目搬砖不开心，也提不起动力，只能悄然离开。</p><p>王铁锤二十三岁，还在人生的黄金时代。他没有太多的奢望，也不觉得自己会永远生猛下去，但依然觉得什么也锤不了他。他还是他，也许生活是个缓慢受锤的过程，人一天天老下去，终有一天，他也会被锤成一个「成年人」，但他只想怀抱自己本就不多的奢望，安之若素。</p><p>希望有一天，王铁锤能学会在沉默中「爆发」。</p></div>]]></content>
    
    
    <summary type="html">沉默呵，沉默呵！不在沉默中爆发，就在沉默中灭亡。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="王铁锤" scheme="https://jmyblog.top/tags/%E7%8E%8B%E9%93%81%E9%94%A4/"/>
    
  </entry>
  
  <entry>
    <title>当代打工人职场生存现状</title>
    <link href="https://jmyblog.top/WorkerStates/"/>
    <id>https://jmyblog.top/WorkerStates/</id>
    <published>2020-11-10T14:47:24.000Z</published>
    <updated>2021-08-21T07:30:31.465Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/01/UMFEbBhrX6vW5xN.png"><div class="note default"><p>王铁锤是一个打工人。</p><p>因为公司的OKR和KPI制度，他每隔一段时间就要给自己定一些目标和期望，然后到年底或年中的时候，把这些目标拿出来溜溜看完成度，评估后公司再决定涨薪幅度和职级调整。</p><p>然而，这些目标不能是王铁锤的日常工作，而是要做一些具体的事情刷存在感，否则到了评估的时候，王铁锤就会因为啥也没干而失去涨薪和升职的可能性。</p><p>王铁锤一直很疑惑，明明自己每天都在认真搬砖，为啥做好日常工作就不算对自己的期望和目标了呢？我就想每天搬砖不行嘛？</p><p>答案是不行，只要王铁锤在职场里，就不能躲过OKR和KPI制度带来的灵魂拷问，这种制度下，佛系打工是不可能的。</p><p>那王铁锤得怎么办呢？</p><p>选择一：依然坚持把每天搬砖作为自己的目标和期望</p><p>做此选择后，王铁锤可以实现自己佛系打工的愿望，但只能维持几年。<br>随着新人不断涌入，王铁锤会逐渐陷入这样一种境地：年龄比新人高，工作年限比新人高，<del>工资比新人高</del>(随着工资倒挂现象愈发严重，此项大概率作废)，做的事情和新人一样。<br>到了最后，公司会裁掉他以防影响到其它做选择二的员工。</p><p>选择二：制定符合公司OKR/KPI制度的目标和期望</p><p>做此选择后，王铁锤将很难实现自己佛系打工的愿望。<br>他得按照套路，制定一些匹配自己甚至更高职级水平的目标，和别的同事一起卷起来，这样才能符合公司的期望，在职场里生存下去。<br>但也只能做到生存，至于升职？加薪？呵呵，随缘吧。<br>就算王铁锤卷成功了，随着职级变高，他需要达到的目标也越来越难实现，内卷的成功率也越来越低，这样在一个职级上一直停留，等待他的也只能是被裁掉，或者主动退出这个内卷修罗场。</p><p>选择三：转到一个内卷没有那么残酷的行业</p><p>王铁锤有想过找一个没有内卷，没有年龄焦虑的行业，比如教师。然而先不想自己适不适合做，能否转行成功，主要现在他严重怀疑这个选择还存不存在。也想过考公，找个铁饭碗，可每年考公人数那么多，录取比例也极低，让人望而却步。</p><p>王铁锤不知道自己还能有什么选择，他是一个拒绝内卷的佛系青年，没有太多欲望。从开始打工到现在，他一直在做选择一，但时间长了，好像又不得不做选择二。至于选择三，王铁锤也一直在观望。</p><p>先这样吧，希望王铁锤可以找到一个改变的契机。</p></div>]]></content>
    
    
    <summary type="html">卷吗？卷就对了。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="王铁锤" scheme="https://jmyblog.top/tags/%E7%8E%8B%E9%93%81%E9%94%A4/"/>
    
  </entry>
  
  <entry>
    <title>我的厨艺进阶之路</title>
    <link href="https://jmyblog.top/myCookingWay/"/>
    <id>https://jmyblog.top/myCookingWay/</id>
    <published>2020-10-17T02:45:35.000Z</published>
    <updated>2021-08-21T07:30:31.466Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2020/12/03/82ec95aLFtVkzAJ.png"><p>作为新时代的「空巢青年」，做饭可谓是一个必备技能了。</p><p>小时候家里大多都是老爸<span class="emoji" alias="man" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8">👨</span>做饭，每次看他随便拿出一个食材就能想到做什么菜，怎么做，即使最简单的食材也可以做成一道菜，就觉得很神奇。</p><p>在家人的影(bi)响(po)下，初高中那会就已经会做一些简单的菜了，也打下了不错的切菜功底<span class="emoji" alias="v" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8">✌</span>，但真正学会做饭，还是从毕业后的空巢生活开始的。</p><p>– 多图预警 –</p><h2 id="早餐篇"><a href="#早餐篇" class="headerlink" title="早餐篇"></a>早餐篇</h2><p>「一日之计在于晨」，说实话，早餐并没有太花心思做。</p><p>之前的固定搭配是胡萝卜葱花鸡蛋卷🥚+自己煮的粥🥣，后来又开始搭配纯牛奶🥛喝，有时加点水果蔬菜🍅，感觉营养就比较全面了：<br><img data-src="https://i.loli.net/2020/12/03/PNAzln8bfECFKa3.jpg"></p><p>现在很少做鸡蛋卷了，比较喜欢纯牛奶🥛+麦片+鸡蛋🥚的搭配，或者纯牛奶🥛+鸡蛋🥚+面包🍞的标准搭配，营养都很全面：<br><img data-src="https://i.loli.net/2020/12/03/oHFDUjY3PJcTl5x.jpg"></p><p>这里推荐 <mark class="label success">良品铺子</mark> 家的「每日坚果水果荟燕麦片」，还有 <mark class="label success">小熊家电</mark> 的「蒸蛋器」。</p><p>鸡蛋卷的教程可以在「下厨房」APP里搜，很简单的。</p><h2 id="午饭篇"><a href="#午饭篇" class="headerlink" title="午饭篇"></a>午饭篇</h2><p>午饭可就到了大显身手的时候了<span class="emoji" alias="metal" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8">🤘</span>。主食还是米饭，或者各种杂粮粥，配菜可就多了<span class="emoji" alias="smirk" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span></p><p>搭配1: 杂粮粥🥣+老干妈土豆丝🥔+醋溜娃娃菜+可乐鸡翅<br>搭配2: 黑米粥🥣+老干妈土豆丝🥔+肉末炒鸡蛋+煎饼🥞<br><img data-src="https://i.loli.net/2020/12/03/6Os7ERPASYb9FGn.png" width="600" height="300"></p><p>搭配3: 糯米红枣粥🥣+西红柿炒鸡蛋🍅+醋溜娃娃菜+妈妈做的饼👩<br>搭配4: 糯米饭🍚+凉拌酸辣茄子🍆+清炒土豆片🥔<br><img data-src="https://i.loli.net/2020/12/03/gHPV73t8YDeQnZL.png" width="550" height="300"></p><p>搭配5: 糯米饭🍚+麻婆豆腐+鱼香肉丝<br>搭配6: 红薯小米粥🥣+凉拌黄瓜皮老铺🥒+老干妈土豆丝🥔<br><img data-src="https://i.loli.net/2020/12/03/peg6iVZFDfsXKB4.png" width="600" height="300"></p><p>搭配7: 糯米南瓜粥🎃+酸辣带鱼🐟+虾仁滑蛋🍤+煮玉米🌽<br>搭配8(早中餐一起吃)): 纯牛奶🥛+糯米饭🍚+煮鸡蛋+红烧茄子🍆+西红柿炒西葫芦<br><img data-src="https://i.loli.net/2020/12/03/H6i59XOltxoseJ3.png" width="550" height="300"></p><p>搭配9: 糯米饭🍚+酸辣平菇🍄+西红柿炒西葫芦<br>搭配10: 糯米饭🍚+青菜炒鸡蛋🥬+西红柿炒土豆片<br><img data-src="https://i.loli.net/2020/12/03/ZqQJmR6GOypi38H.png" width="600" height="300"></p><p>搭配11: 糯米饭🍚+西红柿辣椒炒鸡蛋🥚+酸辣娃娃菜+肉丸萝卜汤🥣<br>搭配12: 糯米饭🍚+酸辣娃娃菜+肉末炒西芹<br><img data-src="https://i.loli.net/2020/12/03/bJEl9z6yLmesPxk.png" width="600" height="300"></p><p>菜品单独展示，第一组：香煎孜然豆腐、蒜蓉粉丝娃娃菜、红烧带鱼🐟、麻婆豆腐<br><img data-src="https://i.loli.net/2020/12/03/MIHUyelGozkv1c2.jpg"></p><p>第二组：青菜炒平菇🥬、红烧茄子🍆、手撕包菜、鱼香肉丝<br><img data-src="https://i.loli.net/2020/12/03/5CyYM2RXBsVn1hj.jpg"></p><p>配汤组：枸杞银耳汤、疙瘩汤、萝卜肉丸汤<br><img data-src="https://i.loli.net/2020/12/03/1aYqCPMB7pdRjSm.jpg" width="600" height="200"></p><p>其实还有很多，没有存图<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>，这些菜品都可以在「下厨房」APP搜索教程，个人认为最省时好做的菜品有：西红柿炒鸡蛋、老干妈土豆丝、酸辣娃娃菜、青菜炒鸡蛋。</p><h2 id="晚餐篇"><a href="#晚餐篇" class="headerlink" title="晚餐篇"></a>晚餐篇</h2><p>晚餐主要会做一些速食，或者吃中午的剩菜剩饭<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，比午饭耗时少，毕竟晚餐要少吃一些。</p><p>一组速食：酸辣挂面、家常版阳春面、酸辣速冻饺子、螺蛳粉<span class="emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">😋</span><br><img data-src="https://i.loli.net/2020/12/03/v8QbfkM9Hw72Wty.jpg"></p><p>说到螺蛳粉，我还是比较有发言权的哈哈哈，淘宝排名前5的店都吃遍了，好欢螺、嘻螺会、良品铺子、李子柒还有其他几家的都吃遍了，个人认为还是李子柒家的最好吃<span class="emoji" alias="thumbsup" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span></p><p>有时候会整点硬菜，煎个牛排啥的<span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span>，意面算是第5种速食了，做起来也很快：<br><img data-src="https://i.loli.net/2020/12/03/RqTOExXmvFnVBJw.jpg" width="400" height="600"></p><h2 id="烘焙篇"><a href="#烘焙篇" class="headerlink" title="烘焙篇"></a>烘焙篇</h2><p>工具是「小熊电器」的烤箱，其实烘焙自己做的种类也不多，主要用来烤鸡翅、烤红薯、烤饼干、做纸杯蛋糕：<br><img data-src="https://i.loli.net/2020/12/03/91VdOgUC2ruADZ4.jpg"></p><p>有时会买腌制好的鸡翅来直接烤，有时也会买生鸡翅，自己配酱汁腌制，烤鸡翅很快，230度烤15-20分钟即可；烤红薯时间比较长，需要先230度烤30分钟，再200度烤20分钟左右；饼干和纸杯蛋糕比较麻烦，需要按照教程做。</p><h2 id="便当篇"><a href="#便当篇" class="headerlink" title="便当篇"></a>便当篇</h2><p>作为一个会做饭的上班族，当然少不了带便当。但也不是每天都带，看心情<span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span>，我一般是前一天晚上做好第二天要带的便当：</p><img data-src="https://i.loli.net/2020/12/03/KdyLMiYnDbEO2pJ.jpg" width="500" height="600"><h2 id="外卖篇"><a href="#外卖篇" class="headerlink" title="外卖篇"></a>外卖篇</h2><p>什么？！竟然还有外卖篇，想不到吧<span class="emoji" alias="grinning" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8">😀</span>，但有时候不想做饭，也是会点外卖的，一组外卖：<br><img data-src="https://i.loli.net/2020/12/03/d81bNuGAHcYJgtn.jpg"></p><div class="note info"><p>说了这么多，那到底怎么才能学会做饭呢？一句话：<strong>只要你做，就能会；不做，永远不会</strong>，哈哈哈哈哈哈哈哈哈。</p></div>]]></content>
    
    
    <summary type="html">吃好喝好，长生不老。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Cook" scheme="https://jmyblog.top/tags/Cook/"/>
    
  </entry>
  
  <entry>
    <title>国庆成都三日游</title>
    <link href="https://jmyblog.top/ChengduTravel/"/>
    <id>https://jmyblog.top/ChengduTravel/</id>
    <published>2020-10-10T12:11:16.000Z</published>
    <updated>2021-08-21T07:30:31.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>今年因为疫情，基本没咋出去玩，就是去周边玩玩。国庆假期也不敢走得太远，想到还没去过成都，就和朋友一起去成都转了转，记录一下自己拍的照片和感想。虽然一共5天的旅程，但只有三天是全天都在玩，所以是三日游。</p></blockquote><h2 id="日期加花费"><a href="#日期加花费" class="headerlink" title="日期加花费"></a>日期加花费</h2><div class="note info"><p>出行日期： 10.1-10.5<br>出行方式： 没报团，自行<br>个人花费：往返车票263*2+住宿1272+餐饮门票456+交通出行288.7 = 2542.7<br>出发地： 西安<br>集合地： 成都</p></div><h2 id="Day-0-抵达成都"><a href="#Day-0-抵达成都" class="headerlink" title="Day 0: 抵达成都"></a>Day 0: 抵达成都</h2><p>10.1，下午5点10分，到达成都东站，想着预定的酒店在春熙路，离这里不远，所以打了车。<br>高铁站地形复杂，为了找到司机师傅，我颇费了些周折，折腾了好一会，终于在5点30分和司机师傅确认了眼神。<br>事实证明打车是个错误的决定，因为下午的春熙路堵到爆炸，原本半小时的路程愣是走了一个多小时才到。<br><img data-src="https://i.loli.net/2021/07/08/6XazxfnUhESuWFC.jpg" width="500" height="500" alt="当时的春熙路"><br>明明东站有地铁可以直达，我却选择了打车，好吧我就是懒得挤地铁<span class="emoji" alias="grimacing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8">😬</span>，但反而弄巧成拙。<br>就这样，下午6点半我终于到了酒店，收拾齐整后和朋友一起在春熙路转了转，找了家卖米线的小店吃了饭。<br>此时的春熙路华灯初上，人潮汹涌，热闹非凡，一派繁华都市景象：<br><img data-src="https://i.loli.net/2021/07/08/YZ8cwKrolyXxCR4.jpg" alt="春熙路"><br>太古里也在旁边，和春熙路一起形成了一条极为繁华的商业街：<br><img data-src="https://i.loli.net/2021/07/08/WunLft7Hi6IkJGO.jpg" alt="太古里"><br>一天的舟车劳顿，我们都有点累，简单逛了逛之后就回了酒店休息，准备明天的行程。</p><h2 id="Day-1-看熊猫-amp-网红点打卡-amp-采耳"><a href="#Day-1-看熊猫-amp-网红点打卡-amp-采耳" class="headerlink" title="Day 1: 看熊猫&amp;网红点打卡&amp;采耳"></a>Day 1: 看熊猫&amp;网红点打卡&amp;采耳</h2><h3 id="看熊猫"><a href="#看熊猫" class="headerlink" title="看熊猫"></a>看熊猫</h3><blockquote><p>门票：55元<br>交通：地铁+公交 1小时</p></blockquote><p>来成都，第一站就是看大熊猫啦，早上9点从春熙路地铁口出发，上午10点我们就到了「成都大熊猫繁育研究基地」。此时门口已经排满了人，国庆假期这里还是很热门的：<br><img data-src="https://i.loli.net/2021/07/08/5guURyQrqCnNdMI.jpg" width="350" height="500" alt="熊猫基地门口的人流"><br>门口有许多卖熊猫饰品和玩偶的小贩，我们也一人买了一个熊猫发箍，戴上更有看熊猫的氛围了。跟着人流进去，里面还是景区式的区域规划，进去好一段路都是类似于公园的布局，有树木、水池什么的：<br><img data-src="https://i.loli.net/2021/07/08/bG8HFlM16wWzEk9.jpg" alt="池上的花"><br>再进去植物更多，慢慢的可以看到熊猫的指示牌，还有充满节日气氛的装饰：<br><img data-src="https://i.loli.net/2021/07/08/3jFhQ7OuSfrpxqH.jpg" alt="人真的多"><br>整个基地供游人活动的区域很大，熊猫却很少，有一种我们不是来看熊猫，而是来找熊猫的感觉。这种情况下，游客中有人看到了熊猫就会很兴奋的指给大家看<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，后来跟着不同的指示牌，我们陆续看(zhao)到了不同形态的熊猫，还有红色的小熊猫(没拍照)：<br><img data-src="https://i.loli.net/2021/07/08/NECgVfckHrDR2A6.jpg" alt="躺着的熊猫"><br><img data-src="https://i.loli.net/2021/07/08/zkO5XH798bMYyso.jpg" alt="就是玩儿的熊猫"><br><img data-src="https://i.loli.net/2021/07/08/LOQBxnvRDrucXp4.jpg" width="350" height="500" alt="吃竹子的熊猫"><br>hummm…就挺无聊的。<br>唯一碰到有趣味的是看到两个熊猫打架，真的难得一见，没拍视频，但真的挺搞笑的。也没看到小熊猫，因为人太多，然后我们就走出了这个熊猫基地。<br>在外边歇了一会，讨论着下一个目的地，突然下起雨了，我们也匆忙离开了。</p><h3 id="网红打卡地"><a href="#网红打卡地" class="headerlink" title="网红打卡地"></a>网红打卡地</h3><h4 id="宽窄巷子"><a href="#宽窄巷子" class="headerlink" title="宽窄巷子"></a>宽窄巷子</h4><p>从熊猫基地离开后，我们坐公交去了离网红点「宽窄巷子」不远的一家火锅店吃饭，据朋友在成都上学的同学说，这也是一家网红店。到了之后雨渐渐小了，但吃饭的人也挺多，我们在外面的板凳上等了一会才进去。<br><img data-src="https://i.loli.net/2021/07/08/3P5vrZIJtpi7w1o.jpg" alt="火锅店"><br>吃完之后就走去不远的网红打卡地「宽窄巷子」，门口还是人挤人，有安保在门口搭了小帐篷，人们扫完健康码后从帐篷下的闸口进入。<br><img data-src="https://i.loli.net/2021/07/08/jzdFHKlhkW2xv5a.jpg" width="350" height="500" alt="窄巷子和后边络绎不绝的游客"><br>进入之后发现，这不还是传统的民俗商业街嘛，和西安的回民街、永兴坊一个样，卖的东西也是大同小异，看来来这里的人真的是纯粹为了打卡了。<br>不能免俗的买了一些小吃饮品，吃完之后又开始寻思下一个目的地。此时雨早已停了，但太阳也没出来，天只是阴着，偶有风吹过，不过夏末的天气这样是最舒适不过的了，总比毒日头好。<br>思索了一会，我们决定去武侯祠和锦里看看，离这里也不远，天气凉爽，我们扫了几辆共享单车就出发了，一路上清风拂面，也是自在。<br><img data-src="https://i.loli.net/2021/07/08/lzYqkDpotsMxNK6.jpg" alt="成都街头的建筑"></p><h4 id="锦里"><a href="#锦里" class="headerlink" title="锦里"></a>锦里</h4><p>下午四点，我们到达了武侯祠，发现武侯祠和锦里是连在一起的，是一个入口。武侯祠门票60元，锦里门票免费，天色渐晚，我们决定只去锦里看看。<br>进去之后首先映入眼帘的是刻着「锦里」两个字的石门：<br><img data-src="https://i.loli.net/2021/07/08/4lxp1XgYnaP796J.jpg" alt="锦里"><br>之后就是一些仿古的建筑：<br><img data-src="https://i.loli.net/2021/07/08/MQVp4nscbX3gB1P.jpg" alt="锦里的仿古建筑"><br>再进去，就是一条长长的街道，街道两侧都是商贩，然后我就明白了，这不还是一条民俗商业街嘛<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>，只是建筑风格比宽窄巷子更显古意而已。跟着人流转悠完了之后，我们决定回去春熙路。</p><h3 id="采耳"><a href="#采耳" class="headerlink" title="采耳"></a>采耳</h3><p>回到春熙路，昨天已经在这里转过了，而且折腾了一天，我们都有点累。这时H君提议我们去体验下成都的采耳，顺便做个马杀鸡，我深以为然，于是搜索附近的采耳店，去做了采耳，还做了背部和足部按摩，一天的疲惫立刻就舒缓了。<br>第一次做采耳的感觉很奇特，看着师傅拿出各种工具，一开始有点害怕，后来放松之后还挺舒服的，总之也是一种体验。</p><h2 id="Day-2-都江堰"><a href="#Day-2-都江堰" class="headerlink" title="Day 2: 都江堰"></a>Day 2: 都江堰</h2><h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><blockquote><p>门票：78元<br>交通 地铁(春熙路-犀浦) + 城际列车(犀浦-都江堰) </p></blockquote><p>前一天订票的时候，发现「犀浦-都江堰」已经没票了，于是只订了「犀浦-红光镇」一站路，后来再补票。犀浦车站设施陈旧，车站里人却很多，应该都是去都江堰的游客。<br>一路上看到有一个「郫县站」的站名，不知道是不是生产「郫县豆瓣酱」的地方，我做麻婆豆腐的时候老会用到这个酱，哈哈哈哈哈哈。<br><img data-src="https://i.loli.net/2021/07/08/NbGhpjs9MVkUiRw.jpg" alt="郫县站"></p><h3 id="到达"><a href="#到达" class="headerlink" title="到达"></a>到达</h3><p>到了都江堰，雨又下起来了，先是跟着人流走到了买景区大巴车票的地方，上车之后导游小姐姐就开始讲都江堰的历史由来之类，关于这个我来之前就已经百科过了，有了浅显的了解，下文摘自 <a href="https://www.baidu.com/link?url=XLGyZ1OsaR8POYphg9SnjLUxSPx7ZadjQOV0nA8F-YiLOhSZaqPJxkhmrmJsTawA30FM_RPZhzHje_wULpFvluXsy312TVxRswt8rK_qrF7HVK4eD94pUUIB-e8QVeuq&amp;wd=&amp;eqid=8612698700033a650000000360e7b8d4">百度百科</a> ：</p><div class="note primary"><p>都江堰是世界文化遗产，说白了就是一个大型「水利工程」。<br>始建于秦昭王末年，后由蜀郡太守 <strong>「李冰」</strong> 父子在前人基础上修建，工程主体由「分水鱼嘴」、「飞沙堰」、「宝瓶口」等部分组成，两千多年来一直发挥着防洪灌溉的作用，灌区面积近千万亩，使成都平原成为沃野千里的「天府之国」。<br>都江堰是全世界迄今为止，年代最久、唯一留存、而且仍在使用的宏大水利工程，古人的智慧到一直流传到现在，所以它是一种「文化遗产」。</p></div><p>讲完历史由来之后，按照通用的景区套路，她又给大家兜售景区门票、皮影戏门票、扶梯票之类。门票我已经提前网上买了，又说不坐扶梯得走俩小时才能到景区核心，所以我们决定再买一个扶梯票，可到了景区门口，又说因为下雨扶梯停运了，给我们退了票，所以我们只能自己走了。门口有不少卖伞的小贩，我们也打着伞，雨中游都江堰，也别有风味。<br><img data-src="https://i.loli.net/2021/07/09/sYaJfL6tAZgQ3BC.jpg" alt="都江堰风貌"></p><h3 id="都江堰风景区"><a href="#都江堰风景区" class="headerlink" title="都江堰风景区"></a>都江堰风景区</h3><p>由于都江堰是一种与水利工程有关的文化遗产，我们这些非相关专业的人来这里，完全就是门外汉，生生变成了「没文化的人」，所以我们只能看看景，然后结合景区介绍，尽力理解这个工程的伟大之处。<br>于是在专业人士眼里，都江堰是一个伟大的水利工程，在我们这些没文化的人眼里，都江堰就是一个适合打卡的风景区，我对自己的定位还是非常清晰的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><p>「都江堰风景区」有「伏龙观」、「二王庙」、「玉垒关」、「离堆公园」等游览地，跟着景区里的指示牌，我们也一一走过了这些地方。</p><p>首先就是 <a href="https://baike.baidu.com/item/%E4%BC%8F%E9%BE%99%E8%A7%82/985897">伏龙观</a> ，是纪念李冰的庙宇，里面供奉着李冰的塑像，传说李冰父子治水时曾制服岷江孽龙。<br>这个很好理解，古时为了纪念一些功德昭著的人，通用的做法就是把他们神化，把苦难妖魔化，然后立传立碑、建造庙宇，永世纪念传颂。这和现在的「都江堰风景区」有异曲同工之妙，不过现在人们的可没有古人虔诚，大多数人只是单纯为了打卡看风景而已，不知道古时去伏龙观祭拜要不要买「门票」。<br><img data-src="https://i.loli.net/2021/07/09/sTDkctgLS8iC6Zd.jpg" alt="伏龙观"></p><p>接下来是 <a href="https://baike.baidu.com/item/%E4%BA%8C%E7%8E%8B%E5%BA%99/514188">二王庙</a> ，顾名思义，又是一个纪念李冰父子的地方。不过这里就是单纯为了纪念，没有神话传说了。<br>还是摘自百度百科 ：庙内有李冰和其子二郎的塑像，石壁上嵌有李冰以及后人关于治水的格言，后殿右侧有画家张大千、徐悲鸿等人的碑刻。<br><img data-src="https://i.loli.net/2021/07/08/seSIlcihmCVrj2v.jpg" alt="二王庙内建筑"></p><p>然后是 <a href="https://baike.baidu.com/item/%E5%AE%89%E6%BE%9C%E7%B4%A2%E6%A1%A5/7083714">安澜索桥</a> ，位于二王庙前，横跨在岷江的内江和外江的分水处，是一所名播中外的古索桥。根据百度百科，这里也有一个传说，不过没有神人也没有妖魔，应该比较可信。<br><img data-src="https://i.loli.net/2021/07/09/yViCBRmb4sSQDaX.jpg" alt="安澜索桥"><br><img data-src="https://i.loli.net/2021/07/08/byRNifdplAs3GqZ.jpg" alt="索桥与后面的二王庙"></p><p>最后是 <a href="https://baike.baidu.com/item/%E9%83%BD%E6%B1%9F%E5%A0%B0%E9%B1%BC%E5%98%B4">都江堰鱼嘴</a> ，上文也提到过，这是都江堰工程三大主体之一，是一个修建在江心的分水堤坝，作用是把汹涌的岷江分隔成外江和内江，外江排洪，内江引水灌溉。当时我们就站在下图前边的圆形看台上，看着下边的鱼嘴和远处的内江和外江：<br><img data-src="https://i.loli.net/2021/07/09/cAVJXLiBZIhP8uS.jpg" alt="鱼嘴看台百科图"><br><img data-src="https://i.loli.net/2021/07/09/1wzdpuBIHVvKn8h.jpg" alt="都江堰鱼嘴和远处的内外江"></p><p>看完鱼嘴后，这里已经是景区最深处了，我们也走了好长的路，脚都酸了，在看台周围坐了一会，我们就开始返程。<br>返程中还参观了都江堰工程的详细介绍图纸(似懂非懂)，也看到了一些竹笼装卵石的模型，这些模型就是用来堆筑都江堰三大主体之一「飞沙堰」的。<br><img data-src="https://i.loli.net/2021/07/09/G2EFTMZXuitkKrU.jpg" alt="都江堰随处可见的竹笼装卵石模型"></p><p>景区内有餐厅，人很多，价格当然也很贵，但还是得吃呀。之后我们又在都江堰游玩了很久，在景区里的公园转了转，喂喂鲤鱼什么的，景区里很大，我们一直转到下午4点多才开始返程。</p><h3 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h3><p>坐上景区门口的公交，到了都江堰站坐城际列车，买票的时候「都江堰-犀浦」还是没票，所以只订了「都江堰-郫县」二站路，想着后来再补票。<br>然而，车上一直没有工作人员来查票补票，我们就想着到了犀浦再去窗口补票。结果到了犀浦站，我们没有找到可以补票的窗口，出站口也是简单用围栏做的人工通道，根本没人查票，就这样发生了我人生中第一次「被动逃票」。。。<br>随后我们从犀浦坐地铁回到了春熙路，此时已是晚上7点多，春熙路已是人声鼎沸，在朋友的朋友推荐下去周围的商场吃了串串，然后结束了一天的旅程。</p><h2 id="Day-3-杜甫草堂-amp-人民公园-amp-小酒馆"><a href="#Day-3-杜甫草堂-amp-人民公园-amp-小酒馆" class="headerlink" title="Day 3: 杜甫草堂&amp;人民公园&amp;小酒馆"></a>Day 3: 杜甫草堂&amp;人民公园&amp;小酒馆</h2><p>昨天旅程结束后，并没有想好今天要去哪，所以搜了下成都其他的热门景点和打卡地，还准备在成都街头随便逛逛。</p><h3 id="杜甫草堂"><a href="#杜甫草堂" class="headerlink" title="杜甫草堂"></a>杜甫草堂</h3><p>一个人去的，因为朋友。。。起不来。<br>杜甫草堂在热门景点之列，所以想去转转，顺便沾染点文艺气息。<br>起床搜索好路线，决定坐公交去，因为前几天都是坐地铁，还没在成都坐过公交，想体验一下。<br>作为热门景点，草堂门口人也很多：<br><img data-src="https://i.loli.net/2021/07/09/gQkM6zyrVaCvG1c.jpg" alt="杜甫草堂"></p><div class="note primary"><p><a href="https://baike.baidu.com/item/%E6%9D%9C%E7%94%AB%E8%8D%89%E5%A0%82/6012?fr=aladdin">杜甫草堂</a> 是中国唐代大诗人杜甫流寓成都时的故居，先后在此居住近四年，创作诗歌240余首。唐末诗人韦庄寻得草堂遗址，重结茅屋，使之得以保存，宋元明清历代都有修葺扩建，被誉为「中国文学史上的一块圣地」。</p></div><p>我对杜甫的了解仅限于小时候背的诗，所以买了导游语音包，边听边走过每一个景点：<br><img data-src="https://i.loli.net/2021/07/09/tuACqUsKXne9DaV.jpg" width="250" height="500" alt="杜甫草堂景点详解"><br>少陵碑亭是杜甫草堂最具代表性的建筑之一，它是一座以茅草作顶的亭子，内树有一石碑，镌刻“少陵草堂”四个大字，笔力浑厚，笔姿秀润，是果亲王允礼所书(《甄嬛传》里的十七爷！！！)。雍正十二年（公元1734年）果亲王送达赖进藏，经过成都，特拜谒草堂，留下此手迹。此景点是杜甫草堂最具代表性的景点之一，人们常常将其作为茅屋的象征：<br><img data-src="https://i.loli.net/2021/07/09/NCXYywEV4m8Qg1P.jpg" alt="少陵草堂"><br>「八月秋高风怒号，卷我屋上三重茅。」，杜甫草堂依据杜诗《茅屋为秋风所破歌》描写和明代格局于1997年恢复重建了“茅屋景区”，重现了诗人故居的田园风貌，营造出浓厚的诗意氛围：<br><img data-src="https://i.loli.net/2021/07/09/fc5OzWICHPidaR6.jpg" alt="茅屋"><br>盆景园里的盆景，这里还悬挂了很多诗歌石刻：<br><img data-src="https://i.loli.net/2021/07/09/bws7JzVHnEa8xCe.jpg" alt="盆景"><br>其他景点没拍照，不过这里诗歌文化氛围确实很浓厚。</p><h3 id="人民公园"><a href="#人民公园" class="headerlink" title="人民公园"></a>人民公园</h3><p>中午又坐公交和朋友一起去成都人民公园转了转，在这里划了船，还玩了碰碰车<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>，国庆期间公园人也很多，划船的时候等了好一阵。<br><img data-src="https://i.loli.net/2021/07/09/yPibaHFBwZoWLcl.jpg" width="350" height="500" alt="公园里的石碑"></p><h3 id="小酒馆"><a href="#小酒馆" class="headerlink" title="小酒馆"></a>小酒馆</h3><p>赵雷的成都唱火了玉林路和小酒馆，我们也慕名过来打卡：<br><img data-src="https://i.loli.net/2021/07/09/JC61BK4WNmxfcF5.jpg" alt="玉林路"><br>沿着路边往前走，天色渐黑，人群也越来越密集，然后就走到了酒吧一条街，找到了传说中的小酒馆：<br><img data-src="https://i.loli.net/2021/07/09/CRTVHAvZ6IFxcls.jpg" alt="小酒馆"><br>酒馆门口满是来打卡的游客，外边还有很多排队等待进去的客人，我们无意进去，所以只在门口看了看就走了。<br>除了酒吧，这里还有很多卖东西的摊贩，和朋友随便转了转，逐渐意兴阑珊，肚子也饿了，往前走走找了家卖盖浇饭的连锁店，吃完就返程了。</p><h2 id="Day-4-再见成都"><a href="#Day-4-再见成都" class="headerlink" title="Day 4: 再见成都"></a>Day 4: 再见成都</h2><p>成都之行很快就结束了，逛了3天发现成都跟西安差不多<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，早上收拾行装后坐地铁去高铁站，很快就到了。回家后迫不及待的点了炸鸡，开着我的投影仪看电影，还是家里最舒服啊。<br><img data-src="https://i.loli.net/2021/07/11/tJKlMzWIk94HYyN.jpg"></p>]]></content>
    
    
    <summary type="html">成都，我来了；成都，我走了。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅行" scheme="https://jmyblog.top/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>测试策略浅谈</title>
    <link href="https://jmyblog.top/testStrategy/"/>
    <id>https://jmyblog.top/testStrategy/</id>
    <published>2020-09-01T07:54:38.000Z</published>
    <updated>2021-08-21T07:30:31.466Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2020/11/27/Nt7m4suaOyUPfBV.png"><div class="note info"><p>前段时间，有同事分享了一些测试策略设计的内容，讲的很不错。并且自己也是最近才开始接触一些新的项目，之前都是中途加入项目工作，没有全面思考过测试策略的东西，所以感触比较深。于是记了点笔记和自己的心得，这样后续再加入一些新项目，也不会手足无措了。</p></div><h2 id="Foreword：前言"><a href="#Foreword：前言" class="headerlink" title="Foreword：前言"></a>Foreword：前言</h2><p>每一个测试小朋友进入到全新的项目时，肯定有很多<mark class="label info">问号</mark>，比如：</p><ul><li>这是一个什么样的项目？</li><li>是一个旧项目的改造还是一个全新的项目？</li><li>是某个产品的一部分，还是独立的一个产品？如果是一部分，是上游，还是下游，还是中间？</li><li>这个项目的用户群体是什么样？用户群体的数量？</li><li>这个项目的周期是多久？多久发一次版，每个版本分为几个阶段？</li><li>这个项目要做哪些方面的测试？</li><li>这个项目有几个QA？<br>…</li></ul><p>其实，这些问题都是包含在测试策略中的。</p><h2 id="What？测试策略是什么"><a href="#What？测试策略是什么" class="headerlink" title="What？测试策略是什么"></a>What？测试策略是什么</h2><blockquote><p><strong>测试策略</strong>一般是针对一个整体产品或者版本，制定出的包含质量保证策略、测试范围、测试方法、测试计划管理、测试分层、测试重点和难点、测试执行过程管理、环境策略、Showcase管理、风险识别等方面的<strong>设计文档</strong>。</p></blockquote><p>好的测试策略可以提升团队的质量水平和QA团队的工作效率，在敏捷软件开发生命周期的每一个阶段都能发挥作用。</p><h2 id="When？什么时候设计测试策略"><a href="#When？什么时候设计测试策略" class="headerlink" title="When？什么时候设计测试策略"></a>When？什么时候设计测试策略</h2><div class="note primary"><p>测试策略的设计，一般在需求分析(Inception)阶段开始，与技术设计并行，并且在需求分析阶段不断补充和完善。需要在测试阶段开始之前闭环。</p></div><h2 id="Who？谁应该参与测试策略设计"><a href="#Who？谁应该参与测试策略设计" class="headerlink" title="Who？谁应该参与测试策略设计"></a>Who？谁应该参与测试策略设计</h2><pre><code>测试策略是由项目的QA团队输出，团队成员参与评审的。</code></pre><p>由于敏捷开发是一种重实践，轻文档的开发模式。所以个人认为不必写出多么详尽的文档，重要的是考虑全面，列出关键点，和团队成员一起讨论，达成共识，且在后续的开发测试过程中注意与测试策略保持一致。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>上文提到了测试策略是由许多方面的集合，接下来就分别聊聊它们。</p><h3 id="敏捷团队的质量保证策略"><a href="#敏捷团队的质量保证策略" class="headerlink" title="敏捷团队的质量保证策略"></a>敏捷团队的质量保证策略</h3><p>首先就是敏捷团队的质量保证策略，其实这就是许多非QA角色眼中的<strong>狭义测试策略</strong>，展示了敏捷开发中每个阶段团队如何协作来保证产品质量。个人认为这个是最基本的质量保证标准，每个敏捷团队都应该做好。</p><img data-src="https://i.loli.net/2020/11/30/TpxlCFQ4uYWa58s.png"><p><span id="inline-toc">1.</span> <strong>故事分析</strong><br>BA与客户沟通清楚需求后，编写故事卡，并和QA结对写AC，或者写完AC找QA review.<br><span id="inline-toc">2.</span> <strong>故事启动</strong><br>BA组织团队成员一起讨论开发内容，澄清需求。<br><span id="inline-toc">3.</span> <strong>故事开发</strong><br>Dev同学按照需求写代码，确保单元测试的覆盖率满足要求。QA同学编写测试用例和自动化测试。<br><span id="inline-toc">4.</span> <strong>故事验收</strong><br>团队成员一起在正确的环境进行deskCheck，确保代码通过AC，满足基本需求。并再次检查单元测试的覆盖率是否满足要求。<br><span id="inline-toc">5.</span> <strong>故事测试</strong><br>QA同学进行测试，将发现的问题与BA、开发沟通并修复，直到产品行为满足需求。<br><span id="inline-toc">6.</span> <strong>故事演示</strong><br>所有故事卡测试通过后，团队组织showcase邀请客户一起查看产品功能，并对showcase中客户提出的优化建议进行记录，确定优先级后放入相应迭代开发范围。如果离上线还有一段时间，也可以组织团队成员进行BugBash，最好邀请客户，提前识别更多问题。<br><span id="inline-toc">7.</span> <strong>故事上线</strong><br>当所有Bug和优先级高的优化问题都已解决后，用户故事就可以上线了。上线后，对应用户故事的生命周期就已经终结。线上发现的问题在确定优先级后，建立新的用户故事，放入对应迭代开发范围。</p><div class="note default"><p>上线之后，团队应该回顾分析上个迭代的开发测试情况，可以一起查看迭代的<strong>Sprint report</strong>和<strong>Bug report</strong>。</p></div><pre><code>Sprint report</code></pre><p>Sprint report是敏捷开发管理工具Jira的一个功能，如下图，纵轴是迭代内所有故事卡的点数，横轴是迭代时间。两周一个迭代，体现了迭代内随时间推移故事卡开发的情况：</p><img data-src="https://i.loli.net/2020/12/01/vEqDKlLMYz6fA3X.png"><p>灰色线条是在迭代开始后，默认生成的一条该迭代的理想开发速率线，灰色地带是周末，所以没有变化(这也可以看出敏捷开发是不提倡加班的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)。红色是迭代开发的真实情况，健康的敏捷开发，<strong>红线的趋势应该是和灰线基本一致的</strong>。<br>上图就是因为两周内并不能完成迭代任务，所以又延迟了两周，此时就应该分析为什么会导致这种情况，是对需求理解不够，点数估计少了呢，还是别的原因，从而避免以后再发生同样的情况。<br>这里我再贴几张迭代的Sprint report，都是我之前经历过的真实敏捷迭代(所以我都经历了什么<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>抱走心酸的自己<span class="emoji" alias="persevere" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8">😣</span>)，大家可以自己尝试分析，导致下边几种情况的可能原因：<br><img data-src="https://i.loli.net/2020/12/01/tueAgQEZ9byo4la.png"><br><img data-src="https://i.loli.net/2020/12/01/xSCBPQ9MJzLVTHb.png"><br>其实之前也有两条线一致的时候，但那已经是很久之前了。。。。</p><pre><code>Bug report</code></pre><p>Bug report是对迭代内发现问题的总结，由QA同学产出，如何做好Bug report可以参考<a href="https://mp.weixin.qq.com/s/OVqTsk6OJ_xi5Q4iWtKkUg">ThoughtWorks洞见-Bug Report该怎么做?</a></p><h3 id="测试范围和重难点分析"><a href="#测试范围和重难点分析" class="headerlink" title="测试范围和重难点分析"></a>测试范围和重难点分析</h3><blockquote><p><strong>测试范围</strong>的确定需要分析软件周期各个阶段的需求目标，了解客户期望和产品的用户群体，主要包括以下几个方面：</p></blockquote><pre><code>功能</code></pre><ul><li><p>业务功能</p></li><li><p>API功能</p></li><li><p>数据一致性</p></li><li><p>…</p><p>  性能</p></li><li><p>接口性能</p></li><li><p>单接口并发和非并发访问性能，混合场景并发访问性能</p></li><li><p>页面性能</p></li><li><p>常用操作页面响应时间，非常用操作页面响应时间</p></li><li><p>…</p><p>  安全</p></li><li><p>API访问权限</p></li><li><p>数据访问权限</p></li><li><p>数据传输安全</p></li><li><p>数据存储安全</p></li><li><p>异常信息展示安全</p></li><li><p>日志信息安全</p></li><li><p>…</p><p>  易用性</p></li><li><p>页面展示的引导性</p></li><li><p>操作的便捷性</p></li><li><p>返回信息的易理解性</p></li><li><p>…</p><p>  兼容性</p></li><li><p>操作系统兼容</p></li><li><p>数据库兼容</p></li><li><p>浏览器兼容</p></li><li><p>应用软件兼容</p></li><li><p>…</p><p>  可维护性</p></li><li><p>软件的安装和升级是否可以很容易的完成</p></li><li><p>核心操作是否都有日志记录</p></li><li><p>…</p><p>  可靠性</p></li><li><p>接口加锁和释放</p></li><li><p>接口失败重试</p></li><li><p>服务重启后数据恢复</p></li><li><p>大数据处理能力</p></li><li><p>页面重复操作禁止</p></li><li><p>…</p><p>  稳定性</p></li><li><p>长时间访问系统，系统在响应时间，资源使用方面的情况</p></li><li><p>…</p></li></ul><p><strong>以上这些方面，确定之后要求BA在写卡以及QA测卡时都要注意覆盖到。</strong></p><blockquote><p><strong>测试重难点</strong>确定后，需要多增加对应模块的回归测试，开发也应该增加单元测试的覆盖率。</p></blockquote><pre><code>测试重点</code></pre><ul><li><p>需求的核心功能</p></li><li><p>经常变化的部分</p></li><li><p>与其他系统相互影响的部分</p><p>  测试难点</p></li><li><p>相对不够独立的部分</p></li><li><p>处理过程较复杂的部分</p></li></ul><h3 id="测试方法与分层"><a href="#测试方法与分层" class="headerlink" title="测试方法与分层"></a>测试方法与分层</h3><div class="note info"><p>明确测试范围，时间和人力之后，还应该根据需求的变化来确定<strong>测试方法</strong>，决定是否需要自动化测试。然后再按照 <a href="https://jmyblog.top/Test-Pyramid/">测试金字塔原理</a> 决定每种测试方法的比重。</p></div><h3 id="测试计划管理"><a href="#测试计划管理" class="headerlink" title="测试计划管理"></a>测试计划管理</h3><blockquote><p>测试计划管理是指按照团队的上线计划，确定具体的测试时间，包括迭代内测试、集成测试、回归测试、验收测试。</p></blockquote><h3 id="测试执行过程管理"><a href="#测试执行过程管理" class="headerlink" title="测试执行过程管理"></a>测试执行过程管理</h3><p>主要包括：</p><ul><li>测试计划制定和管理：按照测试计划安排的时间执行测试，避免延期</li><li>测试用例编写和管理：自动化用例编写以及自动化代码重构</li><li>测试过程记录和管理：我的做法是在每张卡里记录自己的测试环境，场景以及是否通过，疑问等等</li><li>测试结果管理：发现的缺陷管理，比如新建缺陷卡，Bug report等</li></ul><h3 id="环境策略"><a href="#环境策略" class="headerlink" title="环境策略"></a>环境策略</h3><blockquote><p>稳定的环境是高效开发和测试的先决条件，个人人为在开发之前就应该配置好环境以及流水线等基础设施，主要用到的环境有：</p></blockquote><ul><li>DEV环境：Dev自测和联调使用，deskCheck环境</li><li>QA环境：QA日常测试使用</li><li>UAT环境：用户验收测试</li><li>其他环境：按照项目情况准备安全环境、性能测试环境等等</li></ul><h3 id="风险识别与解决"><a href="#风险识别与解决" class="headerlink" title="风险识别与解决"></a>风险识别与解决</h3><blockquote><p>主要是识别敏捷开发流程中的质量风险。</p></blockquote><img data-src="https://i.loli.net/2020/12/01/rjD83zVIi9e4wHq.png"><p><span id="inline-toc">1.</span> <strong>需求阶段</strong></p><p>R: 需求频繁变更，对产品的需求理解不准确有偏差。<br>S: 多和用户沟通，争取更充分的研发时间和测试时间，或者把提出的功能放到下一个版本中实现。提供验收环境给客户，需要的话也可以提供测试环境给客户，这样客户可以随时看到产品进展。</p><p><span id="inline-toc">2.</span> <strong>开发阶段</strong></p><p>R: 代码质量达不到相应要求，bug多，模块开发没有统一设计。<br>S: 提升单元测试覆盖率，进行code diff，与TL讨论更多提升代码质量的方式，确定好标准。</p><p><span id="inline-toc">3.</span> <strong>测试阶段</strong></p><p>R: 测试经验不足，用例设计不到位，对业务不熟悉、不了解用户如何操作该产品；测试时间短，测试环境与生产环境的不一致，不稳定。<br>S: 找BA或开发review测试用例，与开发一起pair单元测试场景；找熟悉产品的人员进行业务培训，增加人力，尽可能模拟用户使用的环境，在测试的时候尽量和用户沟通要到用户真实的数据进行测试。</p><p><span id="inline-toc">4.</span> <strong>上线阶段</strong></p><p>R: 上线环境准备不充足，与其他服务或系统有上线依赖。<br>S: 提前准备上线脚本、上线配置文档，上线前测试；提前识别上线依赖。</p><h3 id="Showcase管理"><a href="#Showcase管理" class="headerlink" title="Showcase管理"></a>Showcase管理</h3><blockquote><p>与客户、团队成员确定多久进行一次showcase，Showcase以什么样的方式进行。确定好每次showcase的owner，推荐的做法是轮流主持。</p></blockquote><h3 id="BugBash管理"><a href="#BugBash管理" class="headerlink" title="BugBash管理"></a>BugBash管理</h3><p>参考 <a href="https://jmyblog.top/BugBash/">BugBash知多少</a> 和 <a href="https://mp.weixin.qq.com/s/S5cOjQkyvpFxpfew_exZrA">如何成功的组织Bug bash</a>。</p><h3 id="遗留问题记录"><a href="#遗留问题记录" class="headerlink" title="遗留问题记录"></a>遗留问题记录</h3><blockquote><p>记录测试策略中还需要明确和后续更新的部分。</p></blockquote><h2 id="The-End：写在最后"><a href="#The-End：写在最后" class="headerlink" title="The End：写在最后"></a>The End：写在最后</h2><p>以上就是测试策略应该包含的内容，果然像海一样宽广<span class="emoji" alias="dizzy_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8">😵</span>，不过在敏捷开发中，产品的质量是渗透到每一个开发阶段的，所有团队成员都应该为质量负责，愿每一个QA都能开心的工(ban)作(zhuan)。</p>]]></content>
    
    
    <summary type="html">揭秘敏捷团队的测试策略设计以及QA的工(ban)作(zhuan)日常。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="敏捷" scheme="https://jmyblog.top/tags/%E6%95%8F%E6%8D%B7/"/>
    
    <category term="测试策略" scheme="https://jmyblog.top/tags/%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>给博客的Https证书续期</title>
    <link href="https://jmyblog.top/HttpsUpdate/"/>
    <id>https://jmyblog.top/HttpsUpdate/</id>
    <published>2020-07-30T13:23:05.000Z</published>
    <updated>2021-08-21T07:30:31.463Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2020/08/01/R4f1SvM9Q6wNID3.png"><h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>前几天突然发现博客的Https证书失效了，网站又被标记成了<mark class="label danger">不安全</mark>。</p><p>找到了之前写过关于申请证书的<a href="https://jmyblog.top/SiteBrokenFix/">文章</a>，发现是在coding pages里申请的证书：</p><img data-src="https://i.loli.net/2020/04/23/Skv28M5PJiC1Fwo.png"><p>之前的证书状态正常，现在进去一看，证书状态已经失效了。点了页面上重新申请的按钮，结果申请失败。</p><p>网上搜索了下报错信息，我果然不是一个人，但大家的情况又跟我不一样，所以一时也没找到合适的解决办法。</p><p>这个时候突然发现自己之前写的文章有这么一句话：</p><pre><code>一开始SSL证书申请失败，后来按照网上的解决方案去域名解析把GitHub解析暂停就申请成功了。</code></pre><p>好像之前遇到过申请失败的问题，所以按照这个操作，先去把GitHub解析暂停，再点击申请证书，这下成功了，刷新了下博客，证书的有效期已经更新到10月底了：</p><img data-src="https://i.loli.net/2020/07/30/aLlXtRmycKpk2Ji.png"><p>我得意的笑 <span class="emoji" alias="grin" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span></p><h2 id="知其所以然"><a href="#知其所以然" class="headerlink" title="知其所以然"></a>知其所以然</h2><p>问题是解决了，但是作为一个好学的孩子，不但要知其然，还要知其所以然。</p><p>首先，Coding Pages给我们申请的证书有效期是三个月，是由 <a href="https://letsencrypt.org/zh-cn/getting-started/">Let’s Encrypt</a> 签发的，它是国外一个免费的证书颁发机构（CA）。</p><div class="note info"><p>Let’s Encrypt的官网说：</p><p>要从 Let’s Encrypt 获取您网站域名的证书，您必须证明您对域名的实际控制权。您可以在您的 Web 主机上运行使用 ACME 协议的软件来获取 Let’s Encrypt 证书。</p></div><p>这个意思简单，就是说你得证明这个域名是你的，我们才给你发证书。那咋证明呢？其实也简单，只要Let’s Encrypt能在国外通过访问站点获得域名验证信息，就能验证域名所有权了。</p><p>但是根据我的域名解析设置，Coding Pages的解析线路是默认，Github Pages解析线路是境外，所以根据域名解析规则，<mark class="label primary">Let's Encrypt在国外只能访问到Github Pages的域名验证信息，而无法访问Coding Pages的域名验证信息。</mark><br>所以Coding Pages在帮我们申请证书时，就无法通过Let’s Encrypt的域名验证，证书也就申请不到了：</p><img data-src="https://i.loli.net/2020/04/23/RPNsrEyMSUV9uD1.png"><p>所以这就是为什么用Coding Pages申请证书时，需要先把Github Pages的解析暂停掉了。不过别忘了证书申请成功之后，再把Github Pages的解析重新启动哦。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span id="inline-toc">1.</span> <a href="https://zwen.net/githubcodingblog.html">Github+Coding国内外博客双线部署并支持全站https</a><br><span id="inline-toc">2.</span> <a href="https://blog.csdn.net/dataiyangu/article/details/83374438">hexo 托管到coding，pages申请ssl/tls证书失败</a></p>]]></content>
    
    
    <summary type="html">道路千万条，安全第一条。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://jmyblog.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
