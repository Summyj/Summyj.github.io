<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20岁光阴不再来</title>
    <url>/20%E5%B2%81%E5%85%89%E9%98%B4%E4%B8%8D%E5%86%8D%E6%9D%A5/</url>
    <content><![CDATA[<p>时间啊，你慢点走。</p>
<span id="more"></span>

<p>这个TED演讲是博主几年前看过的，留下了很深的印象。今天又重温了一遍，感触更深了。所以推荐给大家，TED名字叫做”<strong>20岁光阴不再来</strong>“，亲们也可以在网易公开课里看到。</p>
<p><object width="640" height="360"><param name="movie" value="http://swf.ws.126.net/openplayer/v01/-0-2_M937IFCGB_M937IJLUA-vimg1_ws_126_net//image/snapshot_movie/2013/7/G/2/M937IJDG2-1423031805654.swf?isTEDPlay=1"><param name="allowScriptAccess" value="always"><param name="wmode" value="transparent"><embed src="http://swf.ws.126.net/openplayer/v01/-0-2_M937IFCGB_M937IJLUA-vimg1_ws_126_net//image/snapshot_movie/2013/7/G/2/M937IJDG2-1423031805654.swf?isTEDPlay=1" type="application/x-shockwave-flash" width="640" height="360" allowfullscreen="true" wmode="transparent" allowscriptaccess="always"></object></p>
<h2 id="我的观后感"><a href="#我的观后感" class="headerlink" title="我的观后感"></a>我的观后感</h2><p>在这个TED中，演讲者给出了一些对20多岁年轻人的忠告和建议，可以概括为以下几点：</p>
<p><strong>忠告</strong></p>
<ul>
<li>30岁不是新的20岁，所以不要挥霍你时间，而是应该用这些时间去做一些有意义的事。年长者总会对20岁的年轻人说“你们还年轻，未来会有的”，实际上这不是一种激励，而是麻痹了年轻人的奋斗激情，助长他们的拖延症。如果我们真的听从了这些年长者的话，30岁才开始建立事业、家庭，可那个时候你又凭什么做到这些呢？</li>
<li>不要坐井观天，不要做无谓的探索，因为更多的时候你不是在探索未来，你只是想拖延。</li>
<li>不要等到该结婚的年龄才随便找个人建立婚姻关系。就像演讲者说的：20岁时谈恋爱就像玩抢椅子，每个人都东奔西跑的玩乐，但是在30岁左右时音乐停止了。每个人都开始坐下，我不想只有我站着，所以我才想嫁给我的丈夫，因为他是我30岁时离我最近的椅子。</li>
</ul>
<p><strong>建议</strong></p>
<ul>
<li>对自己进行投资，投资的目标是成为你想成为的人。包括未来工作所需和生活精神需要。比如健身、读书、学习专业知识等等。</li>
<li>学会利用身边的弱关系，扩大交际范围，而不是只跟与自己年岁、思维方式相差不多的人交往。比如演讲者提到了一个患者通过室友的表亲找到了心仪的工作。</li>
<li>从现在开始选择自己的家人，你以后想跟谁生活在一起，想拥有什么样的婚姻。而不是等到30岁才思考这个问题。</li>
</ul>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>TED</tag>
        <tag>告别拖延</tag>
      </tags>
  </entry>
  <entry>
    <title>五一青海三日游</title>
    <url>/5-1-travel/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>五一假期和朋友一起报团去青海三日游，以下内容转载自 <a href="http://www.mafengwo.cn/i/12619946.html">朋友写的语文课代表式游记</a> ，加了一些自己拍的照片和感想。</p>

</blockquote>

<h2 id="日期加花费"><a href="#日期加花费" class="headerlink" title="日期加花费"></a>日期加花费</h2><div class="note info"><p>出行日期： 5.1-5.3<br>出行方式： 报团 649/人<br>个人花费：往返车票232.5*2+团费649+餐饮门票502 = 1616<br>出发地： 西安<br>集合地： 西宁</p>
</div>

<h2 id="Day-0-抵达西宁"><a href="#Day-0-抵达西宁" class="headerlink" title="Day 0: 抵达西宁"></a>Day 0: 抵达西宁</h2><p>4.30和朋友一起坐高铁，下午抵达西宁站，在西宁街头转了一会，还吃了一顿火锅，整体感觉西宁宗教氛围比较浓厚，可能海拔较高的原因，这里的人肤色也较黑。</p>
<img data-src="https://i.loli.net/2021/06/27/3WJZDb6szXiOejo.jpg" alt="西宁站">
<img data-src="https://i.loli.net/2021/06/27/4hOczMsTLGHjfXm.jpg" width="400" height="600" alt="西宁街头">
<img data-src="https://i.loli.net/2021/06/27/SWIDVYjUtRa5Zb6.jpg" alt="西宁街头的白色建筑">
<img data-src="https://i.loli.net/2021/06/27/l3PwVLcGf5AEaOF.jpg" alt="大天朝哪里都有火锅">

<h2 id="Day-1-塔尔寺与青海湖"><a href="#Day-1-塔尔寺与青海湖" class="headerlink" title="Day 1: 塔尔寺与青海湖"></a>Day 1: 塔尔寺与青海湖</h2><h3 id="塔尔寺"><a href="#塔尔寺" class="headerlink" title="塔尔寺"></a>塔尔寺</h3><blockquote>
<p>观光车:20 门票:70</p>
</blockquote>
<p>塔尔寺景致颇多，主要是藏传佛教的佛像供奉和宗喀巴大师不同时期的故事。<br>一路上可见不同的院落供奉着各种佛像，有供人祈求长寿的佛，有掌管智慧的文殊菩萨 ，有笑口常开的弥勒佛，佛案上灯火长明。更引人关注的是关于宗喀巴大师的，在他出生的地方有茂盛的菩提树，依树而建饱含思子之念的白塔，于白塔侧又建寺，先有塔后有寺，故名塔尔寺。</p>
<img data-src="https://i.loli.net/2021/06/27/stZiMUacekAnET9.jpg" width="400" height="600" alt="寺中的白塔">
在佛殿前的走廊处，有虔诚礼敬的信徒，用身体力行去祈求宗教功德，这里是一座活着的寺院。

<p><img data-src="https://i.loli.net/2021/06/27/xoBW4aiJRTrhjg3.jpg" alt="寺外的经幡"></p>
<h3 id="旅途中的景致-雪山"><a href="#旅途中的景致-雪山" class="headerlink" title="旅途中的景致: 雪山"></a>旅途中的景致: 雪山</h3><p>在路上，大巴车绕着山路起起伏伏，我看到覆盖着冬雪的山峦，远在天际，神秘而高洁。在路的两侧，有着平缓的山丘，山丘上有悠闲觅食的牦牛群，羊群。</p>
<p><img data-src="https://i.loli.net/2021/06/27/cf8dre56o2HwaQZ.png" alt="山上的残雪"><br><img data-src="https://i.loli.net/2021/06/27/H2JskP9hnbiC5Sy.jpg" width="400" height="600" alt="层叠的山峦和腾飞的云朵"></p>
<h3 id="青海湖"><a href="#青海湖" class="headerlink" title="青海湖"></a>青海湖</h3><p>如果青海湖是一幅画作，那我目之所及应该是画作边缘的一处而已。<br>泛着涟漪的雾蓝的湖与有着棉绒状白云点缀的薄蓝天空一定有分界线，但我却寻觅不到这水天一线，眼前的画作是如此的浑然一体，就像一块沁蓝的玉一般，密不可分。</p>
<p><img data-src="https://i.loli.net/2021/06/27/moUF41gnjXlJM7B.jpg" alt="天水相接的青海湖"><br>湖上空，那低就的簇簇云彩，用周边的蓝衬出自己的亮色，顺着湖岸线而走，只要抬头，它都是最耀目的所在。</p>
<p><img data-src="https://i.loli.net/2021/06/27/d8aLfrJATn6icM3.jpg" alt="清澈的湖水"><br>湖水很清澈，湖面上除却几只供游人拍摄入画的水鸟外，再无一物。之所以说是水鸟，是因为我不知它们的名字，若信口说说是鸳鸯，那是自欺欺人，若随意说是白鸭，只能说是词穷，因而只能称作水鸟了，这里有着暖春的气息。</p>
<p><img data-src="https://i.loli.net/2021/06/27/HQEWVow8DJPdUKl.jpg" alt="湖水上休憩的鸟儿"></p>
<h2 id="Day-2-茶卡尔盐湖与大树垭口"><a href="#Day-2-茶卡尔盐湖与大树垭口" class="headerlink" title="Day 2: 茶卡尔盐湖与大树垭口"></a>Day 2: 茶卡尔盐湖与大树垭口</h2><h3 id="茶卡盐湖"><a href="#茶卡盐湖" class="headerlink" title="茶卡盐湖"></a>茶卡盐湖</h3><blockquote>
<p>门票:59 小火车:50</p>
</blockquote>
<p>茶卡盐湖景区有小火车直通终点景观，可以看到远处的盐雕，铁轨将由盐的结晶体铺成的白色道路分为两条，一起向前延伸。</p>
<img data-src="https://i.loli.net/2021/06/27/y2If7q8umFg6Yvr.png" width="400" height="600" alt="向前延伸的铁轨和两边的结晶">

<p>在路的尽头处，天际的雪山巍峨神秘，茶卡盐湖清澈明亮。<br><img data-src="https://i.loli.net/2021/06/27/ydpLNjwcFnl2UZA.png" alt="远处朦胧的雪山"><br><img data-src="https://i.loli.net/2021/06/27/jXtfD4xawYsBJHv.jpg" alt="岸边清澈的茶卡盐湖"></p>
<p>在湖边看起来盐滩好似一段白丝带，沐浴在阳光下，洁白高亮。<br><img data-src="https://i.loli.net/2021/06/27/mEuZdgKQo2c19xM.jpg" alt="与蓝天交汇的茶卡盐湖"></p>
<p>站立在浅滩上，身边的一切都是那么的明亮耀眼，晴空白云，天际雪山，足下浅滩，四周浅蓝环绕，“天空之境”，美不胜收。<br><img data-src="https://i.loli.net/2021/06/27/D74phe8Uogr5uZn.jpg" alt="盐堆和远处的浅滩"></p>
<p>脚踩在岸边的结晶上，触感好像掉进了盐罐里。<br><img data-src="https://i.loli.net/2021/06/27/KbUcyzxTWCadvRp.jpg" alt="脚下的结晶"></p>
<p>洁白的结晶和清澈的湖水让来游玩的人们不得不带上墨镜，否则看久了会对眼睛造成伤害，穿上景区的鞋套去湖水中行走，也是别有趣味，远处还有来拍婚纱照的新人们。<br><img data-src="https://i.loli.net/2021/06/27/takbizyoEq9lXcZ.jpg" alt="湖水和水下的结晶"><br><img data-src="https://i.loli.net/2021/06/27/KZjAsIYrk9vtR2J.jpg" width="300" height="500" alt="随手抓起的湖底结晶"><br><img data-src="https://i.loli.net/2021/06/27/tpHBxA2Xcv5yEqo.jpg" alt="在岸边洁白的结晶上留下自己的剪影"></p>
<h3 id="旅途中的景致-湖水和草原"><a href="#旅途中的景致-湖水和草原" class="headerlink" title="旅途中的景致: 湖水和草原"></a>旅途中的景致: 湖水和草原</h3><p>游览完了茶卡盐湖，我们又坐上大巴去下一个景点，旅途漫长，但路边的景致却丝毫不差。大巴车停在路边休息时，也足够让我们一饱眼福。比如路边的湖岸，虽然我忘记了它的名字，但它的清澈绝不逊于青海湖。<br><img data-src="https://i.loli.net/2021/06/27/owBtN9J2xefUvb6.jpg" alt="马路边的湖岸"></p>
<p>还有草原雪山，在蓝天白云的映衬下显得更加广袤，远处朦胧的雪山也增添了一丝神秘感：<br><img data-src="https://i.loli.net/2021/06/27/SfdDprUF32E4eOb.jpg" alt="蓝天白云下的草原雪山"><br><img data-src="https://i.loli.net/2021/06/27/CjE2sgdqNvLa1eD.jpg" alt="身披白雪的草原好像一匹斑马"></p>
<h3 id="大树垭口"><a href="#大树垭口" class="headerlink" title="大树垭口"></a>大树垭口</h3><p>大树垭口，这是附近海拔最高的地方，在这里停留时，天还在下雪，可见度不高，雾蒙蒙的。好多人都没有下车，我和朋友下去拍照时也被风雪迷的睁不开眼睛，所以拍到的图也有点糊。这种风雪交加的场景，让我在五月也触摸到了浓冬的气息，地上的雪是冻硬了的，伴着微微飘雪，走起路来一步一沙沙，声音悦耳动听。<br><img data-src="https://i.loli.net/2021/06/27/emh6Spz1rE9gukR.jpg" alt="风雪中的大树垭口"><br>下山时天有些暗了，山路是之字型的，顺路而下，可以看到山侧的雪如同洁白的磨砂画布，正在等候神秘力量的创作。大巴之后尾随了许多私家车，大都开着车前灯，一路逶迤而下，在灰蒙蒙的夜色下，好似一个个会移动的机械化红灯笼，点缀着暗夜下的雪山。</p>
<h2 id="Day-3-：卓尔山与祁连山脉"><a href="#Day-3-：卓尔山与祁连山脉" class="headerlink" title="Day 3 ：卓尔山与祁连山脉"></a>Day 3 ：卓尔山与祁连山脉</h2><h3 id="卓尔山"><a href="#卓尔山" class="headerlink" title="卓尔山"></a>卓尔山</h3><blockquote>
<p>门票+观光车:80 </p>
</blockquote>
<p>顺路而上，四周都是景，远处雪山上漂浮腾飞的云朵给人一种极强视觉震撼。<br><img data-src="https://i.loli.net/2021/06/27/HrNJghK3VwaStAo.png" alt="近处的山脉和远处的雪山"><br><img data-src="https://i.loli.net/2021/06/27/LRZoDIfh6pUJudk.jpg" width="400" height="600" alt="爬山途中"><br><img data-src="https://i.loli.net/2021/06/27/CG7PTaZg89Fj3qi.png" alt="一路所见皆是景"></p>
<p>眼前是白色的雪顶，墨绿的古松林，在青黄的牧场自由觅食的羊群，里山势起伏平缓，是闲适与悠然雕琢的作品，旷远深邃。另一侧有平缓的牧场将红色的天然肌肤置于晴空之下，与雪顶相应成彰。<br><img data-src="https://i.loli.net/2021/06/27/ay8oqPQlRZ7kWrH.jpg" alt="雪顶的白与山脉的红"></p>
<p>在山顶的白塔俯看山下，几何状排列的城镇建筑坐落在几座山中间的平缓地带，红色的屋顶，灰色的墙面，绿色的草坪，褐色流淌的河水以及车流不息的道路，适宜的连接起周围的阡陌交通，是大师的杰作。<br><img data-src="https://i.loli.net/2021/06/27/XLeHJctCNh4PWp7.png" alt="城镇"><br><img data-src="https://i.loli.net/2021/06/27/WKHdMUEGDfuBqbV.jpg" width="400" height="600" alt="雪山下的城镇"><br><img data-src="https://i.loli.net/2021/06/27/CvBIxift1lJsaGm.png" alt="城镇远景"></p>
<p>每向上前进一步，看到的风景都与之前的有些不同，登高望远，于何时何地都是很好的指引，走在卓尔山上，眺望远处的风景，仿佛行走在云端。<br><img data-src="https://i.loli.net/2021/06/27/zUK9vquLHWklb5F.jpg" width="400" height="600" alt="走在卓尔山"></p>
<p>卓尔山上也有和塔尔寺一样的白塔，在旅程的三天里，很多地方都有这样的白塔，足可见这里宗教氛围的浓厚。<br><img data-src="https://i.loli.net/2021/06/27/zYiKRfM8XAPL5al.jpg" alt="卓尔山上的白塔"></p>
<h3 id="旅途中的景致-草原雪地"><a href="#旅途中的景致-草原雪地" class="headerlink" title="旅途中的景致: 草原雪地"></a>旅途中的景致: 草原雪地</h3><p>爬完️卓尔山，坐上大巴继续旅途，途中突然看到了一片白茫茫的雪地，远处的雪山也仿佛藏匿在这篇雪地后，浑然一体。大家都想下去玩雪，于是大巴停在路边，我和朋友也下车欣赏这难得一见的雪景，脚踩在厚厚的雪上咯吱的响，想到小时候家乡的雪也有这么大，但长大后天气变暖，就很难看到这样的雪景了。<br><img data-src="https://i.loli.net/2021/06/27/Y2hFWo3ZCcMeGpN.jpg" alt="茫茫的雪地"></p>
<p>置身于这样的雪景，突然就想堆个雪人⛄️，于是动手喜滋滋的做了一个可爱的小雪人出来，还跟它合了张影。<br><img data-src="https://i.loli.net/2021/06/27/lLSMzXsKiq8jQen.jpg" width="400" height="600" alt="堆雪人"><br><img data-src="https://i.loli.net/2021/06/27/4IXsnlZKF296ypY.jpg" alt="小雪人完成啦"></p>
<h3 id="祁连山脉"><a href="#祁连山脉" class="headerlink" title="祁连山脉"></a>祁连山脉</h3><p>下午在回程的路上远观了祁连山脉，真的是蔚为壮观。<br><img data-src="https://i.loli.net/2021/06/27/hXv2E9eGjyP4xYL.png" alt="远处的山脉"></p>
<p>碧蓝的天空下白云长列，似乎是伞伞相连，为云底的雪峰遮蔽住金色的阳光，千年万年的陪伴。横看，从眼眸中的这一侧到那一侧，山与山连绵不绝，竖看，云下有山，山顶积雪，传说中那是仙人居住的地方。<br><img data-src="https://i.loli.net/2021/06/27/vH8bFwyUleOoB5M.png" alt="与白云相接的祁连山脉"></p>
<h3 id="再见西宁"><a href="#再见西宁" class="headerlink" title="再见西宁"></a>再见西宁</h3><p>旅途结束后，又和朋友一起在西宁的街头散步，夜风中的西宁静谧安然，自有它自己的特色。<br><img data-src="https://i.loli.net/2021/06/27/gR2cwxCHUkuODG7.jpg" alt="窗外的西宁"><br><img data-src="https://i.loli.net/2021/06/27/Kr4atIkjuYFzh3m.jpg" alt="夜晚的西宁"><br><img data-src="https://i.loli.net/2021/06/27/ukeDpNiGMHbTSj1.jpg" alt="夜风中的西宁"></p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>网络无障碍</title>
    <url>/Accessibility-test/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2020/01/19/LBdwixRJcjbS7NK.png" alt="Accessibility"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于工作原因，博主最近在做<mark class="label info">网络无障碍测试</mark>，之前也听说过，但是没有实践。深入了解之后才发现网络无障碍已经有很成熟的标准和实践了，研究了一天，所以想把自己的发现跟大家分享一下(所以说公司真是一个涨姿势的好地方)。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="温情版定义"><a href="#温情版定义" class="headerlink" title="温情版定义"></a>温情版定义</h3><p>这个世界上，有一些人听不见，有的人看不见，也有人肢体有障碍。<br>互联网时代，手机不离身。娱乐、交流、还有许多生活应用都可以通过网络进行。在网络给我们带来快乐和便利的同时，是否也会想到上述特殊人群也需要这些呢？所以，<mark class="label info">网络无障碍要求所有人都可以平等、无障碍的访问互联网应用和内容，让世界充满爱<span class="emoji" alias="blush" style="fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8">😊</span></mark></p>
<h3 id="专业版定义"><a href="#专业版定义" class="headerlink" title="专业版定义"></a>专业版定义</h3><p>网络无障碍听起来是很温情，然而作为一名IT民工，温情之余，也还是要干(ban)活(zhuan)的。<br>所以要支持网络无障碍，在开发互联网应用时，就必须得加上这么一个功能<span class="emoji" alias="point_down" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8">👇</span></p>
<blockquote>
<p>网络无障碍辅助功能（Accessibility，也被称为 <mark class="label danger">a11y</mark>，因为以 A 开头，以 Y 结尾，中间一共 11 个字母，这种命名方式可以说很想不到了<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>）是一种可以帮助所有人获得服务的设计和创造。无障碍辅助功能是使得辅助技术正确解读网页的必要条件。</p>
</blockquote>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>上边提到了网络无障碍辅助功能，那么在做功能之前我们需要干什么呢？当然是了解需求。</p>
<div class="note info"><p><a href="https://www.w3.org/Translations/WCAG21-zh-20190311/">WCAG标准(Web Content Accessibility Guidelines)</a> 是由权威组织 <strong>W3C(万维网联盟)</strong> 于1999年推出的网络无障碍指南。目前已经更新到了2.1版本，此版本最近的更新在2019/3/11。<br>里边提出了Web内容应当遵守的4大准则，并且根据网站对这些准则的实施情况分为<strong>A、AA、AAA</strong> 3种一致性水平。</p>
</div>

<p>WCAG标准相当于一个网络无障碍相关的需求集合，但在实际工作中，网络无障碍的需求要根据具体情况而定，一般会从这两个角度出发提出需求：</p>
<ul>
<li>需求1: 从WCAG标准的一致性水平角度出发，要求实现A/AA/AAA水平。</li>
<li>需求2: 从人类本体对无障碍访问的需求角度出发，要求实现有看不见/听不见/色弱等身体缺陷人群，也能访问页面。</li>
</ul>
<p>有时候也会把这两种角度结合在一起提出需求，比如实现A水平，也要实现身体缺陷人群的访问，所以需求是可定制的。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>对于开发而言，网络无障碍的支持主要由<mark class="label info">前端童鞋</mark>们来实现。<br>在实际项目中，一般来说无障碍不会作为网站的原始需求，更多是作为一种改进，但无论是否原始需求，开发童鞋需要做的是：</p>
<div class="tabs" id="step"><ul class="nav-tabs"><li class="tab active"><a href="#step-1">Step 1</a></li><li class="tab"><a href="#step-2">Step 2</a></li><li class="tab"><a href="#step-3">Step 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="step-1"><p>非原始需求跳到第二步。了解一些基础的WCAG编码实践，可以参考<a href="https://zh-hans.reactjs.org/docs/accessibility.html">React官方网站</a>给出的编码建议。</p></div><div class="tab-pane" id="step-2"><p>使用下文的开发辅助工具和浏览器检测工具改代码。</p></div><div class="tab-pane" id="step-3"><p>交给测试仙女姐姐之前，自己做做下文中的简易手工测试。</p></div></div></div>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="note warning"><p>在测试之前，我们需要谨记：任何工具都不能告诉我们web内容是否真的做到了网络无障碍，只有<strong>人</strong>才能确定真正的无障碍性。但这些工具可以帮助我们<strong>评估</strong>网页内容的无障碍性。</p>
</div>
<h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><h4 id="可在IDE使用的开发辅助工具"><a href="#可在IDE使用的开发辅助工具" class="headerlink" title="可在IDE使用的开发辅助工具"></a>可在IDE使用的开发辅助工具</h4><p><span id="inline-toc">1.</span>IDE智能检测<br><span id="inline-toc">2.</span><a href="https://github.com/evcohen/eslint-plugin-jsx-a11y">eslint-plugin-jsx-a11y 插件</a><br><span id="inline-toc">3.</span><a href="https://github.com/dequelabs/react-axe">react-axe组件</a>，可以直接把无障碍访问的发现显示在控制台中</p>
<h4 id="浏览器检测工具"><a href="#浏览器检测工具" class="headerlink" title="浏览器检测工具"></a>浏览器检测工具</h4><p>凡是浏览器中检测网络无障碍的测试工具，都离不开<a href="https://github.com/dequelabs/axe-core">aXe-core</a>，它可以对应用进行自动及端至端无障碍性测试，还包含了对Selenium的集成。可以选择下列工具的一个或多个测试。</p>
<p><span id="inline-toc">1.</span><a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane">浏览器的无障碍辅助功能检测器Audits/LightHouse(基于aXe引擎)</a></p>
<img data-src="https://i.loli.net/2020/04/22/FLf2MhVHe4lBR7S.png" width="300" height="400">

<p><span id="inline-toc">2.</span>无障碍访问性检测器aXe(基于aXe-core组件)，可以添加<a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd">浏览器插件</a>，也可以下载<a href="https://www.deque.com/axe/">安装包</a>。相比较Audits检测报告更详细。</p>
<p><span id="inline-toc">3.</span>无障碍辅助的<a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh">浏览器插件WebAIM WAVE</a>(Web Accessibility Evaluation Tool)</p>
<p><span id="inline-toc">4.</span>无障碍测试工具<a href="https://pa11y.org/">Pa11y</a>，可以自己配置测试基于的WCAG版本和一致性水平，也可以用来做持续集成。</p>
<h4 id="简易手工测试"><a href="#简易手工测试" class="headerlink" title="简易手工测试"></a>简易手工测试</h4><p>已经有了上面的自动化检测工具，为什么还需要手工测试呢？如果你认为在LightHouse得到100分或者aXe/WAVE检测无error就意味着网站已经完全做到访问无障碍。那就Too Young Too Simple了。因为自动化工具只会返回那些最常见和最容易修复的可访问性问题的检测报告。正如axe引擎开发团队DequeLabs提到的那样：</p>
<div class="note info"><p>The downside of the DevTools accessibility audit is that’s only half of the story. Your page may have scored a 94 in accessibility according to Lighthouse, but it’s only telling you the results of automated testing. You also have to perform manual accessibility testing to really know where you stand.</p>
</div>
<p>简易的无障碍手工测试，主要用到下面两种工具：<br><span id="inline-toc">1.</span>键盘<br>使用 Tab 和 Shift+Tab 来切换页面元素，用空格/enter键定位元素，比如下拉框等等。从而实现浏览整个页面。<br><span id="inline-toc">2.</span>屏幕阅读器</p>
<div class="note primary"><p>在使用屏幕阅读器之前，先想想自己是否为屏幕阅读器正确标记了页面的元素？屏幕阅读器通过识别页面上的无障碍辅助对象来帮助用户浏览页面，这些对象均包含在无障碍辅助功能树中，它是DOM树的一个子集：</p>
</div>
<img data-src="https://i.loli.net/2020/04/22/dEF7fwu1TxXbtWg.jpg">
不同设备，不同浏览器都有内置的屏幕阅读器设备，自己根据需求百度下<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>

<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p><span id="inline-toc">1.</span>将像<a href="https://github.com/dequelabs/axe-core">axe-core</a>这样的库合并到自动化测试套件中，集成到pipeline。<br><span id="inline-toc">2.</span><a href="https://cruft.io/posts/automated-accessibility-testing-node-travis-ci-pa11y/">将Pa11y集成到pipeline</a></p>
<h3 id="专业测试机构"><a href="#专业测试机构" class="headerlink" title="专业测试机构"></a>专业测试机构</h3><p>除了开发团队，也有一些专业的网络无障碍测试机构，这些机构的员工大多都是有身体缺陷的人，他们会用自己的测试设备和个人体验帮助提升网站的可访问性。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span id="inline-toc">1.</span><a href="https://www.w3.org/Translations/WCAG21-zh-20190311/">W3C-Web Content Accessibility Guidelines</a><br><span id="inline-toc">2.</span><a href="https://zh-hans.reactjs.org/docs/accessibility.html">React-无障碍辅助功能</a><br><span id="inline-toc">3.</span><a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane">Accessibility Reference</a><br><span id="inline-toc">4.</span><a href="https://developers.google.com/web/fundamentals/accessibility/how-to-review">How To Do an Accessibility Review</a><br><span id="inline-toc">5.</span><a href="https://pa11y.org/tutorials/">Pa11y tutorials</a><br><span id="inline-toc">6.</span><a href="https://bitsofco.de/pa11y/">Accessibility Testing with pa11y</a><br><span id="inline-toc">7.</span>同事在项目Space的文档&gt;.&lt;</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>网络无障碍</tag>
      </tags>
  </entry>
  <entry>
    <title>端午色达四日游</title>
    <url>/6-6-travel/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>端午节假期又和朋友一起报团去四川色达旅游，以下内容还是转载自 <a href="http://www.mafengwo.cn/i/13623502.html">朋友写的语文课代表式游记</a> ，加了一些自己拍的照片和感想，这次是三人行啦，由于来去匆忙，这次没有时间去成都街头走走。</p>

</blockquote>

<h2 id="日期加花费"><a href="#日期加花费" class="headerlink" title="日期加花费"></a>日期加花费</h2><div class="note info"><p>出行日期： 6.6-6.9<br>出行方式： 报团 899/人<br>个人花费：团费899+餐饮门票331+往返车票263*2 = 1756<br>出发地： 西安<br>集合地： 成都</p>
</div>

<h2 id="Day-1-桃坪羌寨"><a href="#Day-1-桃坪羌寨" class="headerlink" title="Day 1: 桃坪羌寨"></a>Day 1: 桃坪羌寨</h2><blockquote>
<p>门票：60元</p>
</blockquote>
<p>到达的第一站是桃坪羌寨，据说是黄渤主演电影「杀生」的取景地，这里有新寨和旧寨之分，我们参观的重点是旧寨。旧寨依山而建，寨子看起来浑为一体。<br><img data-src="https://i.loli.net/2021/06/28/xhYr2LFnjOdv4PA.png" alt="羌寨"></p>
<p>走进之后，里面小路四通八达，通向家家户户，幸而寨子的面积不是很大，否则外来者很容易迷路。阴天又有下雨的趋势，倒给原本古朴的寨子增添了神秘的色彩。<br><img data-src="https://i.loli.net/2021/06/28/6dn3CbMiZr7g5Qs.jpg" width="400" height="500" alt="从寨内小路向上望"></p>
<p>寨中的房子以石头为主要的建筑材料。石头可以就地取材，可以保持室内温度，是最合适不过的。<br><img data-src="https://i.loli.net/2021/06/28/CqA9ZreQpR6z5mB.png" alt="寨内房屋"></p>
<p>我在寨子中爬上了最高的碉堡，碉堡下宽上窄，有七层，通过厚重的木质楼梯连接，到最顶层时，只能容下三四人站立，极目远眺可以将寨中的风景一览无余。<br><img data-src="https://i.loli.net/2021/06/28/swrIP1NJ3dczUK8.jpg" alt="碉堡内的木质楼梯"><br><img data-src="https://i.loli.net/2021/06/28/ORw9ANsZreKcSyu.jpg" width="400" height="500" alt="在碉堡顶层眺望的游客们"></p>
<p>走在寨中树荫遮蔽的石板路上，脚下水声潺潺而过，若是在盛夏，那酷暑之感都消了大半。这里地下水系交罗密织，可以为寨中人提供生活用水，消防用水，再者可以调节室温，更可以在紧急时作为逃生通道，真是充满智慧的设计。<br><img data-src="https://i.loli.net/2021/06/28/gJ3x2LTMvZkNrRp.png" width="400" height="500" alt="寨中的石板路"><br><img data-src="https://i.loli.net/2021/06/28/nuQF7JNT1qtCesO.png" alt="寨中小桥"><br><img data-src="https://i.loli.net/2021/06/28/i7h4gUGkTFS1tN8.jpg" width="400" height="500" alt="桥边写生的人们"></p>
<p>新寨处有许多卖车厘子的人，一番游览之后，在这里会不由自主的被那颜色艳丽的车厘子夺去目光，自然慷慨解囊。在等候午餐的间隙，品尝着清甜的车厘子，美事一桩。<br><img data-src="https://i.loli.net/2021/06/28/r2dQpoM8FB7VOJP.jpg" width="400" height="500" alt="午餐时间"></p>
<p>结束游览后，在大巴车上也随处可见树木葱郁的林山，白云浮在山顶亦如仙境。<br><img data-src="https://i.loli.net/2021/06/28/VZnLdPHioelI3Fy.jpg" alt="林山"></p>
<h2 id="Day-2-天葬台与佛学院"><a href="#Day-2-天葬台与佛学院" class="headerlink" title="Day 2: 天葬台与佛学院"></a>Day 2: 天葬台与佛学院</h2><p>早上从观音桥出发，坐着大巴在路上，我们被几只猴子挡住了去路，只好停车。司机说我们得给这些猴子一点「过路费」他们才会走开，于是有游客给它们投喂了很多面包零食之类。这些猴子也不怕我们，甚至在大巴门口拍打窗户，还在游客窗边讨要食物，大家都感慨这些猴子也太聪明了。<br>过了一阵，到了一个休息区，在这里看到了更多猴子，喂食的人也很多，它们好似知道这是游客的休息区一样，成群结队的在这里讨要食物。天气很好，我捕捉到了山间彩虹。<br><img data-src="https://i.loli.net/2021/06/28/I3g7qOXavZeK4dA.jpg" alt="彩虹和讨食的猴子"></p>
<p>中午一点，我们抵达了天葬台。<br>天葬是藏族的习俗，他们相信秃鹫食用了故去的人的骨肉后，会把他们的灵魂带到更接近天际的地方。天葬台位于1/3山高的地方，去往天葬台的路上会看到很多石堆、石刻的建筑，多用骷髅头作装饰，显得更加肃穆。<br><img data-src="https://i.loli.net/2021/06/28/wnHo2lPbVjN7XWv.jpg" width="400" height="500" alt="天葬台下的肃穆建筑"></p>
<p>天葬台右侧是一层层的阶梯，供游客们坐下观看天葬仪式。举行天葬在下午一点到三点间，不到一点我们就在看台上等待了。一点多，有一只秃鹫从天空中慢慢低旋停在了看台侧的山地上，有了第一只，后续的就陆续而至，抬眼望去，湛蓝的天空中许多的秃鹫回旋，大大小小的约有两百多只，场面甚是震感，这也是我第一次近距离看到秃鹫。<br><img data-src="https://i.loli.net/2021/06/28/F3U6KElOn8oAr9h.png" alt="空中回旋等待的秃鹫"></p>
<p>天葬仪式在一点半开始，我看到陆续有僧人和工人抬着一袋袋麻袋放在天葬台上，有游客说这就是供秃鹫们食用的尸体。<br>之后他们先用帘子挡住麻袋，这样游客们就看不到秃鹫进食时血腥的场面，虽然看不到，但从天葬台上黑压压盘飞的秃鹫来看，也不难想象到他们已经从麻袋中取出了尸体。不一会，空气中就弥漫着浓重的血腥气味，大概10分钟左右，秃鹫散开，各自飞离，天葬台又恢复了平静。<br>整个过程庄严肃穆，让我想到了佛祖割肉喂鹰的故事，万物有灵。</p>
<p>离开了天葬台，下一站就是我们此次的重点–佛学院。<br>我们在佛学院的入口处下了大巴，这里有去往山上佛学院的公交，然后乘坐公交车到达终点—坛城。<br><img data-src="https://i.loli.net/2021/06/28/4cUBNm8jWvsGuVD.jpg" width="300" height="400" alt="佛学院公交牌"></p>
<p>带着一份惊喜，我们一步步的走到了观景台，从最高处的观景台俯瞰佛国，最中心是大学模样的佛学院，四周是层层渐进的红房子，用来休息住宿。远处青山平缓，高处天际湛蓝，簇簇云彩之下，是红色的佛国，这样宁心舒缓的红，伴着声声梵音，圣洁高贵。<br><img data-src="https://i.loli.net/2021/06/28/KXsCn92tJLjb7OR.jpg" alt="俯瞰色达"><br><img data-src="https://i.loli.net/2021/06/28/Jc2i4oEp8u75lyR.jpg" alt="换个角度俯瞰色达"></p>
<p>原本打算顺着蜿蜒曲折的路迤逦而下，谁知刚刚没走几步，头顶的乌云就不辞辛劳的开始了工作。雨点簌簌而下，我们只好去屋下躲避，我本来想说有一句歌词很合景–“爱就是晴空万里突然暴风雨”，正当我为自己反应迅速而努力喝彩时，经旁人说起才发觉原来是在下冰雹，我已经好些年有没有看到过下冰雹了，小小的白色晶状体砸在手上还是有些痛感的。</p>
<h2 id="Day-3-色达佛学院"><a href="#Day-3-色达佛学院" class="headerlink" title="Day 3: 色达佛学院"></a>Day 3: 色达佛学院</h2><p>今天早上的行程还是去色达佛学院，昨天因为天气的缘故匆匆一览，今天天气凉爽，适合缓行。<br>因为节假日的缘故，公交车只行至山腰处，剩下的路要步行。本着上下决不走同一条路的原则，我们挑了一处比较陡峭的台阶，打算沿台阶而上，到达山顶之后可以从公交车行驶的大道缓步而下。从下而上仰视色达，密集的红房子也是一种视觉震撼。<br><img data-src="https://i.loli.net/2021/06/28/XKHE5Pj1SIBaYmV.jpg" width="400" height="500" alt="仰视角度的色达"></p>
<p>沿台阶而上比较费力，所幸每走一段就会有长椅可以休息。由于这里海拔比较高，我们还买了氧气瓶以备不虞，边吸氧边拾级而上也是一种奇妙的体验。<br><img data-src="https://i.loli.net/2021/06/28/UVm4DB2IK3Qtivk.jpg" width="300" height="400" alt="累了就吸会氧"></p>
<p>越往上走，视野越开阔，所见的风景越深邃悠远。我们看到了身侧有许多的佛学院的学生，身着红色的衣裳，虔诚的去往课堂，一时间我想起了大学时同舍友结伴去上课的场景，轻快愉悦。<br><img data-src="https://i.loli.net/2021/06/28/yHXIYDBEUFrKxq4.jpg" width="300" height="400" alt="山顶的佛堂"></p>
<p>我们到达山顶之后，略作休息就缓步下山。一路上挑着小路而下，光顾了佛学院里的水果摊、杂货铺、早餐店、纪念品商店，这时我发觉这是一座有着生活气息的佛学院，不是一座不食人间烟火的清冷殿堂，也不是一处只供游人赏玩的旅游胜地。<br>对于那些虔诚学习的学生而言，这里是佛学的殿堂。<br><img data-src="https://i.loli.net/2021/06/28/jXkHOSP2h8iw3V1.jpg" alt="山脚下的风光"></p>
<p>旅途结束后回到住所，和同游的朋友们一起吃串串，打麻将也是一番趣味，卸去一天的疲惫。<br><img data-src="https://i.loli.net/2021/06/28/hjxZqYviBHO9EXU.jpg" alt="串串吃起来"><br><img data-src="https://i.loli.net/2021/06/28/3SeNyiBXpWIzC72.jpg" alt="麻将搓起来"></p>
<h2 id="Day-4-西索民居与卓克基官寨"><a href="#Day-4-西索民居与卓克基官寨" class="headerlink" title="Day 4: 西索民居与卓克基官寨"></a>Day 4: 西索民居与卓克基官寨</h2><p><img data-src="https://i.loli.net/2021/06/28/1TXF9pyRxe3lsLK.jpg" alt="西索民居"><br>西索民居，清晨走在略带湿意的青石小路上，周边静谧安逸，我从村庄中部穿插而过，有一瞬间，觉得这条路，路两侧的石制小屋，屋前的各色盆植鲜花似乎只供我一人独赏，这是何等的惬意。<br><img data-src="https://i.loli.net/2021/06/28/QNthEAfP1BWCU2J.png" alt="民居小路"><br><img data-src="https://i.loli.net/2021/06/28/8EbLmRhvSOoidIA.jpg" alt="远眺西索民居"></p>
<blockquote>
<p>卓克基官寨 门票 ： 60 元，部分图片来源于：<a href="http://blog.sina.com.cn/s/blog_8b4d9d180102yj09.html">卓克基土司官寨：毛主席曾经住过的嘉绒藏族城堡</a></p>
</blockquote>
<p>卓克基官寨前有一条青石台阶路，曲折而上直至寨前。石阶的里侧是片片山石垒起的石壁，石壁之上是木制的围栏，木栏外侧悬挂着各色花卉，颜色艳丽，不一而同。石壁之内乔木茂密，树荫于木栏之外为青石台阶遮蔽艳阳。走在这样诗意的石阶上，哪里还有什么忧愁。<br><img data-src="https://i.loli.net/2021/06/28/5cYmSDCEjbdtN8W.png" width="400" height="500" alt="石阶"></p>
<p>卓克基官寨这样有特色的建筑我还是第一次见到。它是一个正方形的建筑，外侧是石砌的，里面大都是木制结构。由正门而入，东南 西北 四侧都建有房屋，彼此相连。<br><img data-src="https://i.loli.net/2021/06/28/HFPgUS45fZDChpx.png" alt="官寨大门"></p>
<p>除了出入的正门侧有三层高外，其余的四侧都是五层高。一层是储物用的地方，二层是革命者的曾经的居所，三层是土司居住的地方，卧室，厨房，餐厅，管家的住所，议事的厅堂一应俱全。四层是供奉佛像金身的所在，五层有乞求长生的供奉处和僧众祷告的场所。一处官寨，涵盖万千。真的是匠心独运。<br><img data-src="https://i.loli.net/2021/06/28/wCMR5gquNOi6zJT.png" alt="官寨内部"><br><img data-src="https://i.loli.net/2021/06/28/yg3Gw8nZIxSpTdK.png" alt="四楼远望"></p>
<p>当我在四层参观供奉佛像的大殿时，只觉得经幡高悬，佛像高大庄严，壁画精美，不由得怀揣一颗虔诚的心。走到五楼相同的位置时，想推门而入看一下这处的设置，却发觉这里没有门，只有窗。透过窗看到了与四楼同样的风景，这时才发觉四楼与五楼是打通了的，否则何以有那么高大的佛像，只是身处四楼的时候只沉浸在殿堂的威严肃穆中，忽略了其他，到了五楼才后知后觉。<br><img data-src="https://i.loli.net/2021/06/28/viK9INcxEVns3By.png" alt="官寨佛像"></p>
<p>官寨之外设有囚室三间。第一间有一扇正常大小的窗户，屋内还算明亮；第二间有一扇小窗户，屋内顿觉昏暗不少；第三间只有一个通气口，屋内暗黑压抑，不能视物。这三间分别关押罪行由轻至重的人，看这囚室的设计，单是被关押到第三间中，无错也会觉得自己有罪的。被剥夺光明真是一件很恐怖的事情。</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>AppUI自动化测试第二弹</title>
    <url>/AppUI-AutoTest-1/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/BaDFwHCvbWk8g1x.png" alt="image.png"></p>
<p>上篇博客我们创建好了测试项目，本篇博客就带大家编写测试代码，然后利用模拟器运行。</p>
<h2 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h2><p>熟悉了测试项目的结构后，我们就可以按照相同的代码格式编写自己的测试代码啦。<br>首先我们想一想，UI测试的第一步是什么呢？当然是定位元素。<br>对于Web应用，我们可以直接使用浏览器的开发者工具inspector定位页面元素：<br><img data-src="https://i.loli.net/2021/05/20/LWRPKYaSbQji4yH.png" alt="image.png"><br>然而我们的测试对象是App，怎么定位App里的元素呢？答案是利用Appium和模拟器。<br>打开我们下载的Appium desktop应用：<br><img data-src="https://i.loli.net/2021/05/20/Xb2R1rJf3PNDEkV.png" width="350" height="300"><br>选择 Start Server, Appium Server就运行起来啦:<br><img data-src="https://i.loli.net/2021/05/20/r27GjW6cAdwHtSK.png" alt="image.png"><br>鼠标hover到右上角的🔍图标，出现tip提示 <strong>Start Inspector Session</strong>，很明显这就是我们用来定位App元素的工具啦，点击之后出现下图窗口：<br><img data-src="https://i.loli.net/2021/05/20/t3b2iRPjNBOpW8x.png" alt="image.png"><br>这里我们只关注当前的Tab窗口，其它部分不做介绍。在这个窗口中，我们可以通过设置 <strong>Desired Capabilities</strong> 来启动一个iOS/Android模拟器，Desired Capabilities是一系列模拟器配置项的集合，分为iOS和Android两个平台，有很多配置项，有两个平台公共的也有各平台单独的配置，完整的配置项列表在这里：<a href="http://appium.io/docs/en/writing-running-appium/caps/index.html#appium-desired-capabilities">Appium Desired Capabilities</a>。</p>
<p>下边我们使用5个公共的Desired Capabilities配置项分别启动iOS和Android的模拟器：platformName、platformVersion、deviceName、automationName、app，他们分别代表操作系统名称、操作系统版本、设备名称、自动化引擎名称、app路径，想更多的了解这五个配置项可以看上边的配置项列表。</p>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h3 id="启动iOS-Simulator"><a href="#启动iOS-Simulator" class="headerlink" title="启动iOS Simulator"></a>启动iOS Simulator</h3><p>首先执行 <strong>xcrun instruments -s</strong> 命令来查看Xcode提供给我们所有的iOS模拟器种类，包括设备名称和操作系统版本等等：</p>
<p><img data-src="https://i.loli.net/2021/05/20/eJZMpn3ayOgB78i.png" alt="image.png"></p>
<p>然后选择一个模拟设备，按照json格式新增一个Desired Capabilities，这里我们以iPhone 11为例，粘贴下边的Desired Capabilities到Appium Start Inspector窗口，然后点击Save As按钮保存这个配置，这里我把它保存为iOS：<br><img data-src="https://i.loli.net/2021/05/20/VdDgGbmSFpCOUea.png" alt="image.png"></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "iOS",</span><br><span class="line">  "platformVersion": "14.0",</span><br><span class="line">  "deviceName": "iPhone 11",</span><br><span class="line">  "automationName": "XCUITest",</span><br><span class="line">  "app": ""</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后它就可以在 Saved Capability Sets 窗口里看到啦，以后可以单独对它做修改。<br>然而我们还缺少一个app字段，它是我们测试app的绝对路径，WebdriverIO给初学者提供了iOS和Android两个平台的 <a href="https://github.com/webdriverio/native-demo-app/releases">demo app</a>，它们具有现代App的代码结构，非常适合用来做App测试：<br><img data-src="https://i.loli.net/2021/05/20/Ayx3YSEpuZlFc8a.png" alt="image.png"><br>下载完成后，把.apk文件和解压后的.app文件都放入项目的app文件夹中，之后修改Desired Capabilities里的app路径为绝对路径，然后保存：<br><img data-src="https://i.loli.net/2021/05/20/wJlyN5mUjLFdXeM.png" alt="image.png"><br>点击Start Session后，稍等片刻，就能看到模拟器启动并出现元素定位窗口，测试app已被打开：<br><img data-src="https://i.loli.net/2021/05/20/kTL578EawBCpRno.png" alt="image.png"><br>元素定位窗口由两部分组成，左侧为App视图，右侧为代码和元素视图，在左侧视图中点击App元素，对应的元素信息就会出现在右侧视图，比较常用的是Xpath，但也可以用id/class来定位元素：<br><img data-src="https://i.loli.net/2021/05/20/cDygiatb1qG3EX2.png" alt="image.png"><br>元素定位窗口的App视图只能展示一个页面，不能通过点击直接切换App页面。要做到这一点，我们只能先切换模拟器页面，之后点击元素定位窗口上方的刷新图标，新的页面视图才会出现：<br><img data-src="https://i.loli.net/2021/05/20/ihJ7OZzbE2rFXYV.png" alt="image.png"></p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位iOS平台的App元素了，然后我们来编写测试代码，这里我们来编写最简单的两个Case，登录和注册。</p>
<div class="note info"><p>首先是登录，要实现登录操作，我们首先要切换到上边的登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要切换到上边的登录页面，然后切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p>
</div>

<p>回到VSCode，登录页面已被定义，且已有示例的selector写法，通过定位元素，我们可以按照示例定义页面元素的selector，再新增方法对元素进行操作，最后在e2e.js中调用页面方法完成测试。</p>
<p><img data-src="https://i.loli.net/2021/05/20/MLUTP2BbmGR76Op.png" alt="image.png"></p>
<p>大家可以按照这个思路自己编写测试代码，这里我就不贴代码了，不过可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将内容copy到对应文件夹(results文件夹只用copy result.txt)，其中ios.conf.js就是我们上边设置的Desired Capabilities，要在编辑器里运行代码我们必须得加上它，将其修改成你本地的配置即可，这里我有两个app路径，其中一个(没注释的)与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/SrQML96uvleWqBX.png" alt="image.png"></p>
<p>最后运行 <strong>npm run test:ios</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，运行视频：</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3OTk3Ng==" frameborder="0" 'allowfullscreen'=""></iframe>

<p>测试报告是利用junit做的，可以在 wdio.conf.js 文件里查看：<br><img data-src="https://i.loli.net/2021/05/26/nhUuXidOpwWzZ9G.png" alt="image.png"></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="启动Android-Emulator"><a href="#启动Android-Emulator" class="headerlink" title="启动Android Emulator"></a>启动Android Emulator</h3><p>打开我们下载的Android Studio，进入编辑页面，点击右上角AVD Manager图标打开模拟器窗口：<br><img data-src="https://i.loli.net/2021/05/20/wiFyJgqWZXbDAmG.png" alt="image.png"><br>这里会列出所有可以使用的安卓模拟器，初次打开时，可能没有Virtual Device，可以通过“Create Virtual Device”来创建一个，创建时下载OS版本需要一些时间哦，如果有默认的Virtual Device就不用下载了。然后启动你的安卓模拟器：</p>
<p><img data-src="https://i.loli.net/2021/05/24/n1865FmjlbKyupU.png" alt="image.png"></p>
<p>安卓模拟器右侧是一些菜单项，包括开关机、音量、旋转等等，以及一些高级设置，可以访问 <a href="https://developer.android.com/studio/run/emulator">在Android模拟器上运行应用</a> 了解更多。</p>
<p>接着和iOS一样，在Appium desktop里新增Virtual Device对应的Desired Capabilities，然后Save as保存它，下边是我保存的配置，需要修改成和你的模拟器一致：</p>
<p><img data-src="https://i.loli.net/2021/05/24/TM3skJ47iDX8l9b.png" alt="image.png"></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "Android",</span><br><span class="line">  "platformVersion": "10.0",</span><br><span class="line">  "deviceName": "Pixel_3_XL_API_29",</span><br><span class="line">  "automationName": "UiAutomator2",</span><br><span class="line">  "app": "你的安卓app绝对路径，应该在app文件夹里"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>保持你的安卓模拟器启动状态，然后Start Session，就会看到和刚才iOS一样的元素定位窗口，测试app已在模拟器中打开：</p>
<p><img data-src="https://i.loli.net/2021/05/24/MoekacB4D9TAtsu.png" alt="image.png"></p>
<p>事实上，你可以同时打开iOS和Android的模拟器和元素定位窗口，一起定位iOS和Android的元素：</p>
<p><img data-src="https://i.loli.net/2021/05/24/R6yJCZVgfUNwQB5.png" alt="image.png"></p>
<h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位Android平台的App元素了，同样可以按照之前的思路自己编写登录注册的测试代码，事实上只需要修改上边iOS的Selector为Android格式即可。<br>也可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将android.conf.js内容修改成你本地的配置即可，这里我有两个app路径和两个deviceName，多出的两个(没注释的)同样与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/dvgs5SKQrHXEkUh.png" alt="image.png"></p>
<p>最后运行 <strong>npm run test:android</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，也要确保安卓模拟器为启动状态，运行视频：</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe>

<h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p>上面我们使用模拟器和两个demo app，利用Appium inspector完成了登录注册功能的自动化测试。当然，只懂得这些是远远不够的，首先我们知道，当代App有几种类型：<strong>Native app</strong>、<strong>Web app</strong>以及<strong>Hybrid app</strong>，这三者的区别是什么、如何测试显然是一个重要的课题，网上已经有许多文章讲述它们的区别，比如 <a href="https://www.jianshu.com/p/a40fefcadc94">这篇文章</a> ，所以我就不再赘述了。</p>
<p>而除了login页面，demo app也提供了其它不同类型的页面，比如WebView、Swipe等生活中常见的页面类型。同样，针对于此demo app，WebDriverIO提供了 <a href="https://github.com/webdriverio/appium-boilerplate">示例代码库</a>，也包括iOS和Android两个平台，里面有包含以下类型的测试示例代码：</p>
<ul>
<li>测试native app</li>
<li>测试webview</li>
<li>在手机端利用Safari/Chrome执行浏览器测试</li>
<li>利用Sauce Labs Service、BrowserStack两个云服务平台提供的真机/模拟器执行测试</li>
</ul>
<p>每一种测试类型都有对应的config文件，但此代码库用的不是mocha框架，而是jasmine框架。而且虽然它测试了两个平台，但由于只是selector不同，所以通过配置不用重复定义页面，一个页面可以被两个平台调用，感兴趣的同学可以深入学习。</p>
<p>完成后别忘了把代码推送到Github哦，方便进行下一步的CI集成。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Appium</tag>
      </tags>
  </entry>
  <entry>
    <title>AppUI自动化测试第三弹-iOS篇</title>
    <url>/AppUI-AutoTest-2/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/C63wHlmUE5o4Nh8.png" alt="image.png"></p>
<p>通过前两篇博客我们有了一个测试代码库，没有的话可以直接fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 到你的github账户，之后就可以进行CI集成啦，本来是想iOS和Android一起讲的，但篇幅太长，就分开了，多图预警。。。</p>
<h2 id="Bitrise介绍"><a href="#Bitrise介绍" class="headerlink" title="Bitrise介绍"></a>Bitrise介绍</h2><p><a href="https://www.bitrise.io/">Bitrise</a> 是一款CI工具，与同领域其它工具，比如Jenkins/GoCD/Travis CI的不同在于它是专门用来部署手机应用的，它内置了很多手机应用开发的插件，可以帮助开发团队快速搭建环境、构建部署应用，并执行测试。此外，简洁易懂的UI也是它的一大优势。</p>
<p>由于Bitrise是一个部署App的工具，所以我们需要一个App开发代码库，Bitrise提供给我们两个可以使用的代码库，把它们fork到你的github就行：<a href="https://github.com/bitrise-io/sample-apps-ios-simple-objc">iOS</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">Android</a>。</p>
<p>由于步骤不尽相同，所以两个平台分开讲，开始之前请先注册一个Bitrise账号，然后登录，选择standard plan，你会看到如下页面：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"></p>
<h2 id="创建iOS应用"><a href="#创建iOS应用" class="headerlink" title="创建iOS应用"></a>创建iOS应用</h2><p>选择 add first app，会进入创建应用页面，选择自己的Bitrise账号，然后选择Private后继续：<br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>下一步是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的iOS应用代码库 <strong>sample-apps-ios-simple-objc</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/24/835XDmsRhif7PCl.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/24/XJkaPhegf62cK1Y.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现iOS图标，说明它被识别为一个iOS app，完成后我们选择 app-store 为导出方式：<br><img data-src="https://i.loli.net/2021/05/24/XuqvxZcNVnSl5LE.png" alt="image.png"><br>编辑以下设置，然后点击confirm后继续：<br><img data-src="https://i.loli.net/2021/05/24/lvsUiuCqImEkZga.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/24/zNgWhZAep1suL8t.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/24/R1lQBKVOtpTN9JX.png" alt="image.png"></p>
<h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/24/pDifPg2hGw9ROcl.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p>
<h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-ios-simple-objc</strong> 这个代码库。</p>
<h3 id="添加Simulator"><a href="#添加Simulator" class="headerlink" title="添加Simulator"></a>添加Simulator</h3><p>第三步是启动模拟器，就像在本地运行测试一样，我们需要用模拟器执行测试。由于模拟器启动很慢，所以把它放在第三步，可以利用上面的方法搜索到这一步，然后修改Device Model、OS version、Platform，这三个值分别对应测试代码库文件 ios.conf.js 里的deviceName、platformVersion、platformName，在我的代码库里它就对应下图的值:<br><img data-src="https://i.loli.net/2021/05/24/Qr9CitX4TwjNEae.png" alt="image.png"></p>
<p>我们先保留以上三步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/24/eJPU6g3AQf52cHy.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/24/6bvo2qVZQJiLUrM.png" alt="image.png"></p>
<h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/24/YJTKr2nZFby1P6j.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/24/FWTqsZHCjLbR3p5.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/24/mzqBDbnFk3ew2rx.png" alt="image.png"><br>然后需要改一下代码库里ios.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/24/pFK1HIQv2aDBmiR.png" alt="image.png"></p>
<h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/HSrBmEPCRUysTuD.png" alt="image.png"></p>
<h3 id="配置WebDriver-Agent"><a href="#配置WebDriver-Agent" class="headerlink" title="配置WebDriver Agent"></a>配置WebDriver Agent</h3><p>还是搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/XBCVvrxsTWOpLIl.png" alt="image.png"></p>
<h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/D1iT3QGEnmtxu4d.png" alt="image.png"><br>其实上边几步是可以合到一步的，但为了方便定位错误，我们分的越细越好。这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，这样我们就可以通过Terminal或者Screen sharing连接到Bitrise的远程机器了，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/24/HLoqAcZhWnmKfTv.png" alt="image.png"></p>
<ul>
<li>Screen Sharing方式<br>Mac电脑搜索Screen Sharing，然后按照上图提供的地址和用户名密码连接即可，不用保存密码，因为每次运行地址和密码信息都不一样：<br><img data-src="https://i.loli.net/2021/05/24/LkcajHwsOi2NGdJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/2XTuhMC4RzvL1dj.png" alt="image.png"><br>连接成功后，可以看到模拟器已经启动并安装好了测试app：<br><img data-src="https://i.loli.net/2021/05/24/owjWUS7AJXz2CcO.png" alt="image.png"></li>
<li>Terminal方式<br>按照Bitrise提供的地址和密码连接即可，但只能通过命令行访问，不能直观的看到机器：<br><img data-src="https://i.loli.net/2021/05/24/UClrYfRTsPz9pvN.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/8tuIP7OLKgi5b3R.png" alt="image.png"></li>
</ul>
<p>可以看到测试已经开始运行，并尝试连接模拟器：<br><img data-src="https://i.loli.net/2021/05/24/SqhAMYJP6HG91KL.png" alt="image.png"><br>然而，在Bitrise远程机器上启动模拟器太慢了，即使我们把初始化simulator的步骤放在第三步，但无法确定它是否成功启动，所以在执行测试时也经常连不上模拟器。只能延长等待时间或者重试次数(这里会重试前10次，每次5分钟左右)，但也还是经常连不上，然后测试就会挂掉，目前我没找到解决方式(也可能是我网络太差或者bitrise免费版会有一些限制)，这算是一个痛点了，在我之前的Build里，只有两次测试执行成功：<br><img data-src="https://i.loli.net/2021/05/24/reWRbGQHMacCt72.png" alt="image.png"></p>
<h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/24/4ZJHWCGgRUzjb8m.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/24/k1DOBazSQie7v2R.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>成功：<br><img data-src="https://i.loli.net/2021/05/24/qQFKNkY5IfhjuTO.png" alt="image.png"><br>失败：<br><img data-src="https://i.loli.net/2021/05/24/wvBzbI3ya4tWUHQ.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Bitrise</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AppUI自动化测试第三弹-Android篇</title>
    <url>/AppUI-AutoTest-3/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/05/25/f8GPuvCgVNoA61q.png" alt="image.png"></p>
<p>上篇博客我们完成了测试代码库在iOS平台的CI集成，这篇文章继续讲Android平台。没有看过前几篇的同学也不用担心，可以先fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p>
<h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>刚注册Bitrise的小伙伴可以选择standard plan -&gt; add first app：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"><br>或者回到Dashboard页面，点击Add new app，选择第一项，就会出现创建App页面：<br><img data-src="https://i.loli.net/2021/05/24/daeLy83u7s15xvJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>选择Privare后继续，然后是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的Android应用代码库 <strong>sample-apps-android-sdk22</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/26/KHQy36Wuvdk9mqX.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/26/X9xa5heLAZbzSrk.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现Android图标，说明它被识别为一个Android app，完成后我们直接点击Next&amp;Next&amp;Confirm走完这一步：<br><img data-src="https://i.loli.net/2021/05/26/v8qybjcYhpX5wFJ.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/26/V4r95zG1pHQkDBP.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/26/2LIiTUCwEjbG1lu.png" alt="image.png"></p>
<h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p>
<h3 id="添加Emulator并等待启动"><a href="#添加Emulator并等待启动" class="headerlink" title="添加Emulator并等待启动"></a>添加Emulator并等待启动</h3><p>第一步是启动模拟器，由于模拟器启动很慢，所以把它放在第一步。且与iOS不同，Bitrise给Android emulator提供了等待启动的步骤，这样就不用担心模拟器连不上了。可以利用上面的方法在ALL选项里搜索到这一步，然后修改API Level, 这个值对应测试代码库文件 android.conf.js 里的platformVersion(10就是29，11就是30)：<br><img data-src="https://i.loli.net/2021/05/26/Qt6iFbkRIJjZMVq.png" alt="image.png"><br>这一步不需要改动：<br><img data-src="https://i.loli.net/2021/05/26/nZP1lfE2az4DyCo.png" alt="image.png"></p>
<h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-android-sdk22</strong> 这个代码库：<br><img data-src="https://i.loli.net/2021/05/26/ZWX6gSilAVazqDu.png" alt="image.png"></p>
<p>我们先保留以上四步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/26/XtOwQhn29dKgubN.png" alt="image.png"></p>
<h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/26/2iJ5YMVmqOUFKsD.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/26/qgQIob1tMZDPNjx.png" alt="image.png"><br>然后需要改一下代码库里android.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/26/Jj6OA1CUcwlz5Zo.png" alt="image.png"><br>与iOS不同，在Bitrise配置时，这里deviceName的值不是某个具体设备名称，比如“iPhone 11”，而是固定的“emulator”。</p>
<h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/Va9m3KDYjM6RTv4.png" alt="image.png"></p>
<h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/NDQk2PqSUI3vceo.png" alt="image.png"><br>这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，与iOS不同，Bitrise只给安卓提供了通过Terminal连接Bitrise的远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="image.png"><br>按照Bitrise提供的地址和密码连接即可(每次运行地址和密码都会变)，但只能通过命令行访问，不能直观的看到机器，可以看到我们的测试代码库：<br><img data-src="https://i.loli.net/2021/05/26/FfLzO8Amj7BdxoN.png" alt="image.png"><br>耐心等待，测试就会开始执行并且运行成功，虽然不能通过screen sharing连接服务器直观看到测试执行，但有了等待模拟器的步骤，只要测试代码没有问题，运行速度会很快且成功率高：<br><img data-src="https://i.loli.net/2021/05/26/Bk1JX5f4GgNlc38.png" alt="image.png"></p>
<h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/26/qP6WtDV8L7OAIzl.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/26/u9ScPnVjtvyi57K.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>忽略这个iphone11的名字哈，不知道为啥会带上这个，本来应该是android-emulator之类的开头，不过不要在意这些细节哈哈哈，成功了就行：<br><img data-src="https://i.loli.net/2021/05/26/1scBq5ml7w4nAzO.png" alt="image.png"></p>
<h2 id="结束之后"><a href="#结束之后" class="headerlink" title="结束之后"></a>结束之后</h2><p>AppUI自动化入门系列到这里就结束啦，不知不觉已经写了一万多字呢，虽然是机器写的，但是手也很酸呐哈哈哈。希望能给大家带来一些新知识和新启发，测试君冲鸭！！！</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Bitrise</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>AppUI自动化测试第一弹</title>
    <url>/AppUI-AutoTest/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/05/19/AwIHB8nugEVPGRz.png">

<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>博主之前有文章介绍了<a href="https://jmyblog.top/WebUI-AutoTest-Demo-1/">WebUI自动化</a>，但相较于Web端，App的使用场景更多。所以博主又开发了系列课程，共4篇博客，带大家从0到1开始简单的AppUI自动化测试，并且将测试代码集成到CI，难度为入门级别，包含iOS和Android两个平台，内容详尽，包教包会哦(是和之前WebUI自动化博文一样，看也能看懂的程度哈哈哈哈)，本篇主要带大家配置环境，然后创建测试项目。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><span id="inline-toc">1.</span> 首先，你需要有一个IDE，推荐使用<a href="https://code.visualstudio.com/download">VS Code</a>。<br><span id="inline-toc">2.</span> <a href="https://developer.apple.com/download/more/">下载安装</a> Xcode(12.0.1)和Xcode command line tool(12.2 beta2)，直接下载后按照提示安装即可，这两个工具是为了iOS平台的自动化。安装可能需要一些时间，可以同时进行下边的步骤。<br><span id="inline-toc">3.</span> 下载 <a href="https://developer.android.com/studio">Android Studio</a> ，这是一个开发App的IDE，但我们不用它写代码，只是用它里边的一个工具，是为了Android平台的自动化。下载后打开以下设置确保sdk location正确：<br><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br><span id="inline-toc">4.</span> 使用命令下载homebrew，这是一个下载工具，可以帮助下载别的依赖：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span><br></pre></td></tr></tbody></table></figure>
<p>然后执行 <mark class="label info">export HOMEBREW_NO_AUTO_UPDATE=true</mark> ，这样就不会每次用homebrew下载东西的时候它都自动更新了，最后执行 <strong>brew -v</strong> 检查你是否安装成功。<br><span id="inline-toc">5.</span> 使用brew下载node：<strong>brew install node</strong><br><span id="inline-toc">6.</span> 使用brew下载jdk，依次执行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">brew tap AdoptOpenJDK/openjdk</span><br><span class="line">brew cask install adoptopenjdk11</span><br></pre></td></tr></tbody></table></figure>
<p><span id="inline-toc">7.</span> 使用brew下载carthage：<strong>brew install carthage</strong><br><span id="inline-toc">8.</span> 下载 <a href="https://github.com/appium/appium-desktop/releases/tag/v1.20.2">Appium desktop</a><br><span id="inline-toc">9.</span> 下载 Appium-Doctor：<strong>npm install -g appium-doctor</strong><br><span id="inline-toc">10.</span> 所有依赖都已经下载完啦，然后我们来设置环境变量，打开你本地的 .bash_profile 或者 .zshrc 文件，没有就新建一个，之后输入下边的设置，直接粘贴改动即可：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export ANDROID_HOME=path/to/your/Android sdk (eg:/Users/usr/Library/Android/sdk)</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk</span><br><span class="line">export PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">AAPT_HOME=/path/to/your Android sdk build-tools (eg:/Users/usr/Library/Android/sdk/build-tools/28.0，这里的28.0是我本地的版本，你需要打开对应目录查看自己的版本然后修改。)</span><br><span class="line">export AAPT_HOME</span><br><span class="line">export PATH=$PATH:$AAPT_HOME</span><br></pre></td></tr></tbody></table></figure>
<p>保存后执行 <strong>source .bash_profile</strong> 或者 <strong>source .zshrc</strong> 使配置生效。<br><span id="inline-toc">11.</span> 最后执行 <strong>appium-doctor</strong> 命令查看你的环境是否已经准备完成，necessary的部分全部打绿勾就可以啦，如果上边的部分都做完了，应该是没有 ❌ 的，否则就要看对应的报错然后自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/20/DL9UPqaNYrgnGsQ.png" alt="appium-doctor.png"></p>
<h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>环境准备好了，就可以着手开始创建测试项目了，这里我们使用 <a href="https://webdriver.io/docs/what-is-webdriverio">WebdriverIO</a> 来帮助我们初始化一个可以进行App自动化测试的项目，首先新增一个文件夹，之后进入该文件夹依次执行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm init –y //在文件夹里生成一个package.json文件，记得之前WebdriverIO会默认生成的，后来好像没了，就自己手动添加一个</span><br><span class="line">npm install --save-dev @wdio/cli //下载帮助我们初始化项目的wdio工具</span><br></pre></td></tr></tbody></table></figure>
<p>然后执行 <strong>npx wdio config</strong> 进入项目的初始化步骤，之后该程序会让我们选择各种自动化测试的工具和规范，比如选择测试框架、PageObject、测试报告类型、测试服务端等等，非常全面。这里我们按下边的设置来初始化我们的项目(上下键切换选项，空格键选中/取消选中选项，enter键选择)：</p>
<p><img data-src="https://i.loli.net/2021/05/20/oJhBqNp4asPAljC.png" alt="config.png"></p>
<p>如果把一个 <a href="https://jmyblog.top/AutoTest-FrameWork/">自动化测试框架</a> 比做车辆，那WebdriverIO就像是一个造车工厂，用各种不同的零件构造出各式各样的自动化测试框架。<br>完成后的项目结构应该如下图：<br><img data-src="https://i.loli.net/2021/05/20/p8ZGHsWCD5nPjbS.png" alt="project.png"><br>其中有默认的测试代码示例，相关依赖也已经写入package.json里。</p>
<div class="note info"><p>观察示例代码，不难发现它使用的语言是javascript；采用pageobject模型，有示例的公共页面page.js、登陆页面login.page.js，login页面中还给出了selector和function的示例定义方法，所有页面都放在pageobjects文件夹中；一般我们会把所有页面的公共方法放在page.js；specs文件夹里有一个示例的e2e测试文件，在此文件中会引入各个页面并使用其方法编写测试步骤，describe/it/await等都是mocha框架的关键字。</p>
</div>

<p>我们需要再做一些改动使项目结构更加标准，在根目录新增app和config文件夹，然后把wdio.conf.js文件放入config文件夹中，app文件夹将用来存放测试app，改动之后的项目结构：</p>
<img data-src="https://i.loli.net/2021/05/20/T2DvQJGWrgsYqlH.png" width="200" height="280">]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>WebdriverIO</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈自动化测试框架</title>
    <url>/AutoTest-FrameWork/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/15/yHdcTpMbsvJB2zh.jpg">


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年公司有资深测试同事分享了如何搭建一个好的自动化测试框架Session，听了以后特别受启发。<br>入职以来一直都是用着项目上现成的框架使用，平时也只是写写测试代码，搬搬砖。虽然也有想过深入了解一下，但因为拖(lan)延(ai)症一直没实践<span class="emoji" alias="see_no_evil" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8">🙈</span><br>恰好最近QA小姐姐们组织了一个搭建自动化测试框架的workshop，自己走了一下流程，感触更深了，所以想结合去年的Session内容总结一下，这样以后也可以参考。</p>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>写过自动化测试的小伙伴们一定接触过诸如Selenium/Appium/..的自动化测试工具，这类UI测试工具提供了定位、操控页面元素的功能，从而实现UI自动化。<br>这些工具也内嵌了失败重试、智能等待机制，所以它们也叫做<mark class="label default">"自动化测试框架"</mark>，但一个完善的自动化测试框架，仅仅做到这些是远远不够的，所以它们只是<strong>自动化测试框架的MVP版本</strong>。</p>
<h3 id="自动化测试框架的MVP版本"><a href="#自动化测试框架的MVP版本" class="headerlink" title="自动化测试框架的MVP版本"></a>自动化测试框架的MVP版本</h3><p>怎么理解自动化测试框架的MVP版本呢？</p>
<p>试想要生产一辆交通工具，从造轮子开始到成品需要下边几个过程，这样才能成功：</p>
<im src="https://i.loli.net/2020/05/14/sVS2y3nXflDgowB.png">

<p>如果把搭建自动化框架类比成生产交通工具的过程，那上述的Selenium/Appium/..等<mark class="label default">"自动化测试框架"</mark>相当于只是一辆自行车，离我们想要的大货车(完善的自动化测试框架)差距还比较大：</p>
<img data-src="https://i.loli.net/2020/05/14/jCBKgVplGJZkM1n.png">

<p>以Web UI自动化为例，一般来说，MVP版本的自动化测试框架结构如下：</p>
<img data-src="https://i.loli.net/2020/05/14/3iMYrD2jC8R7O5U.png" alt="题图" height="370" width="400">

<div class="note info"><p>基本做法是：写好一条test case, 里面定位了页面元素，定义元素行为。最后利用WebDriver 实现测试目标。</p>
</div>

<p>比如下面利用Selenium在百度搜索selenium字符串的代码：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">public void searchSelenium() { </span><br><span class="line">       System.setProperty("webdriver.gecko.driver", "drivers/geckodriver");</span><br><span class="line"></span><br><span class="line">       WebDriver driver = new FirefoxDriver();</span><br><span class="line"></span><br><span class="line">       driver.manage().window().maximize();</span><br><span class="line">       driver.get("https://www.baidu.com/");</span><br><span class="line">       driver.findElement(By.id("kw")).clear();</span><br><span class="line">       driver.findElement(By.id("kw")).sendKeys("selenium");</span><br><span class="line">       driver.findElement(By.id("su")).click();</span><br><span class="line">       driver.quit();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<br>

<h3 id="自动化测试框架的完善版本"><a href="#自动化测试框架的完善版本" class="headerlink" title="自动化测试框架的完善版本"></a>自动化测试框架的完善版本</h3><br>
<br>

<p>还是以Web UI自动化为例，一般来说，相对完善的自动化测试框架结构如下：</p>
<img data-src="https://i.loli.net/2020/05/14/tTnUyI9VsHY4N1q.png">

<p>可以看到，跟MVP版本相比，相对完善的自动化测试框架结构还多了Test Suite/Middle layer等元素，下面我们来说一下这些元素指的是什么。<br><br></p>
<br>


<p><span id="inline-toc">1.</span> Test Suite</p>
<br>

<p>允许将测试代码中公用的数据比如浏览器，测试url等等提出来放在单独的文件中，便于进行测试环境转换、DDT(Data<br>Driven Testing)、KDT(Keyword Driven Testing)等Good<br>practice，TestNG等工具就可以实现这一点，还可以利用Page Object实现结构化目录。</p>
<br>
<br>

<p><span id="inline-toc">2.</span> TestCase&amp;MiddleLayer</p>
<br>

<p>好的框架也需要支持易用的Assertion、Error handling、Preposition &amp;<br>Postposition机制。还应该实现BDD(Business/Behavior Driven<br>Development)，写出更语义化的测试代码，Cucumber就是一个支持BDD的测试工具。</p>
<br>
<br>


<p><span id="inline-toc">3.</span> Element Object/Locator definition</p>
<br>

<p>测试框架应该支持多种定位页面元素的方法，比如根据元素属性(Id, CSS,<br>xPath…)定位，也有支持图像识别/像素识别来定位元素的工具，比如网易就有开发一些此类型的工具，常用于游戏测试。</p>
<br>
<br>

<p><span id="inline-toc">4.</span> Operation Driver</p>
<br>

<p>UI测试工具经常用到WebDriver来操控页面元素，所以一个好的测试框架应该提供稳定的操作WebDriver的方法，还需要兼容不同的浏览器和操作系统。并能提供开放接口，允许用户添加自定义的WebDriver操作方法。</p>
<br>
<br>

<p><span id="inline-toc">5.</span> Utilities</p>
<br>

<p>需要提供一些实用的机制和工具，比如提供日志、智能等待机制，还有对文件/数据库/网络/OS的操作，此外，还要支持模拟器和截图功能。</p>
<br>
<br>


<p><span id="inline-toc">6.</span> Assistance</p>
<br>

<p>自动化框架还需要有更多辅助功能，比如CI/CD的集成、并行机制、失败重试机制，以及输出漂亮的测试报告。</p>
<br>
<br>


<div class="note primary"><p>总的来说，一个完善的自动化测试框架应该是灵活的、稳定的，而且是容易维护的，全面考虑上边这6个元素会帮助我们达到这个目的。<br>然而，现在我们熟知的一些“自动化测试框架”比如selenium, Cucumber, TestNG等等，都只涵盖了这6大要素的部分功能。所以更多的时候，一个完善的自动化测试框架会是多个工具的集合，比如Selenium+Cucumber+GoCD, Selenium+TestNG+Jenkins等等，具体选择什么工具要看实际情况。<br>这样我们就能生产出拉风的大货车啦：</p>
</div>

<img data-src="https://i.loli.net/2020/05/14/8xZPSG624mRkAaL.png">


<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>设计搭建自动化测试框架是<mark class="label warning">测试架构师</mark>或者<mark class="label warning">高级测试工程师</mark>们重点关注的内容，这当然不是一件容易的事。 </p><div class="note primary"><p>首先需要收集项目自身的编程语言、平台、系统架构、预算等相关信息，然后拿着这些信息再综合考虑上边列出的6大要素进行技术选型，这需要测试架构设计者在每个要素中，都至少熟悉1-2种测试工具，有的方面还需要熟悉2-3种，然而这并非一日之功，尽管有的功能涵盖了多个要素。<br>而搭建过程中用到的构建部署工具，比如Maven/Gradle/…，也是测试架构设计者需要熟悉的。<br>所以一个测试工程师，需要在多方面有所涉猎，且熟悉多种测试工具，才可以根据项目情况设计出最适合的自动化测试框架。</p><p></p>
</div> 

<p>同时，不同的测试方式，也需要有不同的自动化测试框架。上边我们只以WebUI自动化为例，提到了常用的Selenium/Appium。那对于别的测试方式，比如性能测试而言，也有它自己的自动化测试工具。所以，学海无涯呀，我们只能苦作舟了<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<p>虽然要”苦作舟”，但我们也不用太慌，正如编程语言都是共通的一样，同一领域的测试工具也都是共通的，所以只有在我们学习新领域的工具时才会”苦作舟”，熟悉了一个工具之后，再去看相似的工具，就会轻松很多，也会很容易的对比多个工具的优劣了<span class="emoji" alias="muscle" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>同事去年讲Session的PPT…</li>
</ul>
</im>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>请收下这波 BDD 安利</title>
    <url>/BDD-Introduce/</url>
    <content><![CDATA[<p>首先，听我讲一个关于王铁锤的故事。</p>
<span id="more"></span>

<h1 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h1><p>新的Sprint开始了，产品经理/BA 王铁锤召集全组开会<span class="emoji" alias="speech_balloon" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8">💬</span>。</p>
<p>**[王铁锤]**：这个Sprint咱们有个新需求，在网站上做一个用户注册登录功能。现在我来给大家说一下UserStory和AC都有啥。(PS:不知道UserStory, AC(Acceptance Criteria)和Sprint是啥意思的，你需要看看<a href="http://www.scrumcn.com/agile/scrum-knowledge-library/scrum.html#tab-id-2">敏捷术语</a>)<br>20分钟后。。。<br>**[王铁锤]**：大家有什么问题吗？<br>**[众组员]**：没问题了<span class="emoji" alias="ok_hand" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8">👌</span>。<br>**[王铁锤]**：好，散会。<br>2天后。。。<br>**[测试刘翠花]**：咦，李狗蛋，你做的登录页面密码输入框怎么没掩码？密码错了也没个提示？！还有你赵二毛，你做的注册功能还能注册两个一样的用户名？密码长度格式也没限制？！这不符合常理吧，这界面也太丑了点<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>!<br>**[程序员李狗蛋]**：呀，我咋把掩码忘了，错误提示没说要做呀，别着急，我再看看UserStory是咋说的，咦，上边没写<span class="emoji" alias="sweat" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8">😓</span>？！<br>**[程序员赵二毛]**：唉，这种情况还真没想过，得处理一下，UserStory里也没说这种情况咋整啊，还有密码长度格式上边也没说规则。<br>**[刘翠花]**：这问题也太多了，当时开会咋就没想到这些呢<span class="emoji" alias="confused" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8">😕</span>，直接按老王给的UserStory做了。不行，我们得去找他问问。<br>3分钟后。。。<br>**[王铁锤]**：呀，这些东西我创建UserStory的时候也没想到。嗯，我得去完善完善。界面显示问题我去找设计师看看。你们等一下。<br>两周过去了。。。<br>**[王铁锤]**：怎么样，这个功能做好了吗？客户那边等着呢<br>**[众组员]**：不行啊老大，我们还有一堆需求和问题没搞清楚，想跟你确认呢<br>**[王铁锤]**：这咋行呢，原计划这周就得上线呀， 唉，都有啥问题，我再看看吧<br>一个月后，经过王铁锤和众组员的数次沟通确认，功能终于做好了，比原计划推迟两周上线。。。<br>**[刘翠花]**：唉，上线后肯定又有一堆问题，到时候背锅的就只有我了</p>
<hr>
<h1 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h1><p>新的Sprint开始了，产品经理/BA 王铁锤召集全组开会。</p>
<p>**[王铁锤]**：下个Sprint咱们有个新需求，在网站上做一个用户注册登录功能。首先讲一下我和客户拟好的用户流程和场景。<br>5分钟过去了。。。<br>**[王铁锤]**：相信大家对这个功能已经有了初步的了解，一定也有一些想法。所以在拆分具体的UserStory之前，我想先组织大家玩个小游戏。<br>**[李狗蛋]**：玩游戏？这么嗨的吗<span class="emoji" alias="smirk" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span>，我喜欢。怎么玩啊？<br>**[王铁锤]**：假设你是用户，列出所有你能想象到的关于注册登录的用户行为场景。并写下这些场景中你希望的系统行为<span class="emoji" alias="sunglasses" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span>。包括但不限于我刚才讲到的场景哦，大家开始吧～<br>10分钟后。。。<br>**[王铁锤]**：我看大家都写好了，下面咱们一条一条过，拼凑出一个正常的用户操作流程，然后把相似的场景提取出来，讨论一下哪种方案更好。首先让赵二毛给大家讲下他的场景：</p>
<ul>
<li>Step1: 进入系统首页，跳出登录注册弹窗.</li>
<li>Step2: 点击注册按钮进去注册页面。</li>
<li>Step3: 填写所有字段并点击注册。</li>
<li>Step4: 弹出注册成功页面，3秒后返回系统首页，用户状态为已登录。</li>
</ul>
<p>**[赵二毛]**：对，这里我写的是一个注册成功的场景，当然里面还有很多小点需要确认。比如说Step1、Step2、Step4中登录注册页面,以及注册成功页面的前端显示，需要设计稿。还有Step3中的字段需要在设计稿中体现，还需要一些字段的长度格式以及必填规则。Step4中注册成功后有一个3秒的返回延迟，还有返回首页后的登录状态，都是细节问题。<br>**[刘翠花]**：哇塞，二毛，平时看你写代码也没这么细心啊，想不到你还考虑的这么细多，真棒！<br>**[李狗蛋]**：二毛写的确实好，基本上涵盖了整个注册流程，跟我写的有很多相似之处。下面我来说说我们的不同点，其他人也可以提出自己的看法。<br>30分钟后。。。<br><strong>[王铁锤]<strong>：好，大家已经讨论完了。对很多细节和功能已经达成了共识。当然还有一些问题我需要跟客户沟通，寻求他们的意见。很感谢大家提出的思路，很多场景我之前都没有考虑到。比如</strong>刘翠花</strong>提到的密码输入次数限制问题，狗蛋和二毛也从代码方面提供了自己的想法。我受益良多<span class="emoji" alias="clap" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8">👏</span>。对于我们在功能方面达成的共识，还有一些需要确认的问题，已经拍照留存，我之后会整理好给大家分享，散会～<br>2天后。。。<br>**[王铁锤]**：前两天大家讨论了下注册登录模块的具体流程，其中包含要实现的功能和细节。设计图和一些遗留的问题我都确认过了，并且写好了UserStory还有AC。接下来大家对比上次会议结果一起看一下。确认大家的理解一致，没有遗漏的点。<br>20分钟后。。。<br>**[王铁锤]**：大家有什么问题吗，我有没有漏掉什么点？<br>**[众组员]**：没问题了<span class="emoji" alias="ok_hand" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8">👌</span>。<br>**[王铁锤]**：好，看来都清楚了，散会～<br>一个月后，由于大家对登录注册功能的实现细节已经达成了一致。不仅比原计划提前一周完成，还提出了更多可以改进的功能，得到了客户的赞赏和肯定。</p>
<hr>
<h1 id="啥是BDD"><a href="#啥是BDD" class="headerlink" title="啥是BDD"></a>啥是BDD</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>相信通过上边的例子，大家心里应该知道BDD是啥意思了。</p>
<p>BDD行为驱动开发(Behaviour-Driven Development)<br>是一种软件开发流程，这里’行为’指用户行为。’开发’指整个开发团队。顾名思义，BDD要求开发团队严格按照具体的、符合现实情况的用户行为进行开发，不断减小项目组成员在业务与技术两方面的理解差异，使团队对软件应该有的行为达成一致。</p>
<h2 id="BDD与敏捷"><a href="#BDD与敏捷" class="headerlink" title="BDD与敏捷"></a>BDD与敏捷</h2><p>我们知道，<a href="http://jmyblog.top/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E6%B5%8B%E8%AF%95/">敏捷</a>是现在最流行的软件开发框架，可以快速、稳定的进行软件开发。而BDD相当于是这个框架一个强有力的插件，能够帮助我们更高效地实现敏捷开发的目标。</p>
<p>就像上边故事的两个版本，都实行了敏捷实践。但版本二中的团队同时实行了BDD，因此产生了更好的结果。</p>
<h2 id="类似定义对比"><a href="#类似定义对比" class="headerlink" title="类似定义对比"></a>类似定义对比</h2><ul>
<li>TDD: 测试驱动开发，敏捷开发的特点之一，概念上与BDD同级。但在实行过程中，团队必须在保证TDD的基础上施行BDD，否则只能是捡了芝麻丢了西瓜。</li>
<li>FDD: 功能驱动开发，是一种敏捷开发流程，概念上在BDD上级。</li>
</ul>
<h1 id="为什么要BDD"><a href="#为什么要BDD" class="headerlink" title="为什么要BDD"></a>为什么要BDD</h1><h2 id="没有BDD以前-版本一"><a href="#没有BDD以前-版本一" class="headerlink" title="没有BDD以前(版本一)"></a>没有BDD以前(版本一)</h2><p>技术人员(程序员/测试)对整个用户流程不熟悉，只分散开发具体的功能，没有产生业务价值的连通性，容易对需求理解产生歧义。<br>业务人员(产品经理/BA)对功能具体实现流程不熟悉，影响下一步需求的提出和产品交付。<br>两种角色对用户流程和业务需求的理解不一致，容易导致产品返工，而且需要浪费更多时间相互沟通。</p>
<h2 id="有了BDD以后-版本二"><a href="#有了BDD以后-版本二" class="headerlink" title="有了BDD以后(版本二)"></a>有了BDD以后(版本二)</h2><p>项目组成员对用户流程、开发顺序以及实现细节有一致的理解，可以更快速高效的交付产品。</p>
<hr>
<h1 id="怎么做BDD"><a href="#怎么做BDD" class="headerlink" title="怎么做BDD"></a>怎么做BDD</h1><p>要做好BDD，需要三步实践。</p>
<h2 id="探索：做什么"><a href="#探索：做什么" class="headerlink" title="探索：做什么"></a>探索：做什么</h2><p>第一步，开个会大家商量一下要做啥，执行者是整个团队。</p>
<p>还记得上边王铁锤让大家玩的游戏吗？其实这个游戏有个洋气的名字，叫做：<strong>Discovery Workshops</strong>。不像之前王铁锤直接拆分好UserStory告诉大家，DiscoveryWorkshops的关键在于让大家聚焦真实、具体的用户场景，一起决定业务规则和验收标准。动员大家去发现、定义系统该怎么工作。这么做的好处有：</p>
<ul>
<li>把团队不同角色对功能的理解误差暴露出来</li>
<li>BA/产品经理可以确认开发团队完全理解业务规则和细节</li>
<li>帮助BA/产品经理更好的确定UserStory的粒度</li>
<li>有了测试人员的介入，可以帮助预防一些bug的产生，而不是在产品开发完后再去找同样的bug。</li>
</ul>
<p>要做好这个Workshops，有几点很重要：</p>
<ol>
<li>在功能开发前的一两个Sprint进行。</li>
<li>从用户角度出发，关注具体、真实的业务场景。</li>
<li>总结大家对业务细节的不同看法和问题，暂时不能解答的要确认后再通知大家。</li>
</ol>
<h2 id="记录：怎么做"><a href="#记录：怎么做" class="headerlink" title="记录：怎么做"></a>记录：怎么做</h2><p>第二步，用程式化的文档把讨论结果记录下来，执行者一般为BA/产品经理。</p>
<p>在敏捷里，其实就是把讨论结果拆分成UserStory，并把验收标准写在UserStory中。然后再组织大家开个会，确认一下有没有遗漏的问题。这样做的好处有：</p>
<ul>
<li>提供一种快速的方法，再次确认大家的理解一致。</li>
<li>对UserStory的粒度和验收标准得到更多的反馈。</li>
</ul>
<h2 id="检验：做了啥"><a href="#检验：做了啥" class="headerlink" title="检验：做了啥"></a>检验：做了啥</h2><p>第三步，根据拆分好的UserStory和验收标准，把不同用户场景编写成自动化测试，执行者一般为测试人员。</p>
<p>其实对于测试人员而言，这种是理想情况，因为在实际开发过程中，可能没有足够的时间来提前写好自动化测试。但最好还是在开发结束之前写好，这样做的好处有：</p>
<blockquote>
<p>帮助团队跟踪功能完成度</p>
</blockquote>
<p>好的自动化测试应该涵盖主要业务流程和场景。所以在开发工作完成前，失败的测试可以发现bug,也可以时刻提醒团队有哪些功能还没有开发完成。就像TDD，可以帮助开发在class,method层面发现问题。</p>
<blockquote>
<p>减少测试工作量</p>
</blockquote>
<p>像所有自动化测试的优点一样，它可以大大减少手工测试的工作量，后期还可以用来做回归测试。因此测试人员会有更多时间做更有价值的事情，比如关注一些不能自动化的功能、探索性测试、准备下一个功能用户场景的自动化等等。</p>
<blockquote>
<p>系统功能维护和查询</p>
</blockquote>
<p>好的自动化测试也应该像一份业务文档。有时候我们忘记了之前某些功能的业务规则是什么，就可以通过查询关于此功能的自动化测试找到答案。或者团队需要对某个功能进行维护或重构，也可以查看自动化测试，看看它现在是怎么工作的，与它相关的功能还有哪些，以确保不会影响别的功能。</p>
<hr>
<h1 id="对BDD的常见误解"><a href="#对BDD的常见误解" class="headerlink" title="对BDD的常见误解"></a>对BDD的常见误解</h1><h2 id="不需要做Discovery-Workshops"><a href="#不需要做Discovery-Workshops" class="headerlink" title="不需要做Discovery Workshops"></a>不需要做Discovery Workshops</h2><p>如果没有一个大家一起探索功能的过程， 那就不叫BDD了。就像故事的版本一，所有的User Story都由一个人(BA/产品经理)发现并编写，这就违背了BDD的灵魂：共享理解。</p>
<h2 id="三步实践的顺序可以调换"><a href="#三步实践的顺序可以调换" class="headerlink" title="三步实践的顺序可以调换"></a>三步实践的顺序可以调换</h2><p>如果没做Discovery Workshops，那直接拆分UserStory就是在浪费时间。如果没有拆分好UserStory，确认好验收标准，也就不能编写自动化测试了。所以，这三部实践必须按顺序做，否则不会达到我们想要的结果。</p>
<h2 id="代码写完后再写自动化测试"><a href="#代码写完后再写自动化测试" class="headerlink" title="代码写完后再写自动化测试"></a>代码写完后再写自动化测试</h2><p>其实现在大多数情况，都是等代码写完之后再进行自动化，这当然很合理。但这样也就不是BDD了。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://cucumber.io/docs/bdd/myths/" title="Myths about BDD">Myths about BDD</a></li>
<li><a href="https://cucumber.io/docs/guides/bdd-tutorial/" title="BDD Tutorial">BDD Tutorial</a></li>
<li><a href="https://cucumber.io/docs/bdd/" title="Behaviour-Driven Development">Behaviour-Driven Development</a></li>
<li><a href="https://www.bylinzi.com/2015/06/04/when-we-talk-about-bdd/">说起BDD，你会想到什么？</a></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>BDD</tag>
        <tag>敏捷</tag>
        <tag>王铁锤</tag>
      </tags>
  </entry>
  <entry>
    <title>站点的SEO优化</title>
    <url>/BlogSEO/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/04/23/MgrbW6S4h9tI1yf.png" width="600" height="400">

<p>虽然博客一直都有做SEO优化，但经常忘记细节，所以需要写篇博客记录一下，以后可以温故知新。</p>
<h2 id="百度SEO"><a href="#百度SEO" class="headerlink" title="百度SEO"></a>百度SEO</h2><h3 id="站点管理平台"><a href="#站点管理平台" class="headerlink" title="站点管理平台"></a>站点管理平台</h3><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站点管理平台</a>添加站点域名，然后验证站点。<br>验证站点有几种方式，包括下载文件验证，CNAME验证等，我做了CNAME验证：<br><img data-src="https://i.loli.net/2020/04/23/CPt9byQOAZ8fDBV.png">验证之后，就可以通过百度站点管理平台管理自己的网站了：<br><img data-src="https://i.loli.net/2020/04/23/krGdctXzCf7hjxM.png"></p>
<h3 id="博客内容推送"><a href="#博客内容推送" class="headerlink" title="博客内容推送"></a>博客内容推送</h3><div class="note warning"><p>由于Github对百度爬虫进行了屏蔽，因此百度是爬取不到Github上的页面的，如果你把网站也部署到了Coding上，那百度就可以抓取到。所以看下面的内容之前，需要确保网站部署到了coding。</p>
</div>
<p>在站点管理平台可以选择博客内容推送方式，自动和手动。自动推送有三种，我同时做了sitemap和主动推送(实时)两种方式。<br><span id="inline-toc">1.</span> Sitemap推送方式</p>
<blockquote>
<p>站点地图即sitemap，是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>
</blockquote>
<p>安装百度站点地图生成插件：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></tbody></table></figure>
<p>在博客根目录config文件添加配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure>
<p>然后执行<mark class="label info">hexo g -d</mark>，public目录里就会生成baidusitemap.xml文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这个文件来抓取网站页面。同时检查线上是否能打开，这里是我的<a href="https://jmyblog.top/baidusitemap.xml">baidusitemap.xml文件</a>。<br>然后提交线上链接到站点管理平台：<br><img data-src="https://i.loli.net/2020/04/23/DwL9Xf8JmRWVoF6.png">显示正常状态之后，Sitemap推送方式就安排上了。<br><span id="inline-toc">2.</span> 主动推送(实时)方式<br>主动推送最为快速的提交方式，是被百度收录最快的推送方式。通过安装插件实现：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></tbody></table></figure>
<p>安装结束后在博客根目录config文件添加配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 5 				     ## 提交最新的五个链接</span><br><span class="line">  host: www.93bok.com 	     ## 百度站长平台中注册的域名</span><br><span class="line">  token: xxx	             ## 准入秘钥</span><br><span class="line">  path: baidu_urls.txt 		 ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></tbody></table></figure>
<p>一定要确保_config.yml文件中url的值和百度站长平台注册的域名相同，我的全都是<a href="https://jmyblog.top/">https://jmyblog.top</a><br>然后在config文件远程部署配置部分，加上：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-  type: baidu_url_submitter	</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://i.loli.net/2021/06/03/iftVTs69SjhUZlc.png" alt="image.png"><br>然后执行<mark class="label info">hexo g -d</mark>，就可以实现每次部署自动推送文章啦：<br><img data-src="https://i.loli.net/2020/04/23/Z2LcdRlzXjutg4h.png" width="400" height="200"></p>
<div class="note info"><p>推送原理：<br>新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接<br>新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</p>
</div>

<h3 id="收录验证"><a href="#收录验证" class="headerlink" title="收录验证"></a>收录验证</h3><p>输入<mark class="label success">site: 域名</mark>，如果能在搜索结果中看到你的网站内容，就说明百度收录成功啦：<br><img data-src="https://i.loli.net/2020/04/23/kpSBwdDFtXmcbNJ.png"></p>
<h2 id="Google-SEO"><a href="#Google-SEO" class="headerlink" title="Google SEO"></a>Google SEO</h2><h3 id="站点管理平台-1"><a href="#站点管理平台-1" class="headerlink" title="站点管理平台"></a>站点管理平台</h3><p>和百度一样，谷歌也有 <a href="https://search.google.com/search-console/sitemaps">站点管理平台</a> (没有梯子请自备)，登录google账号之后同样添加站点域名，然后验证站点。<br>站点验证也有几种方式，下载文件验证，CNAME认证等等。由于我的CNAME认证失败，所以选择了下载文件验证，放在主题source文件夹即可，放在根目录应该也是可以的：<br><img data-src="https://i.loli.net/2020/04/23/lVcSnUo2JhNYXgI.png" width="420" height="500"><br>然后执行然后执行<mark class="label info">hexo g -d</mark>将新添加的文件推送到线上，点击验证，就可以通过谷歌站点管理平台管理自己的网站了：<br><img data-src="https://i.loli.net/2020/04/23/bOoYU7w5SvIzZj9.png"></p>
<h3 id="博客内容推送-1"><a href="#博客内容推送-1" class="headerlink" title="博客内容推送"></a>博客内容推送</h3><p>目前只做了sitemap推送方式，网上也大多是这种方式，不知道有没有其它方法。<br>安装谷歌站点地图生成插件：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></tbody></table></figure>
<p>在博客根目录config文件添加配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></tbody></table></figure>
<p>然后执行<mark class="label info">hexo g -d</mark>，public目录里就会生成sitemap.xml文件，这里是我的<a href="https://jmyblog.top/sitemap.xml">sitemap.xml文件</a>。<br>然后提交线上链接到谷歌站点管理平台：<br><img data-src="https://i.loli.net/2020/04/23/W4Ud5el38Y7pXt2.png">显示Success之后，Sitemap推送方式就安排上了.</p>
<h3 id="收录验证-1"><a href="#收录验证-1" class="headerlink" title="收录验证"></a>收录验证</h3><p>同样输入<mark class="label success">site: 域名</mark>，如果能在搜索结果中看到你的网站内容，就说明谷歌收录成功啦：<br><img data-src="https://i.loli.net/2020/04/23/4GxXKmyO1bAc7PN.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.93bok.com/Hexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E5%92%8CGoogle%E6%94%B6%E5%BD%95%E7%AB%99%E7%82%B9/">Hexo提交百度和Google收录站点</a></p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>升级博客，我太难了</title>
    <url>/BlogUpdateNote/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2019/12/20/ONr3WMz74Rq5mBQ.png" alt="题图">
用Hexo和Next主题搭建博客已经两年多了，前段时间浏览一些其他小伙伴的博客，发现页面比我的好看许多。很多插件也都不适应了，遂更新一波。

<h1 id="咋升级"><a href="#咋升级" class="headerlink" title="咋升级"></a>咋升级</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，来想一想都要更新什么。<br>第一个肯定是Hexo了。其次就是主题，我用的是Next。由于之前不仅更改了主题配置，还有一些插件和自定义配置改了源文件。最致命的是我已经忘记在哪改，改了啥了。所以：</p>
<div class="note warning"><p>升级之前，先把博客备份一下，这样即使更新过程中出了问题，也不用怕。</p></div>

<h2 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h2><p>博客根目录的package.json文件里，列出了hexo和一些依赖的版本(这是我已经升级过的)：</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: {</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.0.0"</span> ##当前Hexo版本</span><br><span class="line">  },</span><br><span class="line">  "dependencies": { ##各种插件版本</span><br><span class="line">    "hexo": "^4.0.0",</span><br><span class="line">    "hexo-algolia": "^1.3.1",</span><br><span class="line">    "hexo-deployer-git": "^2.1.0",</span><br><span class="line">    "hexo-filter-emoji": "^2.0.2",</span><br><span class="line">    "hexo-generator-archive": "^1.0.0",</span><br><span class="line">    "hexo-generator-baidu-sitemap": "^0.1.6",</span><br><span class="line">    "hexo-generator-category": "^1.0.0",</span><br><span class="line">    "hexo-generator-feed": "^2.1.1",</span><br><span class="line">    "hexo-generator-index": "^1.0.0",</span><br><span class="line">    "hexo-generator-searchdb": "^1.2.0",</span><br><span class="line">    "hexo-generator-sitemap": "^2.0.0",</span><br><span class="line">    "hexo-generator-tag": "^1.0.0",</span><br><span class="line">    "hexo-helper-live2d": "^3.1.1",</span><br><span class="line">    "hexo-leancloud-counter-security": "^1.4.1",</span><br><span class="line">    "hexo-next-share": "github:theme-next/hexo-next-share",</span><br><span class="line">    "hexo-renderer-ejs": "^1.0.0",</span><br><span class="line">    "hexo-renderer-marked": "^2.0.0",</span><br><span class="line">    "hexo-renderer-stylus": "^1.1.0",</span><br><span class="line">    "hexo-server": "^1.0.0",</span><br><span class="line">    "hexo-symbols-count-time": "^0.7.0",</span><br><span class="line">    "hexo-wordcount": "^6.0.1",</span><br><span class="line">    "live2d-widget-model-hijiki": "^1.0.5"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打开博客根目录，输入命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></tbody></table></figure>
<p>就会看到有哪些依赖和插件需要更新：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Package              Current  Wanted  Latest  Location</span><br><span class="line">hexo-filter-emoji      2.0.2   2.1.0   2.1.0  hexo-site</span><br><span class="line">hexo-generator-feed    2.1.1   2.2.0   2.2.0  hexo-site</span><br><span class="line">hexo-next-share        1.0.0     git     git  hexo-site</span><br></pre></td></tr></tbody></table></figure>
<p>修改package.json中对应条目的版本到最新版，比如将   “hexo-filter-emoji”: “^2.0.2” 改成：   “hexo-filter-emoji”: “^2.1.0”<br>然后保存修改，再输入命令保存更新并下载：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install --save</span><br></pre></td></tr></tbody></table></figure>
<p>之后运行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo --version</span><br></pre></td></tr></tbody></table></figure>
<p>就可以看到当前hexo的版本已经到最新啦<span class="emoji" alias="v" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8">✌</span></p>
<h2 id="升级Next"><a href="#升级Next" class="headerlink" title="升级Next"></a>升级Next</h2><p>之前Next的版本是<strong>v5.x</strong>, 而搜了下最新版已经到<strong>v7.x</strong>了。。。不过不慌，还是慢慢来<span class="emoji" alias="sunglasses" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span></p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote>
<p>为了避免踩坑，先看<a href="https://github.com/theme-next/hexo-theme-next">官方文档</a>肯定是个明智的选择。</p>
</blockquote>
<p>跟随大佬的<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/UPDATE-FROM-5.1.X.md">指示</a>，Next主题v5.x之后更换了代码库。之前是原作者 iissnan’s 的<a href="https://github.com/iissnan/hexo-theme-next">个人仓库</a>，由于Next比较火，后来就成立了一个专门维护它的<a href="https://github.com/theme-next">组织</a>。是一个很大的进步了，大佬们真棒。</p>
<p>代码库换了，那就不能用Git常规操作pull代码了。文档里给的建议是先不改动原有主题文件夹，将主题最新版本代码作为 <mark class="label info">next-reloaded</mark> 单独克隆到themes/下边。在博客配置文件中，把主题设置为<mark class="label info">next-reloaded</mark> 。然后就可以随时切换两个版本。</p>
<p>但我不是要切换呀，我是要更新啊，所以说之前所有的配置都得我自己手动去加去改了<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span> 可问题是我完全不记得自己都做了啥，万一改坏了怎么办<span class="emoji" alias="scream" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8">😱</span>于是Google一下，看看其他小伙伴有什么更好的操作，结果并没有发现更简单的方法，只能手动改了。</p>
<h3 id="更改配置文件完成基础设置"><a href="#更改配置文件完成基础设置" class="headerlink" title="更改配置文件完成基础设置"></a>更改配置文件完成基础设置</h3><p>新版本的配置文件里，将之前许多格式做了改动，所以要按照新的格式来。<br>对比V5.x版本，新的Next主题将之前许多个性化的设置全都加到了配置文件里，只需打开开关即可，很好用。。<br>这样改完之后，博客基本上与之前一致了。</p>
<h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p>之前一直用的来必力，加载速度还可以。而且有评论时也会给我发邮件。直接在主题配置文件搜索“# LiveRe comments system”然后加上id就好了。</p>
<h4 id="文章浏览次数"><a href="#文章浏览次数" class="headerlink" title="文章浏览次数"></a>文章浏览次数</h4><p>这个以前用的是leancloud，也只需要加上id就好，不过这次加上之后并没有显示效果，而且console log报错：<br><img data-src="https://i.loli.net/2019/12/03/prXyGdDzATYfIe5.png" alt="error"><br>不知道怎么解决，准备在github提issue，所以先弃用了。</p>
<h4 id="Daovoice在线联系"><a href="#Daovoice在线联系" class="headerlink" title="Daovoice在线联系"></a>Daovoice在线联系</h4><p>有很多小伙伴时通过Daovoice直接联系我的，这个也可以关注微信公众号接收消息。然而这次加上之后，导致博客页面空白，直接访问不了，console log也报错：<br><img data-src="https://i.loli.net/2019/12/03/Hzag9KbwrZxIoRv.png" alt="error"><br>开始没定位到是这个的问题，找了好久。。。在网上搜也没找到解决办法，反正博客也有评论系统可以联系小伙伴，遂先弃用。</p>
<h4 id="博客宠物"><a href="#博客宠物" class="headerlink" title="博客宠物"></a>博客宠物</h4><p>就是右下角萌萌的小黑啦。<br>之前也已经下载 “hexo-helper-live2d” 和 “live2d-widget-model-hijiki”这两个依赖，在图中路径加上标记：<br><img data-src="https://i.loli.net/2019/12/03/McVxzk9ivZfWGyX.png" alt="config"><br>然后在博客(非主题)配置文件加上下面的配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#pet</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: true</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki ## 宠物依赖包的名字</span><br><span class="line">  display:</span><br><span class="line">    position: right ## 出现位置</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></tbody></table></figure>
<p>之前小黑猫没显示，就是因为没有下载对应的宠物依赖包。所以要仔细看 live2d 的 README 呀。</p>
<h4 id="文章分享"><a href="#文章分享" class="headerlink" title="文章分享"></a>文章分享</h4><p>新加入了分享文章的插件AddThis, 挺好用的。按照<a href="https://www.addthis.com/">这里的说明</a>配置就好了。然后把id加在配置文件里。</p>
<h4 id="网站底部运行时间"><a href="#网站底部运行时间" class="headerlink" title="网站底部运行时间"></a>网站底部运行时间</h4><p>个人认为加上网站的运行时间还是很有意义的，看着博客已经运行这么多天，有种自豪感嘿嘿。<br>参考<a href="https://ldgyyf.cn/2019/05/15/Hexo/%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/">这篇文章</a>完成的。<br><img data-src="https://i.loli.net/2021/04/28/rjxPnYqmUCkwAv7.png"></p>
<h4 id="酷炫标签云"><a href="#酷炫标签云" class="headerlink" title="酷炫标签云"></a>酷炫标签云</h4><p>根据插件<a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md">github说明</a>配置就好了。<br>下载：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-tag-cloud</span><br></pre></td></tr></tbody></table></figure>

<p>之后操作：</p>
<img data-src="https://i.loli.net/2021/04/28/ZJfLhzbVkKuMnqa.png">

 <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{% <span class="keyword">if</span> site.tags.length &gt; <span class="number">1</span> %}</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span> src=<span class="string">"{{ url_for('/js/tagcloud.js') }}"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span> src=<span class="string">"{{ url_for('/js/tagcanvas.js') }}"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget-wrap"</span>&gt;</span><br><span class="line">    &lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget-title"</span>&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">    &lt;div id=<span class="string">"myCanvasContainer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget tagcloud"</span>&gt;</span><br><span class="line">        &lt;canvas width=<span class="string">"250"</span> height=<span class="string">"250"</span> id=<span class="string">"resCanvas"</span> style=<span class="string">"width:100%"</span>&gt;</span><br><span class="line">            {{ list_tags() }}</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>给博客加上一个背景图片。<br>网上很多教程都是在_custom.styl文件设置的，但新版本已经没有这个文件了，后来看了<a href="https://github.com/theme-next/hexo-theme-next/issues/1217">更新说明</a>，里面有提到怎么把旧版本的所有自定义设置迁移到新版本，所以跟着人家说的设置就好了。<br>先在博客根目录下的Source文件夹里新建<mark class="label info">_data</mark>文件夹，然后再创建<mark class="label info">styles.styl</mark>文件，添加内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">body {</span><br><span class="line">  background:url(你想加的背景图片url);</span><br><span class="line">  background-attachment: fixed; //固定图片位置</span><br><span class="line">  opacity: 0.9; //透明度设置</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>之后在博客配置文件搜索关键字<mark class="label info">custom_file_path</mark>去掉 style 的注释就好啦。</p>
<h4 id="侧边栏和首页文章圆角显示"><a href="#侧边栏和首页文章圆角显示" class="headerlink" title="侧边栏和首页文章圆角显示"></a>侧边栏和首页文章圆角显示</h4><div class="note info"><p>“在大部分人的审美中，有弧度的圆角总是比没弧度的直角好看许多”</p>
</div>

<p>打开themes/hexo-theme-next/source/css/_variables/对应的scheme.styl文件，作如下修改：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// 修改主题页面布局为圆角</span><br><span class="line">$border-radius-inner            = 15px 15px 15px 15px;</span><br><span class="line">$border-radius                  = 15px;</span><br><span class="line"></span><br><span class="line">// 阅读全文按钮为圆角</span><br><span class="line">$btn-default-radius           = 16px</span><br><span class="line">$btn-default-bg               = white</span><br><span class="line">$btn-default-color            = $text-color</span><br><span class="line">$btn-default-border-color     = $text-color</span><br><span class="line">$btn-default-hover-color      = white</span><br><span class="line">$btn-default-hover-bg         = $black-deep</span><br></pre></td></tr></tbody></table></figure>

<h4 id="友情链接页面"><a href="#友情链接页面" class="headerlink" title="友情链接页面"></a>友情链接页面</h4><p>参照 <a href="https://blog.guanqr.com/study/blog/hexo-theme-next-customization/#%E6%B7%BB%E5%8A%A0%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5%E9%9D%A2">这篇文章</a>设置的。</p>
<p>在 /themes/next/layout/ 目录下新建一个 links.swig 文件，内容和之前一样。<br><img data-src="https://i.loli.net/2021/04/28/a2fDPAzZm7tFpes.png"><br><img data-src="https://i.loli.net/2021/04/28/HolOS3LvVzQ19ca.png"></p>
<h4 id="改了下button的样式"><a href="#改了下button的样式" class="headerlink" title="改了下button的样式"></a>改了下button的样式</h4><img data-src="https://i.loli.net/2019/12/20/YbyF2TEIoC6t187.png" alt="button css">
<img data-src="https://i.loli.net/2019/12/20/Kvh4otZz852yPWx.png" alt="button css">

<h4 id="站点概览加了个音乐链接"><a href="#站点概览加了个音乐链接" class="headerlink" title="站点概览加了个音乐链接"></a>站点概览加了个音乐链接</h4><p>Path: <mark class="label info">themes/next/layout/_partials/sidebar/site-overview.swig</mark></p>
<h4 id="右上角站点背景改颜色"><a href="#右上角站点背景改颜色" class="headerlink" title="右上角站点背景改颜色"></a>右上角站点背景改颜色</h4><p>Path: <mark class="label info">themes/next/source/css/_schemes/Pisces/_header.styl</mark><br>颜色可以自己改</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.site-meta {</span><br><span class="line">  background-image: linear-gradient(to right, #db7093, #20B2AA, #4169E1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>还需要改一下padding值：<br><img data-src="https://i.loli.net/2021/04/28/icDvnY3fIPuWZAQ.png"></p>
<p>手机端样式优化：<br><img data-src="https://i.loli.net/2021/04/28/7ozZp239LEPDhW6.png"><br><img data-src="https://i.loli.net/2021/04/28/zZTBuPS6Hxt3AlF.png"><br><img data-src="https://i.loli.net/2021/04/28/JZWvNnXgEe9YTOV.png"></p>
<h4 id="网站底部颜色修改"><a href="#网站底部颜色修改" class="headerlink" title="网站底部颜色修改"></a>网站底部颜色修改</h4><img data-src="https://i.loli.net/2021/04/28/xv8WgPJUNjnb1uC.png">
<img data-src="https://i.loli.net/2021/04/28/YnCLeHo73NMJ8gr.png">

<h4 id="修改主题页面宽度"><a href="#修改主题页面宽度" class="headerlink" title="修改主题页面宽度"></a>修改主题页面宽度</h4><p>路径：next/source/css/_schemes/Gemini/index.styl</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//page width start</span><br><span class="line">header{ width: 70% !important; }</span><br><span class="line">header.post-header {</span><br><span class="line">  width: auto !important;</span><br><span class="line">}</span><br><span class="line">.container .main-inner { width: 70%; }</span><br><span class="line">.content-wrap { width: calc(100% - 260px); }</span><br><span class="line"></span><br><span class="line">.header {</span><br><span class="line">  +tablet() {</span><br><span class="line">    width: auto !important;</span><br><span class="line">  }</span><br><span class="line">  +mobile() {</span><br><span class="line">    width: auto !important;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.container .main-inner {</span><br><span class="line">  +tablet() {</span><br><span class="line">    width: auto !important;</span><br><span class="line">  }</span><br><span class="line">  +mobile() {</span><br><span class="line">    width: auto !important;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.content-wrap {</span><br><span class="line">  +tablet() {</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  }</span><br><span class="line">  +mobile() {</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">//page width end</span><br></pre></td></tr></tbody></table></figure>


<h1 id="后续的更新"><a href="#后续的更新" class="headerlink" title="后续的更新"></a>后续的更新</h1><p>以后的更新应该就能用Git进行操作啦，毕竟换库太可怕了。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://tommy.net.cn/2018/02/26/upgrade-hexo-to-v3-5-0/">将 Hexo 升级到 v3.5.0</a></li>
<li><a href="https://www.jianshu.com/p/e211e9119522">Hexo NexT 6升级笔记</a></li>
<li><a href="https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/">Hexo博客建立标签云及效果展示</a></li>
<li><a href="http://eternalzttz.com/hexo-next.html">hexo next主题优化，打造个人精致网站</a></li>
<li><a href="https://blog.guanqr.com/study/blog/hexo-theme-next-customization/">Hexo-NexT 主题个性优化</a></li>
</ul>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>升级博客</tag>
      </tags>
  </entry>
  <entry>
    <title>BugBash知多少</title>
    <url>/BugBash/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2020/04/22/yAYns8QTWjpUgi7.jpg" alt="bugbash.jpeg"></p>
<h2 id="啥是BugBash"><a href="#啥是BugBash" class="headerlink" title="啥是BugBash"></a>啥是BugBash</h2><p>其实说白了，BugBash就是大家来找茬的过程，找谁的茬呢，当然是要上线的新功能。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">时间：产品上线前一两周，测试结束之后。</span><br><span class="line">地点：最好找个会议室，线上也行</span><br><span class="line">人物：参与产品开发的所有人，主要包括开发，测试，产品经理，客户，相关Team人员</span><br><span class="line">事件：大家一起找bug</span><br></pre></td></tr></tbody></table></figure>

<p>所有比较重要的功能或者改动比较大的功能都应该有Bug Bash(除了一些非常小的功能)。Bug Bash发现的不一定只是Bug，有时也可以提出对某些功能的改进建议。</p>
<h2 id="如何做好一次BugBash"><a href="#如何做好一次BugBash" class="headerlink" title="如何做好一次BugBash"></a>如何做好一次BugBash</h2><h3 id="在BugBash之前"><a href="#在BugBash之前" class="headerlink" title="在BugBash之前"></a>在BugBash之前</h3><ul>
<li>确定好每次Bug Bash的Owner。</li>
<li>Owner需要了解这个功能的业务需求并将其整理到Bug Bash文档中 。</li>
<li>BugBash文档的内容应当包含：被测功能简单介绍、主要测试场景及其checkpoints、测试数据、测试任务分配、结果讨论。</li>
<li>Owner在书写完Bug Bash文档之后，可以将内容发送给团队成员一起查看是否有需要补充其他内容。</li>
<li>Owner需要提前收集使用产品的用户设备信息，用使用率较高的设备/浏览器/终端来做BugBash。</li>
</ul>
<h3 id="在BugBash会议中"><a href="#在BugBash会议中" class="headerlink" title="在BugBash会议中"></a>在BugBash会议中</h3><ul>
<li>Owner可以把Bug Bash会议时间控制在1-1.5h之内，用30-50min的时间进行探索性测试，剩余的时间讨论发现的问题。</li>
<li>每个在BugBash中发现的Bug/Improvement，都应由发现问题的人来建卡记录Bug细节和修复这个Bug需要的时间。</li>
<li>每个在BugBash中发现的Bug/Improvement，Owner都需要与客户/产品经理沟通确定哪些Bug需要修复，并确定好优先级。如果他们都未参加Bug Bash会议，也可以会议再沟通。</li>
</ul>
<h3 id="在BugBash之后"><a href="#在BugBash之后" class="headerlink" title="在BugBash之后"></a>在BugBash之后</h3><ul>
<li>Bug Bash的Owner应当跟踪所有Bug的状态<mark class="label default">TO DO</mark>/<mark class="label warning">IN PROGRESS</mark>/<mark class="label success">DONE</mark>并及时更新在文档里，更新完成之后将修复结果分享给团队。</li>
</ul>
<h2 id="我的BugBash模版"><a href="#我的BugBash模版" class="headerlink" title="我的BugBash模版"></a>我的BugBash模版</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p><img data-src="https://i.loli.net/2020/04/22/g8jDuA79mFJcU6b.png" alt="image.png"></p>
<h3 id="被测功能简单介绍"><a href="#被测功能简单介绍" class="headerlink" title="被测功能简单介绍"></a>被测功能简单介绍</h3><p>简单介绍此次BugBash要测的Feature或者Function。必要的话还可以demo展示。</p>
<h3 id="主要测试场景及其checkpoints"><a href="#主要测试场景及其checkpoints" class="headerlink" title="主要测试场景及其checkpoints"></a>主要测试场景及其checkpoints</h3><p>描述主要测试场景，和每个测试场景需要注意的测试点。<br><img data-src="https://i.loli.net/2020/04/22/ltR1Eo5hSfi6DrC.png" alt="image.png"></p>
<h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p>提前准备测试需要的各种数据和账号，确认每个参会的人有权限访问和进行测试。<br><img data-src="https://i.loli.net/2020/04/22/pZeGR83to2XPhmF.png" alt="image.png"></p>
<h3 id="测试任务分配"><a href="#测试任务分配" class="headerlink" title="测试任务分配"></a>测试任务分配</h3><p>给每个参会小伙伴分配测试任务，包括测试设备、测试数据分配，有时也可以包括测试场景分配，按照具体情况而定。<br><img data-src="https://i.loli.net/2020/04/22/FGkZLP2TosCfBc3.png" alt="image.png"></p>
<h3 id="结果讨论"><a href="#结果讨论" class="headerlink" title="结果讨论"></a>结果讨论</h3><p>测试完成后，将所发现的问题逐个进行讨论，补全表格中空缺内容随后可直观的根据表格查看该Bug的状态和优先级。<br><img data-src="https://i.loli.net/2020/04/22/hw3XUxQl9cEzZYK.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>BugBash</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles连接iOS和Android设备</title>
    <url>/CharlesConnect/</url>
    <content><![CDATA[<div class="note info"><p>这段时间工作时需要用到Charles来抓包移动端请求，配置的过程中踩了不少坑，所幸最后还是成功了，所以记录一下折腾的过程，非常详细，包括iOS和Android两个平台，免得以后又忘了。</p>
</div>

<h2 id="配置Charles"><a href="#配置Charles" class="headerlink" title="配置Charles"></a>配置Charles</h2><h3 id="下载Charles-CA"><a href="#下载Charles-CA" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h3><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate</mark>：<br><img data-src="https://i.loli.net/2021/07/06/6E3AXOaWcfgodDT.png" alt="下载CharlesCA到本地"></p>
<h3 id="信任Charles-CA"><a href="#信任Charles-CA" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h3><p>之后打开电脑的 Keychain Access，搜索 “Charles” 找到Charles CA，然后设置它为始终信任：<br><img data-src="https://i.loli.net/2021/07/06/SEqwaRA6sGPQ3zl.png" alt="设置信任证书"></p>
<p>Charles的基础配置就先这样，下边连接设备的过程中，还需要设置一些东西。</p>
<h2 id="iOS抓包"><a href="#iOS抓包" class="headerlink" title="iOS抓包"></a>iOS抓包</h2><h3 id="iOS-Simulator"><a href="#iOS-Simulator" class="headerlink" title="iOS Simulator"></a>iOS Simulator</h3><h4 id="下载Charles-CA-1"><a href="#下载Charles-CA-1" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate in iOS Simulators</mark>：<br><img data-src="https://i.loli.net/2021/07/07/kzsAhKJD8icNY5M.png" alt="下载CharlesCA到iOS Simulator"><br>之后Charles会弹出添加成功的提示：<br><img data-src="https://i.loli.net/2021/07/07/L1mPro8s7UZxARI.png" alt="添加成功提示"><br>打开iOS Simulator，进入<mark class="label primary">Settings - General</mark>，此时应该有一个 <strong>Profile</strong> 选项显示：<br><img data-src="https://i.loli.net/2021/07/07/c1x7tjPR8S9EI3Q.png" width="230" height="500" alt="CA Profile"><br>如果没有的话， 开启Charles的 <mark class="label primary">Proxy-macOS Proxy</mark>设置，再打开Simlator的Safari浏览器，输入 <strong>chls.pro/ssl</strong>，手动下载Charles，之后再去<mark class="label primary">Settings - General</mark>就可以看到Profile了，里面就是下载的Charles CA:<br><img data-src="https://i.loli.net/2021/07/07/9KhcPUoGeL7s3Vu.png" alt="手动下载CharlesCA到iOS Simulator"></p>
<h4 id="安装Charles-CA"><a href="#安装Charles-CA" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>点击上边下载好的Charles CA，一路点击安装即可，直到CA为Verified：<br><img data-src="https://i.loli.net/2021/07/07/U19N8bHGYKpifIc.png" alt="安装Charles CA到iOS Simulator"></p>
<h4 id="信任Charles-CA-1"><a href="#信任Charles-CA-1" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>去<mark class="label primary">Settings - General - About - Certificate Trust Settings</mark>，打开Charles CA的信任按钮就好了：<br><img data-src="https://i.loli.net/2021/07/07/6B19UTo7jVrYIia.png" width="230" height="500" alt="信任CA"></p>
<h4 id="抓取Simulator请求"><a href="#抓取Simulator请求" class="headerlink" title="抓取Simulator请求"></a>抓取Simulator请求</h4><p>打开Charles, 确保 <mark class="label primary">Proxy-macOS Proxy</mark>设置是开启的，这里还需要设置Charles的SSL Proxy，这样才能抓取到Https的请求，打开<mark class="label primary">Proxy-SSL Proxy Settings</mark>，添加你想要进行Https抓取的url地址，此后Charles只会抓取此地址的Https请求：<br><img data-src="https://i.loli.net/2021/07/07/fVdGbDXUhPlejHg.png" alt="SSL Proxy Settings"><br>然后就可以正常抓取Simulator里的Https请求了：<br><img data-src="https://i.loli.net/2021/07/07/7ihUkHImbWsKJfV.png" alt="Simulator请求"><br>其他请求则会提示需要开启SSL Proxy Settings：<br><img data-src="https://i.loli.net/2021/07/07/orQJheFv2mKna91.png" alt="需要开启SSL提示"></p>
<h3 id="iOS-真机"><a href="#iOS-真机" class="headerlink" title="iOS 真机"></a>iOS 真机</h3><p>此部分还没有尝试过，后续会更新。</p>
<h2 id="Android抓包"><a href="#Android抓包" class="headerlink" title="Android抓包"></a>Android抓包</h2><h3 id="Android-Emulator"><a href="#Android-Emulator" class="headerlink" title="Android Emulator"></a>Android Emulator</h3><h4 id="设置Wifi-Proxy"><a href="#设置Wifi-Proxy" class="headerlink" title="设置Wifi Proxy"></a>设置Wifi Proxy</h4><p>打开Charles，点击 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate on a Mobile device or Remote Broswer</mark>:<br><img data-src="https://i.loli.net/2021/07/07/GLb9lJ2gQIWaUY1.png" alt="Charles Proxy"><br>之后会打开一个弹窗，上边是你的本地IP和Charles默认端口，先别关掉它：<br><img data-src="https://i.loli.net/2021/07/07/98VG6rC3EPwIx4n.png" alt="Proxy Detail"><br>先确保模拟器网络连接正常，之后去 <mark class="label primary">Settings-Network &amp; internet-WiFi</mark>，可以看到连接到了<strong>AndroidWifi</strong>，然后按照下图设置此Wifi的Proxy，点击Wifi后的设置按钮，点击铅笔图标，将Proxy设置为Manual，Hostname和Port就是上边弹窗里对应的值：<br><img data-src="https://i.loli.net/2021/07/07/Z159rMfjOetoEuS.png" alt="设置Wifi Proxy"></p>
<h4 id="下载Charles-CA-2"><a href="#下载Charles-CA-2" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开模拟器的Chrome浏览器，输入 <strong>chls.pro/ssl</strong>，之后弹出下载Charles CA的提示框，选择下载：<br><img data-src="https://i.loli.net/2021/07/07/Pfxc64zlbBUF97y.png" width="230" height="500" alt="下载CA"><br>如果没有网络，尝试冷启动模拟器，看模拟器下拉框中有没有关于Wifi的限制连接提示，点击之后选择仍要连接，应该就有网了，之后再去浏览器下载CA：<br><img data-src="https://i.loli.net/2021/07/07/7M98LEFyqQSitXa.png" width="650" height="550" alt="连接网络"><br>如果这样还是下载不了，那么打开Charles，点击点击 <mark class="label primary">Help - SSL Proxying - Save Charles Root Certificate</mark> 将Charles CA下载到本地:<br><img data-src="https://i.loli.net/2021/07/07/i2JhtF56X9kWI8L.png" alt="Save Charles Root Certificate"><br>然后手动将文件拖到模拟器，也是一样的。</p>
<h4 id="安装Charles-CA-1"><a href="#安装Charles-CA-1" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>进入模拟器<mark class="label primary">Settings - Security - Encryption&amp;credentials</mark>。</p>
<blockquote>
<p>Android 11:</p>
</blockquote>
<p>选择Install a certificate，点击CA certificate，选择Install anyway，最后点击下载的Charles CA文件，就可以安装成功了：<br><img data-src="https://i.loli.net/2021/07/07/JcGMQ2ysOYE1WlH.png" alt="Android11安装Charles CA"></p>
<blockquote>
<p>其它版本</p>
</blockquote>
<p>选择 Install from SD card，你就会看到上面下载的Chares CA文件，点击进行安装，名字可以随便写，Credential Use选择VPN and apps：<br><img data-src="https://i.loli.net/2021/07/07/Hpjz6bJVlr8L4eT.png" alt="安装Charles CA"></p>
<p>安装完成之后去<mark class="label primary">Encryption&amp;credentials-User credentials</mark> 和 <mark class="label primary">Encryption&amp;credentials-Trusted credentials</mark>应该都可以看到安装成功的Charles CA文件：<br><img data-src="https://i.loli.net/2021/07/07/5hSwycPTOI1rjqN.png" width="600" height="550" alt="Charles CA"></p>
<h4 id="信任Charles-CA-2"><a href="#信任Charles-CA-2" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>这里是个大坑，很重要，根据 <a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">Charles官方文档</a> 的Android部分所述 ，由于Charles证书是用户安装的，而Android 7.0以后，系统默认不信任用户安装的证书。所以即使我们安装了Charles证书，也并不能成功进行抓包，此时有两种解决办法：</p>
<ul>
<li>办法一：使用官网做法，在你要抓包的应用程序源代码中添加配置文件，使该应用程序信任用户安装的Charles证书。</li>
<li>办法二：将Charles证书的属性更改为系统安装的证书，从根本上解决问题，但是网上能找到的成功案例不多，不过适用于无法改动应用源代码的同学。</li>
</ul>
<p>这里我用的办法一，添加配置文件，按照官网说的做就行，在代码库的 <strong>res/xml/</strong> 路径添加network_security_config.xml文件，内容如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;network-security-config&gt; </span><br><span class="line">  &lt;debug-overrides&gt; </span><br><span class="line">    &lt;trust-anchors&gt; </span><br><span class="line">      &lt;!-- Trust user added CAs while debuggable only --&gt;</span><br><span class="line">      &lt;certificates src="user" /&gt; </span><br><span class="line">    &lt;/trust-anchors&gt; </span><br><span class="line">  &lt;/debug-overrides&gt; </span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>之后在Manifest.xml里添加下边的reference就行:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;application android:networkSecurityConfig="@xml/network_security_config" ... &gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>这里只配置了应用的debug版本，作改动后重新build代码，之后将生成的debug版本.apk文件安装到模拟器，这时信任Charles CA就设置成功了。</p>
<h4 id="抓取Emulator请求"><a href="#抓取Emulator请求" class="headerlink" title="抓取Emulator请求"></a>抓取Emulator请求</h4><p>打开Charles, 然后<strong>关闭</strong> <mark class="label primary">Proxy-macOS Proxy</mark>设置，其它内容按照上文的 <a href="https://jmyblog.top/CharlesConnect/#%E6%8A%93%E5%8F%96Simulator%E8%AF%B7%E6%B1%82">抓取Simulator请求</a> 部分做就行了，这里不再赘述。</p>
<h3 id="Android真机"><a href="#Android真机" class="headerlink" title="Android真机"></a>Android真机</h3><p>此部分还没有尝试过，后续会更新。</p>
<h2 id="利用Breakpoints修改并发送请求"><a href="#利用Breakpoints修改并发送请求" class="headerlink" title="利用Breakpoints修改并发送请求"></a>利用Breakpoints修改并发送请求</h2><h3 id="设置Breakpoints"><a href="#设置Breakpoints" class="headerlink" title="设置Breakpoints"></a>设置Breakpoints</h3><p>通过设置Breakpoints，我们可以修改请求的Request和Response, 鼠标定位到你想要修改的请求，之后右键勾选BreakPints即可，之后再次进行相同请求时，就会出现编辑请求的页面，可以修改Request和Response：<br><img data-src="https://i.loli.net/2021/07/07/chOZeBxnHwtNSyM.png" alt="设置Breakpoints"></p>
<h3 id="管理Breakpoints"><a href="#管理Breakpoints" class="headerlink" title="管理Breakpoints"></a>管理Breakpoints</h3><p>打开<mark class="label primary">Proxy-Breakpoints Settings</mark>，可以打开管理Breakpoints的弹窗，里面包括已经设置Breakpoints的url，以及Breakpoints的类型：Request和Response<br><img data-src="https://i.loli.net/2021/07/07/3G1OlPSApsaek2b.png" alt="Breakpoints Settings"><br>如果只想修改请求的Request或Response，只需要勾选对应的选项即可：<br><img data-src="https://i.loli.net/2021/07/07/pzOy7Cq2HEDlXrT.png" alt="设置具体抓取类型"></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>对近几天的Git学习做一个小结。</p>
<span id="more"></span>

<p>学完了<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰的git教程</a>，对git的概念和基本操作有了更深的理解。对“版本控制”的概念也理解的更加深刻。</p>
<hr>
<h1 id="几点感受"><a href="#几点感受" class="headerlink" title="几点感受"></a>几点感受</h1><p>以下是我学习了git之后的一些感受：</p>
<ul>
<li>成为了Linus Benedict Torvalds的一枚小迷妹（以前也是，现在妥妥的）。</li>
<li>世上没有后悔药？不存在的，git的版本回退完美的实现了这一点。</li>
<li>搞清楚了git和github的关系，后者只是拥有一个git远程仓库，可以通过git连接并实现相应操作。</li>
<li>Git服务器可以轻松搭建，除了github，还有coding/gitee等网站提供git服务。</li>
<li>工作效率真的提升很快。。。</li>
</ul>
<hr>
<h1 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h1><p>下面对学习中涉及到的git命令做分类总结，都是最常用的。</p>
<h2 id="git本地管理"><a href="#git本地管理" class="headerlink" title="git本地管理"></a>git本地管理</h2><blockquote>
<p>git最基本的一些操作</p>
</blockquote>
<p>git init：将某目录变成git可以管理的仓库（添加.git目录）</p>
<p>git commit -m “…”:一次性提交多个文件（add进来的文件）</p>
<p>git add xxx.md:可以多次添加多个不同文件</p>
<p>git status:可以时刻掌握仓库当前的状态</p>
<p>git diff:显示具体修改的内容（与提交进去的文件相比）</p>
<p>git log：显示从最近到最远的提交日志，加上–pretty=oneline参数可以将每次提交信息压缩成一行,最前边的数字加字母是指每次commit的commit-id,是16进制的表示形式</p>
<p>.gitignore文件：包括git需要忽略提交的文件名，此文件也需要提交到git</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><blockquote>
<p>世界上是有后悔药的</p>
</blockquote>
<p>git reset –hard HEAD^:回退到上个版本（上上个版本HEAD^^,上100个版本是HEAD~100。HEAD是指向当前版本的指针，因此可以通过调整HEAD来在历史版本间穿梭）</p>
<p>git reset –hard commmitid：在没有关闭上次回退时的命令窗口时，可以取消回退。commitid没必要写全，git可以自己去找</p>
<p>git reflog:可以显示每一次commit和回退的id号，如果命令窗口关闭，可以用此命令先找到commitid，然后用上个命令取消回退</p>
<p>git checkout – file：撤销在工作区对file做的修改，包括撤销对file文件的删除</p>
<p>git reset HEAD file &amp; git checkout – file：对file的修改已被add到stage，用前者删除add到stage的修改，再用后者撤销工作区的修改</p>
<p>git reset –hard HEAD^ :已经将想撤销的修改添加到了版本库，但还未提交到远程库。用版本回退撤销修改</p>
<p>git rm file&amp;git commit -m “delete file”：删除已添加到版本库的文件</p>
<p>git checkout:用版本库里的文件版本替换工作区的文件版本（一键还原）</p>
<h2 id="远程库连接"><a href="#远程库连接" class="headerlink" title="远程库连接"></a>远程库连接</h2><blockquote>
<p>连接远程库，进一步实现团队协作。</p>
</blockquote>
<p>git remote:查看远程库信息，详细信息加上-v选项</p>
<p>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:Summyj/xxx.git：将本地git仓库与github远程库想关联,也可以是其它库，远程库默认名字是origin，也可以设为其它，比如github</p>
<p>git push -u origin xxx:把本地仓库指定分支·内容推送到远程，下次推送可以不用-u参数<br>因为第一次推送master分支时如果加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，所以在以后的推送或者拉取时就可以简化命令。</p>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:xxx/xxx.git:从远程仓库克隆到本地，后边是地址</p>
<p>git remotr rm origin:删除本地库关联的origin远程库</p>
<h2 id="分支创建管理"><a href="#分支创建管理" class="headerlink" title="分支创建管理"></a>分支创建管理</h2><blockquote>
<p>实现更安全便捷的版本控制。</p>
</blockquote>
<p>git checkout -b xxx:git check命令加上-b参数表示创建并切换到xxx分支，此命令相当于两条命令：</p>
<ul>
<li>git branch xxx</li>
<li>git checkout xxx</li>
</ul>
<p>git branch:查看当前分支（列出所有分支，当前分支前边会标有*号）</p>
<p>git merge xxx:将指定分支xxx合并到当前分支,首先要切换到当前分支（不一定是master分支）</p>
<p>git branch -d xxx:删除某分支（合并后再删除）</p>
<p>git branch -D xxx:强行删除某个没有被合并的分支</p>
<p>git log –graph –pretty=oneline –abbrev-commit：用分支图展示各分支合并情况（或者直接git log –graph，但这将会显示所有历史合并图）</p>
<p>git merge –no-ff -m “…” xxx:禁用git合并时默认的fast-forward模式，生成新的commit加入分支信息。-m后的内容就是合并信息</p>
<h2 id="工作现场存储"><a href="#工作现场存储" class="headerlink" title="工作现场存储"></a>工作现场存储</h2><blockquote>
<p>版本控制的freestyle.</p>
</blockquote>
<p>git stash:将当前工作现场储藏起来，等以后恢复现场后继续工作</p>
<p>git stash list:查看储藏的工作现场</p>
<p>git stash apply:回复储藏的工作现场</p>
<p>git stash apply stash@{x}有多个stash时恢复指定的stash</p>
<p>git stash drop:恢复现场并删除stash list的内容，如果有多个stash,默认恢复的是最新的stash.</p>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><blockquote>
<p>小伙伴们的友情</p>
</blockquote>
<p>git checkout -b xxx origin/xxx:刚从远程库克隆到本地时只有master分支，用此命令创建和远程分支对应的分支</p>
<p>git pull:多人协作时，远程分支比本地分支更新导致推送失败，用此命令从远程库抓取该分支最新的提交并和本地分支进行合并，合并有冲突需要手动解决</p>
<p>git branch –set-upstream xxx origin/xxx:git pull失败时需要创建本地分支和远程分支的关联</p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><blockquote>
<p>更方便进行版本控制，与commit id相比更好记。相当于版本库的一个快照。</p>
</blockquote>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。与HEAD指针相比，后者可以移动，但标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<p>git tag xxx:打标签</p>
<p>git tag v0.3 646123:将commit id为646123的提交打上v0.3标签。这样可以解决忘记打标签的问题</p>
<p>git tag:查看所有标签（按字母排序，而并非时间）</p>
<p>git show tagname:查看标签信息（包括说明文字）</p>
<p>git tag -a v0.x -m “…” 615465:创建带有说明的标签，用-a指定标签名，-m指定说明文字</p>
<p>git tag -d xxx:删除指定标签（因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。）</p>
<p>git push origin tagname:推送标签到远程</p>
<p>git push origin –tags:一次性推送全部尚未推送到远程的本地标签</p>
<p>git tag -d tagname &amp; git push origin :refs/tags/tagname:删除已推送到远程库的标签，先从本地删除，再从远程删除</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>FirstBlog</title>
    <url>/FirstBlog/</url>
    <content><![CDATA[<p>FistPage in my blog.</p>
<p>the future is whitin reach.</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建折腾记</title>
    <url>/Hexo-GithubPages-CodingPages%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>搭建博客的正确姿势。</p>
<span id="more"></span>
<h2 id="博客初识"><a href="#博客初识" class="headerlink" title="博客初识"></a>博客初识</h2><p>开始写博客只是用CSDN发布，本来开开心心。</p>
<p>然而有一天，我的一篇博客被系统直接删掉了，原因是含有敏感词汇。联系了管理员之后才恢复<span class="emoji" alias="neutral_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span>。</p>
<p>又想起之前一天发了好几篇，被系统禁发了。 有点小生气，发个博客也这么麻烦。索性就自己搭一个好了，然后就开始了折腾之旅。</p>
<p>或许你不相信，但我确实见过有许多非互联网行业的人也搭建了自己的博客。所以在搭建博客这件事上，确实没有专业之分。</p>
<p>说白了，搭建博客就是用一堆别人的东西，来做一个我们自己的东西。Hexo、主题、GithubPages、CodingPages，这些没一样是你的。而且这些都是免费的，除了买域名要花一只棒棒糖的钱（我搭建博客一共就花了3块钱<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>）</p>
<p>所以，人家设计的东西，只要拿来用就可以了。</p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><ul>
<li>Github：建立一个github.io的库，没有账号的话可以注册一个。</li>
<li>Hexo：需要下载它的安装包和主题，你只需要知道一些部署博客的命令（不超过5条）。这些命令也可以不会，因为文档里都有。</li>
<li>GithubPages：是Github推出的功能，只要建立了github.io库，就默认在使用。它相当于一个服务器，可以保存所有博客文件，是电脑上博客站点的一份备份/</li>
<li>CodingPages：跟GithubPages作用相同，但这个是国内的。为了双重保障和你的博客运行速度。建立还是设置下它。</li>
</ul>
<p>所以，搭建博客时可以什么都不懂。但为了以后能更好的操作博客，建议在搭建成功之后，好好学习一下Github的使用。网上的教程也有很多，这里就不再赘述。</p>
<p>虽然我们可以什么都不懂，但以下3样东西必须要有：</p>
<ul>
<li>耐心：搭建博客是一件非常折腾的事情，所以耐心很重要</li>
<li>细心：一定要细心，确保每一步都是正确的。</li>
<li>一定的学习能力和钻研精神，遇到困难一定要面对它，主动解决。</li>
</ul>
<h3 id="为什么搭建博客？"><a href="#为什么搭建博客？" class="headerlink" title="为什么搭建博客？"></a>为什么搭建博客？</h3><p>这个问题相信你已经有了自己的答案，但我还是建议你看看这2篇文章：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402564613&amp;idx=1&amp;sn=d2b7c75b11046a0dcf8df77e737d2b4c#rd">我为什么坚持写博客？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat">为什么你要写博客？</a></li>
</ul>
<h3 id="搭建博客需要多长时间？"><a href="#搭建博客需要多长时间？" class="headerlink" title="搭建博客需要多长时间？"></a>搭建博客需要多长时间？</h3><p>这个因人而异，在我看来，有这么几种：</p>
<ul>
<li>半天：只是搭建，不涉及到换域名和个性化，并且了解背景知识。那么只要半天便可以搭建完成</li>
<li>一天：需要了解背景知识，并且换了域名和主题，但没有太多的个性化</li>
<li>两天：设置了评论，字数统计等各种个性化设置（比如我）</li>
<li>三天甚至更多：各种找个性化插件和设置，一直在折腾的人</li>
</ul>
<p>当然，前两种都是你没有遇到太大的坑或者困难所给出的估计时间。如果你在搭建的时候碰到了很多的问题，那么这个时间就得延长了。因为这种问题一般不好查。</p>
<hr>
<p>搭建博客之前，你应该知道自己在做的是什么。先把事情做对，再把事情做好。所以你需要了解一些背景知识。</p>
<h3 id="建立博客的渠道"><a href="#建立博客的渠道" class="headerlink" title="建立博客的渠道"></a>建立博客的渠道</h3><blockquote>
<p>通常来说，建立博客的通常渠道包括以下3种：</p>
</blockquote>
<ul>
<li>在博客平台上注册，比如 博客园、CSDN、新浪博客 等。</li>
<li>利用博客框架搭建，如 WordPress、Jekyll、hexo 等。</li>
<li>自己用代码写一个。</li>
</ul>
<p>其中，第一种最简单，也最受限，说不定还会被删帖删号（我就遇到过这种情况）。第二种稍复杂，另外需要自己找部署的服务器，但可定制化较高，是很多人的选择。最后一种，是在重复造轮子，不过从另一个方面来看，倒是锻炼编程能力的好方式。</p>
<p>而我们要做的，就是第二种：既不受限，难度也不大。</p>
<h3 id="为什么选择GithubPages和Hexo"><a href="#为什么选择GithubPages和Hexo" class="headerlink" title="为什么选择GithubPages和Hexo"></a>为什么选择GithubPages和Hexo</h3><p>用第二种方式搭建博客也有很多方法，但主流的有两种：</p>
<ul>
<li>Wordpress</li>
<li>GitHub Pages+Hexo</li>
</ul>
<p>很多人用 Wordpress，为什么我要用 GitHub Pages 来搭建？</p>
<ul>
<li>开始我也不知道用哪个，但在网上搜了教程后，发现wordpress比Hexo要麻烦很多。</li>
<li>Hexo是开源在Github上的，而且轻快便捷</li>
<li>GitHub Pages 有 300M 免费空间，资料自己管理，保存可靠。</li>
<li>学着用 GitHub，享受 GitHub 的便利，上面有很多大牛，眼界会开阔很多</li>
<li>顺便看看 GitHub 工作原理，最好的团队协作流程</li>
<li>GitHub 是趋势</li>
</ul>
<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><h3 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h3><p>Hexo 是一个简单、快速、强大的静态博客框架，基于Node.js。由台湾大学生tommy351创建。并把它开源到了Github上，这里是它在Github上的地址：<a href="https://github.com/hexojs/hexo" title="HexoGithub">HexoGithub</a>，它主要有以下优点：</p>
<ul>
<li>极速生成静态页面</li>
<li>一键部署博客</li>
<li>丰富的插件支持</li>
<li>支持 Markdown</li>
</ul>
<p>更多内容可以查看Hexo的官方文档，建议你只看看介绍部分，其它的你现在也看不太懂。等你搭建好了博客再去详细了解其他的内容就会轻松很多：<a href="https://hexo.io/docs/" title="Hexo">Hexdocs</a></p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>GitHub是一个代码托管网站和社交编程网站。这里聚集了世界上各路技术牛叉的大牛，和最优秀的代码库。是全球程序员的天堂。因为是国外的，所以界面全是英文。博主英语过了六级刚开始接触的时候心都突突，不过不要怕，不是还有翻译么，</p>
<p>也有好多人调侃它是全球同性交友平台，其实我不太懂这个梗（女程序员也是很多的好么）</p>
<h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>GitHub Pages是用来托管 GitHub 上静态网页的免费站点，其他的不多说。</p>
<h3 id="CodingPages"><a href="#CodingPages" class="headerlink" title="CodingPages"></a>CodingPages</h3><p>和GithubPages功能相同，其对应的Coding平台也可以实现和Github相似的功能。但没有后者那么出名。是香港的公司，也算是国内的。</p>
<p>看了这些，我相信你一定还是一脸懵逼的。但你可以简单理解成下边的的一段话：</p>
<blockquote>
<p>利用Hexo和GithubPages/CodingPages搭建博客，实际上就是利用Hexo在本地（你的电脑上）生成一个博客站点，然后利用网络将它传输到Github/Coding上进行拷贝和备份。再由Github和Coding提供的GithubPages/CodingPages服务将博客部署到网上，这样你的博客就可以作为一个独立的站点被别人浏览（正式上线）。同时你也可以在Github和Coding上管理你的博客。</p>
</blockquote>
<p>如果你还想了解更多背景知识，可以看看这篇文章：<a href="http://www.jianshu.com/p/0c3663c4f0ef">搭建个人博客，你需要知道这些</a></p>
<hr>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><p>一般来说，搭建博客有以下几个步骤：</p>
<ol>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>在Coding上部署你的网站</li>
</ol>
<p><strong>其中，1.7.8你可以不做。但剩下的必须要做，一步都不能少，也不能错。在你看下边推荐的博客的时候，不要忘记看看我下边的建议。</strong></p>
<p>1-7步请看：这篇博客不只前7步，如果你做完了就可以往下做，因为后边的都是属于个性化部分，所以博主在这里没有显示。<a href="https://zhuanlan.zhihu.com/p/26625249?utm_source=qq&amp;utm_medium=social" title="搭建博客">GitHub+Hexo 搭建个人网站详细教程</a></p>
<p>第8步请看：这篇博客是在你做完了前7步的基础上做的。<a href="http://www.jianshu.com/p/25587e049d54" title="双部署">hexo干货系列：（四）将hexo博客同时托管到github和coding</a>，这篇博客也讲了怎么在CodingPages部署，可以和上一篇对照着看：<a href="http://redredleaf.me/%E6%88%91%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E5%88%9B%E5%BB%BA%E5%8E%86%E7%A8%8B%E4%B8%80.html#more">我的Hexo博客站的创建历程(一)【Github&amp;Coding双管齐下部署Hexo】</a></p>
<h3 id="我的建议和踩过的坑"><a href="#我的建议和踩过的坑" class="headerlink" title="我的建议和踩过的坑"></a>我的建议和踩过的坑</h3><blockquote>
<p>第一篇：</p>
</blockquote>
<ul>
<li>域名建议买.top，比较便宜。当然，土豪随意。</li>
<li>下载Node.js或Git时，由于众所周知的原因，下载速度会很慢。这时你需要看Hexo的官方文档，上边给出了离线下载的地址：<a href="https://hexo.io/docs/" title="Hexo">Hexdocs</a></li>
<li>在安装Hexo这一步，hexo init blog及其之后的命令都是在Blog/blog这个目录下进行的，一定要注意，不能弄错了。博主刚开始就是搞错了路径，结果一直报错。。。</li>
<li>如果你在安装Hexo或者之前的步骤中有报错，建议你重新下载安装。因为这之前的过程全是安装的部分，一旦出错，没有别的原因，一定是你的操作有问题。而且你解决错误的时间一定要比重新安装耗费的时间长。</li>
<li>关于Markdown，sublime是个好东西。</li>
</ul>
<blockquote>
<p>第二篇：</p>
</blockquote>
<p>1.关于域名绑定，再次说明。血的教训告诉我们，Only需要添加两个解析。没有A记录，like this：</p>
<p><img data-src="https://i.loli.net/2019/05/16/5cdd170b0712c43179.png" alt="解析"></p>
<p>之后可以在<a href="http://ping.chinaz.com/">此网站</a>对你的博客进行测试，看看你的博客是否可以在国内解析到Coding，国外解析到Github。访问速度是否得到提升。</p>
<p>2.coding配置完成后，加载博客时会出现其广告界面，如果你想去掉呢，coding给出的解决办法是在网站底部加上codingpages官网链接或者加logo</p>
<hr>
<h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><blockquote>
<p>终于到了万众瞩目的个性化步骤了，到这里，想必你已经根据博主推荐的链接成功搭建好了博客。</p>
</blockquote>
<p>下面来具体说说个性化。</p>
<h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>如果你按照上边搭建博客时推荐的文章那样，选择了next主题。那就不用多说。如果你觉得next主题不符合你的Style，可以参考这篇文章选择你喜欢的主题：<a href="http://www.jianshu.com/p/bcdbe7347c8d">Hexo博客主题推荐</a></p>
<p>但我还是推荐你用next主题，原因：</p>
<ul>
<li>next主题是github上最流行的主题，star和fork的数量远远超过了别的主题。所以相信群众的选择。</li>
<li>next主题的主题配置文件本就内置了许多插件，在个性化的过程中你只需要把flase改成true或者加上对应服务的id就可以直接使用。极为方便。这是其他很多主题没有做到的一点</li>
<li>next主题内部还分为4个主题方案：Muse、Mist、Pisces、Gemini，可以自由选择，更加多元化。</li>
<li>界面高端大气，配色低调奢华。</li>
</ul>
<p><strong>ps：如果你没有用next主题，那么以下个性化设置就不用看了。因为它们都是next的配置。</strong></p>
<h3 id="按照主题文档设置"><a href="#按照主题文档设置" class="headerlink" title="按照主题文档设置"></a>按照主题文档设置</h3><p>选定了主题后，建议先看看主题的文档进行个性化设置。里面是最基本的标签、分类设置，还有第三方服务设置：<a href="http://theme-next.iissnan.com/theme-settings.html">next主题配置</a></p>
<h3 id="其他的个性化设置"><a href="#其他的个性化设置" class="headerlink" title="其他的个性化设置"></a>其他的个性化设置</h3><p>因为用的是next主题，所以这里也是针对于next主题的个性化配置。我博客的所有个性化都是来自这些链接：</p>
<ul>
<li>网易云音乐链接设置，参考博客搭建时推荐的第一篇博客</li>
<li>这一篇看它的个性化设置部分：<a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/">Hexo搭建博客教程</a></li>
<li><a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">RSS和High特效</a></li>
<li>这篇真的厉害了，有30种特效：<a href="https://zhuanlan.zhihu.com/p/28128674">hexo的next主题个性化教程:打造炫酷网站</a></li>
<li>主讲第3方服务：<a href="https://zhuanlan.zhihu.com/p/22745430">配置第三方服务</a></li>
<li>这个也很方便，创建新文章后不用再去找了：<a href="https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html">Hexo添加文章时自动打开编辑器</a></li>
<li>创建一个菜单页面作为文章目录：<a href="https://www.zhihu.com/question/33324071">hexo下新建页面下如何放多个文章</a></li>
<li>博客加密：<a href="https://github.com/MikeCoder/hexo-blog-encrypt">加密插件Github，issue里有解决next主题兼容的方法</a></li>
</ul>
<p>上边这些链接里的设置，均为博主亲测有效。从这些链接可以看出，博主也是折腾了很久的。。。</p>
<h3 id="在Github上看issue或者提issue"><a href="#在Github上看issue或者提issue" class="headerlink" title="在Github上看issue或者提issue"></a>在Github上看issue或者提issue</h3><p>如果你还想折腾，还有两种途径：</p>
<ul>
<li>可以看看next在Github上的issue：这些都是别人提的，可能会有你想要的设置。如果你遇到了问题，也可以自己提issue。这是网址：<a href="https://github.com/iissnan/hexo-theme-next/issues">next/issues</a></li>
<li>去Hexo的官方插件页面找，这里的插件很多。只有你想不到，没有你找不到：<a href="https://hexo.io/plugins/" title="Hexo插件">Hexo插件</a></li>
</ul>
<h3 id="我的建议"><a href="#我的建议" class="headerlink" title="我的建议"></a>我的建议</h3><ul>
<li>个性化固然好，但是在设置的时候一定要细心，这些都是要打开代码文件去修改的，Sublime你值得拥有</li>
<li>关于图床，博主之前用的七牛云，但后来通知那些免费外链有效期过了，所以所有图片都没了。。。这里推荐<a href="https://sm.ms/">SM.MS</a>和<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E8%AF%B4%E6%98%8E">PicGo</a></li>
<li>虽然个性化是可以让你的博客看起来高大上许多，但是不要太过了。忘了自己搭建博客的初心，只有文章才是最重要的。</li>
<li><strong>强烈建议：</strong> 将博客源文件用github托管，可参考<a href="https://www.zhihu.com/question/21193762/answer/489124966">这篇回答</a></li>
</ul>
<h2 id="网站链接"><a href="#网站链接" class="headerlink" title="网站链接"></a>网站链接</h2><blockquote>
<p>下面是博客搭建过程中用到的一些平台和网站的链接，比如Livere提供的评论功能，七牛图床等：</p>
</blockquote>
<ul>
<li>Hexo: <a href="https://hexo.io/">https://hexo.io/</a> </li>
<li>阿里云: <a href="https://www.aliyun.com/">https://www.aliyun.com/</a></li>
<li>Livere: <a href="https://livere.com/">https://livere.com/ </a></li>
<li>Leancloud: <a href="https://leancloud.cn/">https://leancloud.cn/</a></li>
<li>七牛: <a href="https://www.qiniu.com/">https://www.qiniu.com/ </a></li>
</ul>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
        <tag>CodingPages</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的一些写作标签</title>
    <url>/How-to-Write/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2019/12/20/KfeTtUqLu93cMpN.png" alt="题图">

<h2 id="Hexo-Next-标签"><a href="#Hexo-Next-标签" class="headerlink" title="Hexo/Next 标签"></a>Hexo/Next 标签</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>效果：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">这是一行代码</span><br></pre></td></tr></tbody></table></figure>

<p>代码：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{% codeblock lang:command %}</span><br><span class="line">这是一行代码</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><p>效果：</p>
<blockquote class="blockquote-center">
<p>四郎，那年杏花微雨，你说你是果郡王。也许从一开始，便都是错的。</p>

</blockquote>

<p>代码：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{% cq %}</span><br><span class="line">四郎，那年杏花微雨，你说你是果郡王。也许从一开始，便都是错的。</span><br><span class="line">{% endcq %}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><p>效果：</p>
<div class="note default"><p>default</p>
</div>
<div class="note primary"><p>primary</p>
</div>
<div class="note success"><p>success</p>
</div>
<div class="note info"><p>info</p>
</div>
<div class="note warning"><p>warning</p>
</div>
<div class="note danger"><p>danger</p>
</div>

<p>_config 文件配置关键字：note, 我的配置如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">style: flat</span><br><span class="line">icons: true</span><br><span class="line">border_radius: 3</span><br></pre></td></tr></tbody></table></figure>

<p>代码：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{% note <span class="keyword">default</span> %}</span><br><span class="line"><span class="keyword">default</span></span><br><span class="line">{% endnote %}</span><br><span class="line">{% note primary %}</span><br><span class="line">primary</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note success %}</span><br><span class="line">success</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note info %}</span><br><span class="line">info</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note warning %}</span><br><span class="line">warning</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note danger %}</span><br><span class="line">danger</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>_config 文件配置关键字：Label , 需要用的话把值设为true即可。<br>效果：</p>
<mark class="label default">默认</mark>
<mark class="label primary">主要</mark>
<mark class="label success">成功</mark>
<mark class="label info">信息</mark>
<mark class="label warning">警告</mark>
<mark class="label danger">危险</mark>

<p>代码：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{% label <span class="keyword">default</span>@默认 %}</span><br><span class="line">{% label primary@主要 %}</span><br><span class="line">{% label success@成功 %}</span><br><span class="line">{% label info@信息 %}</span><br><span class="line">{% label warning@警告 %}</span><br><span class="line">{% label danger@危险 %}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>效果：</p>
<div class="tabs" id="emoji"><ul class="nav-tabs"><li class="tab active"><a href="#emoji-1">emoji 1</a></li><li class="tab"><a href="#emoji-2">emoji 2</a></li><li class="tab"><a href="#emoji-3">emoji 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="emoji-1"><p><span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p></div><div class="tab-pane" id="emoji-2"><p><span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p></div><div class="tab-pane" id="emoji-3"><p><span class="emoji" alias="relaxed" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8">☺</span></p></div></div></div>


<h3 id="引用句子"><a href="#引用句子" class="headerlink" title="引用句子"></a>引用句子</h3><p>代码：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{% blockquote 王小波 http:<span class="comment">//www.bwsk.com/xd/w/wangxiaobo/hjsd/index.html 黄金时代 %}</span></span><br><span class="line">那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。</span><br><span class="line">{% endblockquote %}</span><br></pre></td></tr></tbody></table></figure>

<p>效果：</p>
<blockquote><p>那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。</p>
<footer><strong>王小波</strong><cite><a href="http://www.bwsk.com/xd/w/wangxiaobo/hjsd/index.html">黄金时代</a></cite></footer></blockquote>

<h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><p>在 <a href="https://hexo.io/docs/tag-plugins.html">Hexo标签</a> 和 <a href="https://theme-next.iissnan.com/tag-plugins.html">Next内置标签</a> 可以找到。</p>
<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><h3 id="数字块"><a href="#数字块" class="headerlink" title="数字块"></a>数字块</h3><p>参考 <a href="https://blog.guanqr.com/study/blog/hexo-theme-next-customization/#%E6%95%B0%E5%AD%97%E5%9D%97">这个</a> 设置。</p>
<p>效果：<br><span id="inline-toc">1.</span><br><span id="inline-toc">2.</span><br><span id="inline-toc">3.</span></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span id="inline-toc">1.</span><a href="https://blog.guanqr.com/study/blog/hexo-theme-next-customization">Hexo-NexT 主题个性优化</a><br><span id="inline-toc">2.</span><a href="https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%EF%BC%89/">Hexo-Next搭建个人博客（主题优化）</a></p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客的Https证书续期</title>
    <url>/HttpsUpdate/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/08/01/R4f1SvM9Q6wNID3.png">

<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>前几天突然发现博客的Https证书失效了，网站又被标记成了<mark class="label danger">不安全</mark>。</p>
<p>找到了之前写过关于申请证书的<a href="https://jmyblog.top/SiteBrokenFix/">文章</a>，发现是在coding pages里申请的证书：</p>
<img data-src="https://i.loli.net/2020/04/23/Skv28M5PJiC1Fwo.png">

<p>之前的证书状态正常，现在进去一看，证书状态已经失效了。点了页面上重新申请的按钮，结果申请失败。</p>
<p>网上搜索了下报错信息，我果然不是一个人，但大家的情况又跟我不一样，所以一时也没找到合适的解决办法。</p>
<p>这个时候突然发现自己之前写的文章有这么一句话：</p>
<pre><code>一开始SSL证书申请失败，后来按照网上的解决方案去域名解析把GitHub解析暂停就申请成功了。
</code></pre>
<p>好像之前遇到过申请失败的问题，所以按照这个操作，先去把GitHub解析暂停，再点击申请证书，这下成功了，刷新了下博客，证书的有效期已经更新到10月底了：</p>
<img data-src="https://i.loli.net/2020/07/30/aLlXtRmycKpk2Ji.png">

<p>我得意的笑 <span class="emoji" alias="grin" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span></p>
<h2 id="知其所以然"><a href="#知其所以然" class="headerlink" title="知其所以然"></a>知其所以然</h2><p>问题是解决了，但是作为一个好学的孩子，不但要知其然，还要知其所以然。</p>
<p>首先，Coding Pages给我们申请的证书有效期是三个月，是由 <a href="https://letsencrypt.org/zh-cn/getting-started/">Let’s Encrypt</a> 签发的，它是国外一个免费的证书颁发机构（CA）。</p>
<div class="note info"><p>Let’s Encrypt的官网说：</p>
<p>要从 Let’s Encrypt 获取您网站域名的证书，您必须证明您对域名的实际控制权。您可以在您的 Web 主机上运行使用 ACME 协议的软件来获取 Let’s Encrypt 证书。</p>
</div>

<p>这个意思简单，就是说你得证明这个域名是你的，我们才给你发证书。那咋证明呢？其实也简单，只要Let’s Encrypt能在国外通过访问站点获得域名验证信息，就能验证域名所有权了。</p>
<p>但是根据我的域名解析设置，Coding Pages的解析线路是默认，Github Pages解析线路是境外，所以根据域名解析规则，<mark class="label primary">Let's Encrypt在国外只能访问到Github Pages的域名验证信息，而无法访问Coding Pages的域名验证信息。</mark><br>所以Coding Pages在帮我们申请证书时，就无法通过Let’s Encrypt的域名验证，证书也就申请不到了：</p>
<img data-src="https://i.loli.net/2020/04/23/RPNsrEyMSUV9uD1.png">

<p>所以这就是为什么用Coding Pages申请证书时，需要先把Github Pages的解析暂停掉了。不过别忘了证书申请成功之后，再把Github Pages的解析重新启动哦。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span id="inline-toc">1.</span> <a href="https://zwen.net/githubcodingblog.html">Github+Coding国内外博客双线部署并支持全站https</a><br><span id="inline-toc">2.</span> <a href="https://blog.csdn.net/dataiyangu/article/details/83374438">hexo 托管到coding，pages申请ssl/tls证书失败</a></p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一次被征服的爬山之旅</title>
    <url>/HuaShanTravel/</url>
    <content><![CDATA[<div class="note primary"><p>死党L君一直想去爬华山，大学的时候就多次提起，但周围的人都拒绝，因为好多人说爬华山挑战太大了。但L君听到劝说反而越挫越勇，非要去征服华山不可，于是拉着我一起去。我之前也爬过几次山，所以也颇有想征服华山的雄心，于是爬山小队就这样成立了<span class="emoji" alias="muscle" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>
</div>

<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>6.1日，周六，晴天，沐浴着傍晚的热气，L君和我踏上了征程。<br>网上攻略之后，我们决定夜爬华山，然后在山上看日出。西安离华山景区并不远，于是我们订了最近的一班高铁，20分钟后就到了华山站。<br>出了高铁站，就到了华阴市，在站外找了家小吃店先填填肚子，发现店里还坐着许多穿着统一服饰的外国友人，想必也是慕名而来爬华山的，因为我在外企工作，L君怂恿我去和他们搭讪，我白了一眼继续吃碗里的炒拉条<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span><br>高铁站出口不远处就有一个公交始发点，终点站恰好就是华山景区，所以和L君一起等待下班发车，陆续来了不少人，大部分都是来爬华山的。<br>公交车摇摇晃晃10多分钟后就来到了华山景区外部，不过离真正的景区入口还要走一段路。但这里已经有不少卖纪念品的小店，还有一些卖祈福飘带之类的小摊，我和L君向来是无宗教无神论者，所以什么都没买。路上有卖祈福带的大妈走在旁边劝我们买一个，图个吉祥，我微笑拒绝并言道「没关系，我们心中有吉祥」，身后的游客忍俊不禁，被我逗笑<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span><br><img data-src="https://i.loli.net/2021/06/29/7XOW3F9eE1HtwNC.jpg" alt="景区入口前的石板路"><br>跟着人流往前走，就来到了景区入口，看着里面望不到尽头的爬山之路，我们在门口买了几瓶水，做了一番心理建设才刷身份证从闸口进入。刷身份证的时候，我们发现机器有故障，就算没有用身份证买票也可以进入，L君和我对视并言道「所以我们买票的意义是什么」，我心想「可能是为了吉祥？」<br>傍晚7:30左右，此时天渐渐黑了下来，我们向景区深处走去。一开始，L君一马当先，还时不时回头催促着我，我说「你不懂，这是保存体力的爬山策略」，L君默然并继续往前走，爬山之旅正式开始了<span class="emoji" alias="two_women_holding_hands" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8">👭</span><br><img data-src="https://i.loli.net/2021/06/29/YoWtdXJMHNFC1fA.jpg" width="400" height="500" alt="开始爬山和L君蹒跚的背影"></p>
<h2 id="上山"><a href="#上山" class="headerlink" title="上山"></a>上山</h2><h3 id="我的自闭式爬山"><a href="#我的自闭式爬山" class="headerlink" title="我的自闭式爬山"></a>我的自闭式爬山</h3><p>一开始，脚下的路都是上图的石板路，我的状态还是比较轻松的，一路上和L君欣赏景色，斗嘴扯皮倒也十分有趣。<br>天色渐渐黑了，我们边走边歇，路边也有不少小商铺卖水的，也有凳子供游人歇息。中间看到一个华山客栈，门脸装修竟然像个酒店，真是神奇。<br><img data-src="https://i.loli.net/2021/07/05/QhtJs38iRkSW7rd.jpg" alt="华山客栈"><br>渐渐的，就不那么有趣了。<br>走了不知多久，大概一个多小时，脚下的路变成了石阶，石阶两侧有锁链供游客扶着，开始了名副其实的「爬山」，又接着爬了一个多小时，我开始自闭了。<br>此时的L君状态依然不错，精神充沛，远远的走在前边，不时停下来等我，鼓励我向上爬。<br><img data-src="https://i.loli.net/2021/06/29/hHIt48elyTnCfYb.jpg" width="400" height="500" alt="居高临下的L君(摄于晚上9:30)"><br><img data-src="https://i.loli.net/2021/06/29/CRhljMwQD4ISpLX.jpg" width="400" height="500" alt="L君眼中自闭的我"><br>不久后，L君和我开始了一系列爬山对话。</p>
<blockquote>
<p><strong>爬山对话一</strong><br>我：「L君，我以后叫你牛L好不好，你真牛<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>」<br>L君：…<br><strong>爬山对话二</strong><br>L君：「你看人家小孩子都爬的比你快<span class="emoji" alias="unamused" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8">😒</span>」<br>我：「你要是也能背着我上山，我也叫你爸爸<span class="emoji" alias="triumph" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8">😤</span>」<br><strong>…</strong></p>
</blockquote>
<p>这样持续了一会，石阶的角度越来越趋于垂直，眼前出现了第一个「云梯」。天色太黑看不清楚全貌，但还是一层层的石阶，两侧都是铁链，还有彩灯照着阶梯，石梯几乎是90度往上的，仰着头依稀可见出口。<br><img data-src="https://i.loli.net/2021/07/05/3hp7ZLPBA2K8lDw.jpg" width="400" height="500" alt="网图"><br>白天差不多是这样的：<br><img data-src="https://i.loli.net/2021/07/05/hmSR7Za98GPTv1x.jpg" width="400" height="500" alt="网图"><br>于是我和L君就开始徒手往上爬，爬到中间回头往下看，黑压压全是人头。这时若有一人没有抓稳掉下去，下边的人就全完了，因为都是徒手爬，没有任何保护措施，非常危险。<br>忘了这段石梯叫啥名字了，但后来发现这并不是「云梯」，「云梯」人家长这样：<br><img data-src="https://i.loli.net/2021/07/05/ZSq4g8BXmDeKT3w.jpg" width="400" height="500" alt="大于90度的云梯"><br>总之爬完这段，我和L君以为自己也是见过世面的人了，但事实证明我们还是太嫩了。因为后面我们还要爬很多个这样的石梯，而且一次比一次长，有这样的：<br><img data-src="https://i.loli.net/2021/07/05/L3BUgpu9aOCkeND.jpg" alt="石梯1-网图"><br>这样的：<br><img data-src="https://i.loli.net/2021/07/05/dW597zrGXJmqUjH.jpg" width="400" height="500" alt="石梯2-网图"><br>好吧，晚上拍的照片太少了。<br>到了中峰，有一个广场大小的平台，上边有很多卖小吃的。和L君稍事歇息，又开始向东峰进发，这时我们看到了一条超长的天梯，两边是光秃秃的山壁。走在其上，左右望去非常空旷，依稀可见城市点点星光，不敢想象白天在这爬是什么心情。<br><img data-src="https://i.loli.net/2021/07/05/z8sfYG4CD2iFw5H.png" alt="非常贴切的网图"><br>后来，这样陡峭的石阶终于爬完了，之后的路就比较平坦了，我也已经完全自闭了，L君也是强撑着，我们完全凭着意志力，互相鼓励爬到了峰顶。</p>
<h3 id="爬到山顶看日出"><a href="#爬到山顶看日出" class="headerlink" title="爬到山顶看日出"></a>爬到山顶看日出</h3><p>到了峰顶，拿出保暖的衣服穿上，坐在峰顶的石壁上等待日出。<br>此时是凌晨4点，从傍晚7点半开始，我和L君已经不停歇的爬了8个多小时了，比我一天搬砖的时间都长。从最开始的石板路，到后来的石阶，再到爬天梯，最后到峰顶，简直佩服自己。<br>周围有一些人搭起了帐篷，对比人家的专业，我和L君只能抱紧贫穷的自己。<br>离日出还有2个小时，我们实在撑不住，只能在石壁上蜷缩着闭眼眯一会，但也无法真正休息，只是趴着不动而已。<br>周围的人很多，峰顶上地方不大，坐在一块非常挤，后来根本躺不下，我和L君只能坐着靠在一起，此时我脑海里一直在想一个问题，我为什么要来这。。。<br>到了5点多，天色开始露出鱼肚白，日出也快要到来了。<br><img data-src="https://i.loli.net/2021/07/05/3c8aMCEYKNRLOZG.jpg" alt="天色渐明"><br><img data-src="https://i.loli.net/2021/07/05/pdWa1YqMhflI4Ls.jpg" alt="远方的鱼肚白"><br>5点30分，日出开始了，一轮红日慢慢从天边开始升起：<br><img data-src="https://i.loli.net/2021/07/05/Dce4ji9s5gmKYqF.jpg" width="450" height="600" alt="日出"><br><img data-src="https://i.loli.net/2021/07/05/XVpYM32QfAhsULE.jpg" alt="日光渐盛"><br>此刻，所有人都虔诚的看着太慢慢升起，也纷纷拿起手机和相机举到头顶，我和L君也一样。<br><img data-src="https://i.loli.net/2021/07/05/erHdb6kiYZEUWlx.jpg" width="450" height="600" alt="石壁上的人们"></p>
<h2 id="下山"><a href="#下山" class="headerlink" title="下山"></a>下山</h2><p>日出看完了，我和L君抖着腿迫不及待的开始下山，一路上才看到昨晚都经历了什么，此刻的我们只想回家躺在床上睡一觉。<br>相比于上山的8小时，我们只想走到下边坐缆车下山，此刻我的状态还不错，毕竟最难的时候已经过去了，日出也看完了，边走边欣赏周围的景色。<br><img data-src="https://i.loli.net/2021/07/05/1xe9niOKuzDgaNZ.jpg" alt="华山群峰"><br><img data-src="https://i.loli.net/2021/07/05/qvS24sVkzbLQYfg.jpg" alt="险峻的山峰"><br>相比于我的闲适，L君显然非常自闭，话也不想多说，满脸疲惫。但离缆车售票处还有很长一段距离，只能咬牙往前走。终于在8点左右坐上了缆车，车外是险峻的山峰，缆车从山峰之间穿过时，也是刺激万分，此刻若是缆车故障，我和L君铁定是尸骨无存了。<br><img data-src="https://i.loli.net/2021/07/05/kixcb93LC2I8zlq.jpg" width="450" height="600" alt="梦想中的缆车"></p>
<h2 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h2><p>到了山下，恰好有去西安的大巴，和L君立马安排了票。一上车，我们就分躺两边，直接睡在座椅上，所幸此时回程车人并不多，我们就一路躺到了车站。<br>然而回家还要转一次地铁和公交，我和L君望着彼此疲惫的脸庞相视一笑，说这辈子再也不爬华山了。<br>地铁到站后，也没有力气转公交了，直接打车回了家，华山之旅就这样结束了。<br>所以爬华山，还是劝一个讨厌的人去吧。</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>爬山</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础小练习</title>
    <url>/Java-basic/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/09/hznIgy4mZYQ7Rwc.png">

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于工(yi)作(qing)原因，最近有很多学习的机会[手动狗头]。<br>测试小姐姐们聚在一起搞了个Java小培训，目的是为了练习用Java和Selenium搭建自动化测试框架。又重新回顾了Java的基础知识，包括：</p>
<ul>
<li><a href="https://www.imooc.com/learn/85">Java1</a>: 数组/循环/运算符/方法</li>
<li><a href="https://www.imooc.com/learn/124">Java2</a>: 类/封装/继承/多态</li>
<li><a href="https://www.imooc.com/learn/110">Java3</a>: 异常/字符类/集合框架(Collection&amp;Map)<br>温故知新，为了证明自己又学了一遍，以及不能让练习的代码白写，就有了这篇博客<span class="emoji" alias="see_no_evil" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8">🙈</span></li>
</ul>
<h2 id="代码练习"><a href="#代码练习" class="headerlink" title="代码练习"></a>代码练习</h2><p>下边是学习过程中遇到的一些代码练习题，以及一些嗑过的知识点，总结一下。</p>
<h3 id="模拟借书"><a href="#模拟借书" class="headerlink" title="模拟借书"></a>模拟借书</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//练习点：try catch</span><br><span class="line"></span><br><span class="line">    String[] books = {"中国通史", "围城", "沉默的大多数", "古文观止", "局外人"};</span><br><span class="line"></span><br><span class="line">    public void CheckArg(int input)</span><br><span class="line">    {</span><br><span class="line">        if(!(input==1 || input==2))</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void SearchWithNo()</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println("请输入图书序号：");</span><br><span class="line">        int index = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        try{</span><br><span class="line">            String name = books[index];</span><br><span class="line">        }</span><br><span class="line">        catch (ArrayIndexOutOfBoundsException e)</span><br><span class="line">        {</span><br><span class="line">            System.out.println("该序号不存在～");</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println("找到了！图书为：" + books[index]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void SearchWithName()</span><br><span class="line">    {</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println("请输入图书名称：");</span><br><span class="line">        String name = sc.next();</span><br><span class="line">        boolean flag = false;</span><br><span class="line"></span><br><span class="line">        for (String book : books) {</span><br><span class="line">            if(book.equals(name))</span><br><span class="line">            {</span><br><span class="line">                flag = true;</span><br><span class="line">                break;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        if(flag)</span><br><span class="line">            System.out.println("该图书存在～");</span><br><span class="line">        else</span><br><span class="line">            System.out.println("该图书不存在～");</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void Process(int arg)</span><br><span class="line">    {</span><br><span class="line">        if(arg == 1)</span><br><span class="line">        {</span><br><span class="line">            SearchWithNo();</span><br><span class="line">        }</span><br><span class="line">        else{</span><br><span class="line">            SearchWithName();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line"></span><br><span class="line">        HelloWorld hello = new HelloWorld();</span><br><span class="line"></span><br><span class="line">        while (true)</span><br><span class="line">        {</span><br><span class="line">            System.out.println("请输： 1 -- 按照序号查找， 2 -- 按照书名查找");</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            try{</span><br><span class="line">                int input = sc.nextInt();</span><br><span class="line">                hello.CheckArg(input);</span><br><span class="line">                hello.Process(input);</span><br><span class="line">            }</span><br><span class="line">            catch (InputMismatchException e)</span><br><span class="line">            {</span><br><span class="line">                System.out.println("请输入数字哦～");</span><br><span class="line">            }</span><br><span class="line">            catch (IllegalArgumentException e)</span><br><span class="line">            {</span><br><span class="line">                System.out.println("非法操作序号～");</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="校验邮件和文件名"><a href="#校验邮件和文件名" class="headerlink" title="校验邮件和文件名"></a>校验邮件和文件名</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//练习点：string类方法</span><br><span class="line"></span><br><span class="line">   public void CheckFile(String file)</span><br><span class="line">   {</span><br><span class="line">       if(file.contains(".") &amp;&amp; file.indexOf(".")!=0 &amp;&amp; file.endsWith(".java"))</span><br><span class="line">           System.out.println("文件名正确");</span><br><span class="line">       else</span><br><span class="line">           System.out.println("文件名无效");</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   public void CheckEmail(String email)</span><br><span class="line">   {</span><br><span class="line">       if(email.indexOf("@") &lt; email.indexOf(".") &amp;&amp; !email.endsWith("."))</span><br><span class="line">           System.out.println("邮件名正确");</span><br><span class="line">       else</span><br><span class="line">           System.out.println("邮件名无效");</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) {</span><br><span class="line"></span><br><span class="line">       HelloWorld hello = new HelloWorld();</span><br><span class="line"></span><br><span class="line">       System.out.println("输入文件名：");</span><br><span class="line">       Scanner sc = new Scanner(System.in);</span><br><span class="line">       String file = sc.next();</span><br><span class="line">       hello.CheckFile(file);</span><br><span class="line"></span><br><span class="line">       System.out.println("输入邮件名：");</span><br><span class="line">       Scanner sc1 = new Scanner(System.in);</span><br><span class="line">       String email = sc1.next();</span><br><span class="line">       hello.CheckEmail(email);</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><span id="inline-toc">1. </span>深入理解对象引用及其赋值</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Vehicle veh1 = new Vehicle();</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://www.cnblogs.com/focuschen/articles/2497768.html">这篇文章</a>让我明白了上边的代码发生了什么。</p>
<p><span id="inline-toc">2. </span>关于StringBuilder的equals方法</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">    public static void main(String[] args) {</span><br><span class="line">        StringBuilder s1 = new StringBuilder("123");</span><br><span class="line">        String s2 = s1.toString();</span><br><span class="line">        String s3 = s1.toString();</span><br><span class="line">        System.out.println(s1.equals(s2)); //false, 由于StringBuilder类没有重写父类Object类的equals方法, 所以比较的还是s1和s2的地址，和==作用相同</span><br><span class="line">        System.out.println(s1==s2); //编辑器报错，因为s1是StringBuilder类型，s2是String类型，不同类型的数据不能用==比较</span><br><span class="line">        System.out.println(s2.equals(s3)); // true, String类重写了Object类的equals方法，比较的是s2和s3地址中的内容</span><br><span class="line">        System.out.println(s2 == s3); //false, ==比较的是两个引用的地址</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><span id="inline-toc">3. </span>通过重写Object超类的equals方法，实现比较两个类的内容相等</p>
<p>Object超类的equals方法调用了 == 比较两个对象的地址，但更多时候我们需要它来比较两个对象的内容，所以需要重写。这也是热门面试题之一。<br>怎么做，<a href="https://blog.csdn.net/javazejian/article/details/51348320">这篇文章</a>写得很明白。</p>
<p><span id="inline-toc">4. </span><a href="https://blog.csdn.net/ceovip/article/details/52963285">关于Map的Key和Value能不能为空</a></p>
<p>其实还写了很多代码来着，不过就不贴了，自动化框架搭建好之后也会写博客总结的<span class="emoji" alias="muscle" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>我的书架</title>
    <url>/MyBooks/</url>
    <content><![CDATA[<h2 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h2><blockquote class="blockquote-center">
<p>古人云：“书中自有黄金屋，书中自有颜如玉”。而我既没有黄金屋，也称不上颜如玉。所以对我而言，读书的确很重要，或许这正是“人丑就要多读书”的出处。</p>

</blockquote>

<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><p>下面是我书架上目前所有书，共42本，看完这些，我就可以立地成佛了吧。。</p>
<img data-src="https://i.loli.net/2019/11/27/DglCuIe78WTznFy.jpg" width="200" height="200">
看过的/看了一部分的写了简评，以后有看完的再慢慢加<span class="emoji" alias="smiley" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>

<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p><span id="inline-toc">1.</span> <strong>测试架构师修炼之道</strong>/刘琛梅/机械工业出版社</p>
<p>这个世界上有两种QA:</p>
<ul>
<li><mark class="label success">技术型</mark>: 代码能力强，对新技术有狂热追求。未来发展方向一般是测试开发/测试架构师/DevOPs，甚至是全栈工程师。</li>
<li><mark class="label success">业务型</mark>: 业务能力强，对业务了如指掌。未来发展方向一般是业务分析师/项目管理师，逐步走管理路线。</li>
</ul>
<p>但这只是侧重点，一个合格的QA是需要两者都基本掌握的。<br>曾经我以为自己是第一种，最近发现智商不允许，毕竟也只工作了不到一年半的时间，所以还在探索自己的方向，都先试试看。<br>这本书就告诉我们怎么从一个普通的QA发展成技术型QA。</p>
<p><span id="inline-toc">2.</span> <strong>软技能：代码之外的生存指南</strong>/John Z. Sonmez/人民邮电出版社</p>
<p>大学时候看过的一本书，当时看了三分之一左右，其余的草草翻了下目录简介。<br>书名中虽有 ‘代码’ 两字，其实内容跟代码一点关系也没有。<br>作者从建立个人影响力，职业规划，健康生活等方面给广大程序员们提供了宝贵的建议。<br>总之，很值得一看<span class="emoji" alias="sunglasses" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span></p>
<p><span id="inline-toc">3.</span> <strong>区块链：领导干部读本</strong>/任仲文/人民日报出版社<br><span id="inline-toc">4.</span> <strong>全程软件测试(第3版)</strong>/人民邮电出版社<br><span id="inline-toc">5.</span> <strong>深度学习</strong>/人民邮件出版社<br><span id="inline-toc">6.</span> <strong>深入敏捷测试—整个敏捷团队的学习之旅</strong>清华大学出版社<br><span id="inline-toc">7.</span> <strong>敏捷软件测试—测试人员与敏捷团队的实践指南</strong>/清华大学出版社</p>
<p>大学时期看过的一本敏捷测试相关，里面有介绍一些敏捷测试理论如：测试四象限，测试金字塔等等，还有自动化测试，很长姿势的一本书。</p>
<p><span id="inline-toc">8.</span> <strong>深度工作——如何有效使用每一点脑力</strong>/卡尔.纽波特/江西人民出版社<br><span id="inline-toc">9.</span> <strong>高效能人士的七个习惯</strong>/史蒂芬.科维/中国青年出版社</p>
<p>这本是大四实习公司发的奖品，前段时间才看完。<br>作者说的对，他就是把一些大家知道但不加重视的生活原则整理成书，比如要事第一，积极主动等等，道理其实咱都明白。<br>还是推荐看，偶尔拿出来看看反思一下自己的生活也是极好的。<br>书里有一些道理我很赞同：</p>
<div class="note primary"><p>所有的事情，都分为四种：</p>
<ol>
<li>重要且紧急：比如上班搬砖，住院开刀</li>
<li>重要但不紧急： 比如健身，做职业规划</li>
<li>不重要但紧急：比如开会，接电话</li>
<li>不重要且不紧急：比如玩手机，刷某音</li>
</ol>
</div>
<p>我们往往会忽略2， 但经常沉迷于4<span class="emoji" alias="pensive" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8">😔</span></p>
<p><span id="inline-toc">10.</span> <strong>有效管理敏捷团队——快速成为优秀的ScrumMaster</strong>/清华大学出版社<br><span id="inline-toc">11.</span> <strong>转行——发现一个未知的自己</strong>/埃米尼亚.伊瓦拉/机械工业出版社</p>
<h3 id="心理"><a href="#心理" class="headerlink" title="心理"></a>心理</h3><p><span id="inline-toc">1.</span> <strong>沟通的艺术(看入人里/看出人外)</strong>/北京联合出版公司<br><span id="inline-toc">2.</span> <strong>社会心理学(第11版)</strong>/戴维.迈尔斯/人民邮件出版社<br><span id="inline-toc">3.</span> <strong>思考，快与慢</strong>/丹尼尔.卡尼曼<br><span id="inline-toc">4.</span> <strong>一个人住第5年</strong>/高木直子/北京联合出版公司</p>
<p>这本书有意思，带着笑看完了。从名字就很吸引我，因为我也是一个人住。<br>作者用漫画的形式诉说自己一个人的生活，有时觉得自由，有时觉得孤独，有时会半夜起来改变家具的位置，是我本人了，真实到让我觉得作者是不是在我家安装了监视器。<br>如果你也一个人住，可以看看。</p>
<p><span id="inline-toc">5.</span> <strong>墨菲定律</strong>/秋泉<br><span id="inline-toc">6.</span> <strong>局外人</strong>/加缪/江苏凤凰文艺出版社</p>
<h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p><span id="inline-toc">1.</span> <strong>经济学的思维方式</strong>/保罗·海恩 (Paul Heyne)/机械工业出版社<br><span id="inline-toc">2.</span> <strong>小狗钱钱(两册)</strong>/博多.舍费尔/四川少年儿童出版社</p>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p><span id="inline-toc">1.</span> <strong>中国通史</strong>/吕思勉/陕西师范大学出版社</p>
<p>快看完了，作者是民国生人，而且做过历史教授，文字不是太白话，看起来有些障碍。好在我比较喜欢啃文言文，这种调调还可以接受，不过睡前看可能会有些催眠。所以还好(我可是高考语文考过130的人<span class="emoji" alias="sunglasses" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span>)。<br>书中对史实刻画很生动，提出所谓历史，其实都是文化史，因为文化不同，所以产生政治史。所以书分两篇，上篇政治史，下篇讲文化史。<br>上篇还分析了各个朝代更替衰落的原因，并描述了朝代更迭过程中人民的思想变化，如何从“治天下不如安天下”到“安天下不如与天下安”，和儒家&amp;理学思想对政治的影响，引人深思。<br>作者说：<mark class="label info">我们所知道的中国史，相当于一个人活到一百岁，但却只有他最近几个月的记忆，是很少的。</mark></p>
<p><span id="inline-toc">2.</span> <strong>全球通史—从史前史到21世纪(上下两册第7版)</strong>/斯塔夫里阿诺斯/北京大学出版社<br><span id="inline-toc">3.</span> <strong>万历十五年</strong>/黄仁宇/三联书店</p>
<h3 id="文学"><a href="#文学" class="headerlink" title="文学"></a>文学</h3><p><span id="inline-toc">1.</span> <strong>诗经《风雅颂》合集</strong>/三秦出版社</p>
<blockquote class="blockquote-center">
<p>关关雎鸠，在河之洲。窈窕淑女，君子好逑</p>

</blockquote>
<p>上学的时候了那么多诗经里的诗词，也算是看过了吧。不过还想看看里面其它的诗词，品鉴的同时也可避免以后因为误解词句的意思而贻笑大方。<br>还是推荐这版，印刷很用心，看起来很舒适。</p>
<p><span id="inline-toc">2.</span> <strong>花间集</strong>/赵崇祚/三秦出版社</p>
<blockquote class="blockquote-center">
<p>小山重叠金明灭，鬓云欲度香腮雪。懒起画娥眉，弄妆梳洗迟。照花前后镜，花面交相映。新帖绣罗襦，双双金鹧鸪。</p>

</blockquote>
<p>这是电视剧《甄嬛转》里眉庄香消玉殒时的背景音乐，是姚贝娜唱的。当时便觉得很美，后来知道是温庭筠写的。由温庭筠又知道了“花间派”，而后就买了这本。<br>也算是本工具书，这版是彩印，还有一些古代花鸟画和风景图，边赏词边品画，也很舒适。</p>
<p><span id="inline-toc">3.</span> <strong>纳兰词</strong>/纳兰性德</p>
<blockquote class="blockquote-center">
<p>人生若只如初见，何事秋风悲画扇？等闲变却故人心，却道故人心易变。</p>

</blockquote>
<p>纳兰性德其人，才华横溢，出身高贵确不贪恋荣华，潇洒恣意，在妻子去世八年后也随之而去，而立之年就英年早逝。</p>
<p><span id="inline-toc">4.</span> <strong>爱你就像爱生命</strong>/王小波/译林出版社</p>
<p>看完了，这不是一封情书，而是一本情书。<br>“你好哇，李银河”是每封情书的开场白，直白又热烈。<br>单身的人还是不要看了(所以我为什么要看<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)</p>
<p><span id="inline-toc">5.</span> <strong>古文观止(上下两册)</strong>/吴楚材/浙江教育出版社<br><span id="inline-toc">6.</span> <strong>呐喊</strong>/鲁迅<br><span id="inline-toc">7.</span> <strong>沉默的大多数</strong>/王小波</p>
<p>大学的时候就看完了，是王小波最著名的杂文。王小波生活在新中国刚成立后最动荡的时期，文革，大跃进，上山下乡都赶上了，所以在杂文里也有很多他的经历。这本杂文合集文字幽默大胆，主要写他对当时中国社会/经济/文化现状的讽刺。</p>
<p><span id="inline-toc">8.</span> <strong>围城</strong>/钱钟书</p>
<p>看完了再也不相信爱情了<span class="emoji" alias="broken_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8">💔</span><br>背景在民国时期，讲了男主和四个女人的情感经历，结婚后两人之间又各种猜忌，各种出口伤人，因为各种生活琐事争吵不断。<br>书中最后一幕是婚后不久，男主又一次与妻子争吵，夺门而出。情绪冷静之后想回家说点软话哄哄对方，不想回去之后发现妻子竟收拾东西回娘家了。而后续又会发生什么不得而知，也许是两人会就此分开，也许男主会软言讨好把女主接回来，继续过着争吵不休的生活。<br>其实我是觉得男主和女主都太作了，明明心里是有对方的，却又控制不住互相伤害。<br>书中对许多配角的性格刻画和心理描写也令人拍案叫绝，太真实了。<br>没看过的一定要看，看过的也可以再看。</p>
<p><span id="inline-toc">9.</span> <strong>人间词话</strong>/王国维/中华书局</p>
<h3 id="社科"><a href="#社科" class="headerlink" title="社科"></a>社科</h3><p><span id="inline-toc">1.</span> <strong>中国地理地图集</strong>/中国地图出版社</p>
<p>还没看完，其实这是本工具书，因为我一向地理不好。<br>以前是分不清南北，这个毛病在我第一次找房子以为朝东结果朝北后才治好的，但有时也会失灵。<br>现在是随便说某省份和城市，反应不来是南方还是北方，经常被朋友嘲笑，所以还是买本地理书吧。<br>是挺厚的一本书，全彩印，里面详细列着我国各地的地貌，湖泊，气候，风俗等等，还有超简版中国式。称得上一本概括版的百科全书了，图文并茂，看起来也不腻。</p>
<p><span id="inline-toc">2.</span> <strong>像人类学家一样思考</strong>/约翰.奥莫亨德罗/北京大学出版社</p>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p><span id="inline-toc">1.</span> <strong>救护车到来前，你能做什么？</strong>/贾大成<br><span id="inline-toc">2.</span> <strong>中国居民膳食指南2016</strong>/中国营养学会/人民卫生出版社<br><span id="inline-toc">3.</span> <strong>知己</strong>/徐文兵/海南出版社<br><span id="inline-toc">4.</span> <strong>女人的身体,女人的智慧(新版)</strong>/克里斯蒂安.诺斯鲁普/上海科学普及出版社</p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><blockquote>
<p>我的买书渠道：因为心理学&amp;理财&amp;工作相关的书都是可以报销的，所以都是在京东自营买的新书，二手书在‘多抓鱼’买。<br>最近发现一个 <a href="http://www.bwsk.com/">线上网站</a> 看书很方便。</p>
</blockquote>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试初识</title>
    <url>/Penetration-Test/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/06/e9Yd8ylbkxcJhOE.jpg">

<p>本文参考 <a href="https://github.com/judasn/hexo-blog/blob/master/2016/02/My-Learning-Way.md">怎么学习新东西</a> 书写。</p>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><mark class="label info">百科定义：</mark> 为了证明网络防御按照预期计划正常运行而提供的一种机制。
<p><enter></enter></p>
<mark class="label info">通俗定义：</mark> 通过模拟黑客攻击的方式检查目标信息安全运行状况的方法。


<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><mark class="label primary">解决啥问题</mark>
<p>找到目标信息安全防护中存在的问题，汇总研究，加固不足之处，提升目标安全等级。</p>
<mark class="label primary">没有它之前怎么做</mark>
<p>只是按照规范要求定期更新安全策略和程序，时时给系统打补丁，用安全软件确保所有补丁都已打上，但并没有进行全面检测和评估。</p>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><h3 id="百科示例流程"><a href="#百科示例流程" class="headerlink" title="百科示例流程"></a>百科示例流程</h3><p><span id="inline-toc">1.</span> 测试之前</p>
<p>分析测试风险，制定测试方案初稿，通过后与被测机构签订测试协议，确定：</p>
<ul>
<li>测试方法(黑盒/白盒/灰盒)</li>
<li>目标(服务器/数据库/Web网站…)</li>
<li>测试细节(是否允许数据损坏/接内网还是外网/…)</li>
</ul>
<p><span id="inline-toc">2.</span> 测试过程</p>
<mark class="label success">信息收集</mark>

<p>测试者利用各种公开信息收集目标的网络资产(如域名、IP、服务器、人员组织架构等)，需要熟练使用各种网络信息工具。</p>
<mark class="label success">技术测试</mark>

<p>针对收集到的网络资产进行详细的漏洞测试，比如针对Web系统做SQL注入、命令执行、XSS攻击等。<br>需要熟悉各种测试工具，比如burpsuite等等。</p>
<mark class="label success">人员测试</mark>

<p>对人员的安全意识进行测试，如发送钓鱼邮件、欺骗人员获得某种口令等。(之前在公司就收到过内部测试故意发出来的钓鱼邮件，幸好我机智没有点开，否则可能要被谈话)</p>
<p><span id="inline-toc">3.</span> 测试之后</p>
<p>测试者对测试结果进行汇总，并产出报告，交付给目标的管理员。然后帮助目标修复漏洞，修复完成后进行复测，检查漏洞是否修复完毕。</p>
<h3 id="视频-文档教程"><a href="#视频-文档教程" class="headerlink" title="视频/文档教程"></a>视频/文档教程</h3><p><a href="https://www.imooc.com/learn/1032">这里</a> 有一个渗透测试免费入门视频教程.</p>
<h3 id="Demo实战"><a href="#Demo实战" class="headerlink" title="Demo实战"></a>Demo实战</h3><p>因为渗透测试是需要在征得被测机构同意后进行的测试活动，作为一个遵纪守法的好公民，我找到了一个知名的Web渗透测试练习应用程序，它就是 <a href="https://github.com/bkimminich/juice-shop#docker-container-----">juice shop</a>:<br><img data-src="https://i.loli.net/2020/05/06/qzf5HgmRUFyc6Kj.png"><br>它是由权威组织 <a href="https://owasp.org/">OWASP</a> 推出的一款web应用程序，里面包含了最常见也最重要的Web安全漏洞，而且会根据新技术不断更新，在 <a href="https://pwning.owasp-juice.shop/">这里</a> 你可以获得如何开始在juice shop玩耍的教程。下边是我自己实践过的几个例子：</p>
<p><span id="inline-toc">1.</span> 利用前端漏洞提交零星反馈</p>
<p>未评分时反馈页面提交按钮是不可点击的，然而浏览页面代码可以发现，<mark class="label primary">disable=true</mark> 用来控制提交按钮是否可点击，那我们就删掉它，达到提交零星评价的目的。</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNDY2MTQyNjQxMg==" frameborder="0" 'allowfullscreen'=""></iframe>


<p><span id="inline-toc">2.</span> 通过暴露的ftp文件夹访问机密文件</p>
<p>要访问机密文件，那我们就得找到机密文件的路径。首先我们浏览网站页面，看有没有什么特殊链接可以点击，然后在“关于我们”页面中发现了一个文案贱贱的链接，点开之后就可以发现有一个隐藏的ftp文件夹，可以浏览里面的机密文件。</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNDY2MjgwODAwOA==" frameborder="0" 'allowfullscreen'=""></iframe>


<p><span id="inline-toc">3.</span> 利用sql报错登录管理员账户</p>
<p>首先打开登录页面，按照sql注入一般操作，输入特殊字符单引号，然后输入任意密码，点击登录之后，会发现页面有一个异常报错。就顺便解决了报错处理不当的挑战。<br>然后在login请求中找到具体SQL报错信息：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">SELECT * FROM Users WHERE email= 'xxx' AND password = 'xxx' ......</span><br></pre></td></tr></tbody></table></figure>
<p>由此我们可以根据这个信息，构造万能密码 <mark class="label primary">' or 1--</mark>, 第一个单引号用来隔断email后边的单引号， 然后加上逻辑条件或 or，给出数字1让条件永远为真，再用 – 注释掉后边的语句。<br>输入任意密码，点击登录，就可以登录成功了，而且根据挑战成功提示，登录的还是管理员账号，可以算是意外之喜了。</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNDY2MjkxNzA4NA==" frameborder="0" 'allowfullscreen'=""></iframe>


<p><span id="inline-toc">4.</span> 浏览代码访问管理员页面</p>
<p>上一条我们已经登录了管理员账号，但浏览网站后却发现和普通账号登录之后的显示并没有什么区别，这可不行，我们既然登录了管理员账号，一定是要找到一些管理员才有权限访问的东西的。但页面又找不到什么信息，所以先从网站源文件入手。<br>打开网站resource, 发现一个<mark class="label primary">main.js</mark>的代码文件，并尝试搜索admin, 结果找到了类似于路径的信息，根据其他路径的显示，我们可以直接加上后缀 <mark class="label primary">administration</mark> ，回车之后进入管理员页面，并解决挑战。</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNDY2MjgxNzQ4MA==" frameborder="0" 'allowfullscreen'=""></iframe>

<p><span id="inline-toc">5.</span> 编辑请求访问别人的购物车</p>
<p>打开管理员页面，我们可以发现有很多已注册的用户。所以我们就来实现登录用户Jim看到管理员的购物车信息。<br>首先看一下管理员的购物车请求和里面都有啥，可以看到请求的url是 <mark class="label primary">rest/basket/1</mark>, 记住它。<br>然后登出管理员，同样利用SQL注入构造登录字符串 <mark class="label primary">email' and 1--</mark> 登录Jim的账号。此时也解决了登录jim的挑战。</p>
<div class="note info"><p>其实还有别的方式可以登录jim, 比如利用burpsuite爆破直接破解密码，这个我还没学会，不过上边的免费课程会讲到burpsuite的使用。<br>还可以利用社会工程学的方式，通过回答jim账号的安全问题(你最年长的兄弟名字是啥)来登录账号，官网给出的解释是由jim可以想到一个知名的演员叫James, 通过百科可以查到他的兄弟名字，然后就解答了问题。这点我不能理解，也想不到，或许是文化不同吧，不过这个例子也一定程度上反映了社会工程学是怎么用的。</p>
</div>

<p>登录Jim之后我们就看他的购物车请求是<mark class="label primary">rest/basket/2</mark>， 然后通过charles工具给这个请求打个断点，刷新页面之后，将请求改为<mark class="label primary">rest/basket/1</mark>，发送之后就可以在登录jim账号的情况下，看到管理员的购物车了，挑战解决成功。</p>
<div class="note warning"><p>需要注意的是，在用charles监听本地的时候，需要将本地 <a href="http://localhost:3000/">http://localhost:3000</a> 改为 <a href="http://localhost.charlesproxy.com:3000/">http://localhost.charlesproxy.com:3000</a><br>这里是<a href="https://www.charlesproxy.com/documentation/faqs/localhost-traffic-doesnt-appear-in-charles/">charles官网</a>的说明。</p>
</div>

<iframe height="498" width="510" src="https://player.youku.com/embed/XNDY2MjgxMzE0NA==" frameborder="0" 'allowfullscreen'=""></iframe>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/24a39068dbf9">结合OWASP Top 10 初识安全测试</a></li>
<li><a href="http://shaobaobaoer.cn/archives/510/owasp-juice-shop#0x03_Information_Leakage">OWASP Juice Shop 实战报告与解析</a></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>OWASP</tag>
      </tags>
  </entry>
  <entry>
    <title>沉默的抗争</title>
    <url>/Silent-protest/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/12/03/8Y5qidj3v1rwWLn.png">

<blockquote><p>那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p>
<footer><strong>王小波</strong><cite><a href="http://www.bwsk.com/xd/w/wangxiaobo/hjsd/index.html">黄金时代</a></cite></footer></blockquote>

<hr>
<div class="note default"><p>王铁锤，一个在沉默中「灭亡」的人。</p>
<p>王铁锤来到了一个新的项目组，作为QA，他刚开始就充分体会到了业务的复杂性和人力的严重不足，但他只想测卡挪卡，安安静静的搬砖。</p>
<p>但后来项目的走向，打破了他的期望。</p>
<p>他一直觉得，无论干什么，得先把事情做对，再把对的事情做好。然而项目的情况恰恰相反，首先作为一个敏捷开发的项目，基础设施像环境、流水线这些东西在项目开始一个月后，还没准备好。整个团队都在赶工，像一只只顾往前奔跑的斗牛，莽撞而没有方向。</p>
<p>其次，各种各样的文档让他烦不胜烦，每天都在搞一些流于形式的东西，但这是客户爸爸要求的，他也无力改变。慢慢的他发现整个项目就是一个披着敏捷开发外衣的瀑布式开发项目。此外，测试环境极其不稳定，每天最多的时间都是在等修复，真正搬砖的时间很少，这些问题多次反馈还是得不到解决。</p>
<p>然后就是工期的紧缩，团队大佬甚至召集大家开会说明情况，确定996的工作模式，一切都是为了让产品在客户要求的时间前上线。大鱼吃小鱼，小鱼吃虾米，这样一层层压下来，王铁锤觉得自己就是一个小虾米，是被剥削的底层搬砖工，第一次体会到「社畜」这个词的含义。</p>
<p>尽管如此，他还是想安安静静的搬砖，只想搬完分配给自己的那坨砖，强制让自己不加班，让「社畜」的感觉不那么强烈。这样过了一些时日，王铁锤觉得自己找到了在项目里保持「love&amp;peace」的方式，有时候他觉得自己像一个隐士，但不是身怀绝技的隐士，而是无能为力的隐士。</p>
<p>但好景不长，项目后期，客户开始了验收测试。一些对产品细节的扯皮和对业务的一遍遍确认搞得BA和PM也筋疲力尽，很多项目初期没有提出的问题到现在才通知，导致需求不断的变更和返工。王铁锤觉得疲倦，但客户却精气十足，他知道，这场沉默的抗争，是他输了。</p>
<p>看着项目里的开发日日加班到深夜，周末也在公司度过，他觉得不忍，但更多的是感到害怕。也许这就是「成年人」的不易吧，有谁不是负重前行呢？王铁锤突然发现自己并不是一个合格的「成年人」，因为他还没有「重」要「负」，但同时又害怕自己变成一个「成年人」，因为他并不想这样做一个「社畜」，为了「负重」而做自己不想做的事。至少现在，不想做的事，他还可以不做。</p>
<p>后来，他开始负责协助客户的验收测试，处理客户提出的问题。call center般的工作体验就好像压死骆驼的最后一根稻草，他完全失去了搬砖的积极性，他开始变得更沉默，频繁请假，拒绝加班，他知道这样做很不专业，但只想逃避。不难想到，由于他的「格格不入」，他从这样一个「成年人」的项目中淘汰了。</p>
<p>在最后的谈话中，二十三岁的王铁锤第一次听到「老油条」这样的评价。他淡然一笑，也不做他想。项目依然是一地鸡毛，而他已经不想再面对了。他也想过何以至此，但他不懂怎么评价别人的工作，只是觉得在这个项目搬砖不开心，也提不起动力，只能悄然离开。</p>
<p>王铁锤二十三岁，还在人生的黄金时代。他没有太多的奢望，也不觉得自己会永远生猛下去，但依然觉得什么也锤不了他。他还是他，也许生活是个缓慢受锤的过程，人一天天老下去，终有一天，他也会被锤成一个「成年人」，但他只想怀抱自己本就不多的奢望，安之若素。</p>
<p>希望有一天，王铁锤能学会在沉默中「爆发」。</p>
</div>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>王铁锤</tag>
      </tags>
  </entry>
  <entry>
    <title>博客被停止访问之后</title>
    <url>/SiteBrokenFix/</url>
    <content><![CDATA[<h2 id="发生了什么"><a href="#发生了什么" class="headerlink" title="发生了什么"></a>发生了什么</h2><p>昨天更新了点博客内容，本地预览一切正常，然而推送之后，我的站点就没法访问了<span class="emoji" alias="scream" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8">😱</span></p>
<img data-src="https://i.loli.net/2020/04/23/K4e1OfUkGpTt6BF.jpg" width="500" height="200">

<h2 id="找原因"><a href="#找原因" class="headerlink" title="找原因"></a>找原因</h2><p>这次的错误和之前遇到的都不一样，一脸懵逼的我第一时间只能找Google和度娘问问，看有没有同病相怜的人和有可能的解决办法。然鹅，毛都没有，结果全是不相关的内容：<br><img data-src="https://i.loli.net/2020/04/23/lDyCkEzNxnZXL4g.png" width="600" height="500"></p>
<p>虽然毫无头绪，但也只能尝试自己解决了，还是那句话，<mark class="label info">遇到问题的时候，首先怀疑自己</mark>。于是我就开始了自我怀疑之路：</p>
<h3 id="revert代码"><a href="#revert代码" class="headerlink" title="revert代码"></a>revert代码</h3><p>因为不知道网站是什么时候被停止访问的，而且更新之前我并没有看站点的情况，所以也许在更新之前它是好的，所以我revert了代码：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git push --force</span><br></pre></td></tr></tbody></table></figure>
<p>但结果还是一样<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span></p>
<h3 id="更新Hexo"><a href="#更新Hexo" class="headerlink" title="更新Hexo"></a>更新Hexo</h3><p>既然不是代码的问题，而且它报的是网络安全性问题，所以决定从这个角度出发找原因，首先想到更新Hexo，说不定有相关安全漏洞修复，所以我更新了相关的package:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm outdated</span><br><span class="line">npm install --save</span><br></pre></td></tr></tbody></table></figure>
<p>推送更新之后结果依旧不变<span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p>
<h3 id="解决github发现的依赖稳定性问题"><a href="#解决github发现的依赖稳定性问题" class="headerlink" title="解决github发现的依赖稳定性问题"></a>解决github发现的依赖稳定性问题</h3><p>注意到推送远程仓库后，github有提示一些依赖包需要更新，旧的可能有安全威胁，所以按照github的建议更新了依赖包：<br><img data-src="https://i.loli.net/2020/04/23/ltorJI7sbPufejX.png">嗯，问题依然没有解决<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<h3 id="百度网站检测"><a href="#百度网站检测" class="headerlink" title="百度网站检测"></a>百度网站检测</h3><p>继续细品报错<mark class="label danger">由于存在网路安全性问题，该站点已停止访问</mark>，虽然我坚信自己是个遵纪守法的好公民，没有在博客上发布什么黄赌毒信息，不过还是在百度站点管理平台检测了一下，期待能报个啥错，给我更多的信息：<br><img data-src="https://i.loli.net/2020/04/23/21VDnev6QHLpJIy.png" width="500" height="500">然而结果出乎意料的优秀，也没有检测出啥恶意内容。hummm，度娘为我正身了<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
<h3 id="清理浏览器缓存"><a href="#清理浏览器缓存" class="headerlink" title="清理浏览器缓存"></a>清理浏览器缓存</h3><p>上边这么多尝试，都没有解决问题，我突然想到一个平时工作中经常用到的操作：<mark class="label default">清缓存</mark>，然后我终于看不到报错信息了，出现了一个相对熟悉的页面，而且有更多信息：<br><img data-src="https://i.loli.net/2020/04/23/v9PIwB1WMfQNymh.png" width="550" height="500">值得注意的是这段话：</p>
<blockquote>
<p>This server could not prove that it is jmyblog.top; its security certificate is from<br>coding.me. This may be caused by a misconfiguration or an attacker intercepting your<br>connection.</p>
</blockquote>
<p>3个关键字：<strong>安全证书</strong> <strong>配置错误</strong> <strong>外部攻击</strong><br>于是我看了下现在的证书：<br><img data-src="https://i.loli.net/2020/04/23/kliwBJ8GtSrb1eR.png" width="450" height="400"><br>虽然我很想假装自己能看懂，但我真的看不懂。外部攻击就更是一头雾水了，稍微有点了解的是<strong>配置错误</strong>这个关键字，而且提到了coding.me。这个我是知道的，因为博客是同时部署在github和coding上的。所以我决定去探索下。</p>
<h3 id="探索Coding和Github"><a href="#探索Coding和Github" class="headerlink" title="探索Coding和Github"></a>探索Coding和Github</h3><p>进入coding之后，我发现它的登录页面和代码远程库的url有变化，所以在本地改了推送的远程仓库。再推送一遍没报错，但网站依然无法访问。<br>然后我看了Coding的代码库静态网站配置，发现了一个奇怪的网站访问地址：<br><img data-src="https://i.loli.net/2020/04/23/MOt6ZUfaEBDjvLW.png"><br>然后尝试打开：<br><img data-src="https://i.loli.net/2020/04/23/vZX9Ow1RbpmFWBo.png"><br>简直是喜大普奔<span class="emoji" alias="smiley" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>，是可以访问的。这下心里的石头落下了一点，最起码有一个在线访问的url了。然而我记得之前coding静态网站的url和github一样，都是代码库的名字，当时域名解析的时候设置的记录值也是这个，但现在变了，解析当然就不生效了，所以要改域名解析设置。<br>但还是先看看github pages可不可以访问，因为之前配置了custom domain，而现在这个域名是不可访问的：<br><img data-src="https://i.loli.net/2020/04/23/FKD4f13LOMao9Wk.png"><br>所以去掉custom domain，网站内容部署到github pages本来的url：<br><img data-src="https://i.loli.net/2020/04/23/KcJ4ilrSbXLqYsy.png"><br>然后再看看部署log，也没问题：<br><img data-src="https://i.loli.net/2020/04/23/Ualby2E5DmYZxKX.png"><br>也是可以访问的:<br><img data-src="https://i.loli.net/2020/04/23/C1UnyFq5ftrZeGb.png"><br>好了，既然现在有两个线上的url都可以访问网站，那么就可以去改域名解析设置了，让这两个url都可以指向jmyblog.top这个域名，理论上问题应该就解决了。</p>
<h2 id="成功解决"><a href="#成功解决" class="headerlink" title="成功解决"></a>成功解决</h2><h3 id="域名绑定coding"><a href="#域名绑定coding" class="headerlink" title="域名绑定coding"></a>域名绑定coding</h3><img data-src="https://i.loli.net/2020/04/23/Skv28M5PJiC1Fwo.png">

<p>首先按照上图中coding静态网站中自定义域名的设置要求，添加下面的CNAME记录，并把之前记录值为coding.me的解析删掉：<br><img data-src="https://i.loli.net/2020/04/23/KWhtRFA6QPTm4SM.png"><br>然后输入绑定域名的时候，要求再添加一条TXT记录(这个忘记截提示信息的图了)，其中主机记录和记录值都是在提示信息给出的：<br><img data-src="https://i.loli.net/2020/04/23/iz1IX9s2cxyLm8D.png"><br>并且成功在coding开启了自定义域名的强制Https访问，一开始SSL证书申请失败，后来按照网上的解决方案去域名解析把GitHub解析暂停就申请成功了。<br>有了上面这两条解析，jmyblog.top已经可以访问了，但是只绑定了coding静态网站，我们还需要绑定github静态网站，实现双部署。</p>
<h3 id="域名绑定github"><a href="#域名绑定github" class="headerlink" title="域名绑定github"></a>域名绑定github</h3><p>和最开始搭建网站的步骤一样，添加一条记录值为github.io的CNAME记录就好：<br><img data-src="https://i.loli.net/2020/04/23/ZpEigb5wcH1CNFQ.png"><br>然后去github pages设置中，加上custom domain，并开启强制Https访问：<br><img data-src="https://i.loli.net/2020/04/23/3IaVCNKXE7WlP49.png"><br>至此，coding pages和github pages都指向jmyblog.top这个域名了，而且都开启了强制Https，现在jmyblog.top已经可以用https访问了，也算是因祸得福<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span><br><img data-src="https://i.loli.net/2020/04/23/9kO3dHV2iwbnRhe.png"><br>而且现在的证书：<br><img data-src="https://i.loli.net/2020/04/23/O51DPZxStkeszNv.png" width="450" height="350"><br>嗯，还是看不懂，不过问题解决了就行。<br>用百度站点工具再做一次Https认证，验证成功：<br><img data-src="https://i.loli.net/2020/04/23/8ucHwDNBkGzvEXZ.png"><br>嗯，这下Https是真的了。<br>本站点最终的域名解析列表：<br><img data-src="https://i.loli.net/2020/04/23/RPNsrEyMSUV9uD1.png"></p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>办公室版围城</title>
    <url>/SomethingsInWork/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/07/18/s819qyRpVilb2Am.png">

<ul>
<li>城市：X市</li>
<li>单位：才华有限公司</li>
<li>角色：G君/L君/H兄/C君/F兄/D兄/王铁锤</li>
</ul>
<div class="note info"><p><strong>G君和L君入职了。</strong></p>
<p>作为应届毕业生的G君，是X市土著，已婚，有留学经历。整体看上去比同龄人少了一丝沧桑，看到G君让王铁锤想到了刚入职的自己，但他可没有G君一样优秀的履历。一段时间下来，周围同事对G君也是一致好评，转正只是时间问题。</p>
<p>L君为社招入职，有3年工作经验，虽与G君同龄但气质更加沉稳，工作上手也很快。与同事相处也很融洽，无槽点，所以王铁锤同样觉得他转正问题不大。</p>
<p><strong>H兄要下项目了</strong></p>
<p>作为项目上的大佬，Leader订了蛋糕并举行了roll off仪式，全项目欢送。王铁锤没有去，因为他刚上项目与H兄并不熟悉亦无交流，加上社恐并不想强行social，所以继续坐在工位上忙(mo)碌(yu)。</p>
<p>G君看到大家都去，也弱弱的问王铁锤「我也要去吗」，王铁锤诚恳回复「可以不去」，但G君依然去social了，王铁锤表示理解，一个新人确实不能冒被人说不合群的风险。</p>
<p>Social结束后，大家回到工位，王铁锤旁边刚上项目的C君看到王铁锤已在工位，疑惑发问「你是刚回来还是没去」，王铁锤淡淡回复「没去」，C君作惊讶状「你为什么不去」，王铁锤只好回复「因为不熟，所以不想强行social」，C君停止发问且表情复杂。</p>
<p><strong>D兄、L兄、F兄要离职了。</strong></p>
<p>D兄在公司over5年了，王铁锤和他比较相熟，也一起呆过几个项目。他为人风趣，在公司朋友很多，经常邀请王铁锤一起聚餐出游。在 <a href="https://jmyblog.top/Silent-protest/">沉默的抗争</a> 事件后也给了王铁锤极大的安慰，或许这个事件对他也有一些影响吧，在后边待了与该事件几个类似的项目后，也离开了。总之，他是一个有能力的人，确实值得更好的。</p>
<p>L兄也是 <a href="https://jmyblog.top/Silent-protest/">上述事件</a> 主要人员之一。事件后王铁锤某次电梯中首次与L兄相遇，寒暄时得知他要离职的消息，惊讶之余同样表示理解，虽然L兄只在公司一年，但任谁在那种项目待下去，都会受不了的。</p>
<p>F兄也是王铁锤相熟的同事，一起呆过几个项目，在公司两年左右。在H兄欢送会结束不久，王铁锤得知他要离职的消息，震惊之余也只能祝好，准备线下再找他八卦一波。</p>
<p>默默离职的D兄/L兄/F兄，对比H兄声势浩大的roll off仪式，不能不让王铁锤感叹世界的参差。</p>
<p><strong>H兄欢送会之后，王铁锤被告知要开始写下半年的期望了。</strong></p>
<p>对于以搬一辈子砖的「不内卷生活」为理想的王铁锤而言，每次搞制定期望或年终总结之类活动的时候，他都不知道自己该干点啥。但为了 <a href="https://jmyblog.top/WorkerStates/">生存</a> ，只得按照套路绞尽脑汁的想点啥写出来。王铁锤无语望天，什么时候才能实现「搬砖自由」呢。</p>
</div>




]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>王铁锤</tag>
      </tags>
  </entry>
  <entry>
    <title>谜一样的测试金字塔</title>
    <url>/Test-Pyramid/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2019/12/30/wVkCrdpXnTN5Pg9.png" alt="题图">

<blockquote>
<p>作为一个优秀的QA(老脸一红)，最近突然对各种测试相关概念产生了兴趣。比如<strong>BDD</strong>，<strong>测试金字塔</strong>等等。<br>其实这些大佬们提出的概念是好的，但我们知道了这些概念，却无法将它应用到实际工作中，或者应用错了，那就很尴尬。<br>因此，对这些概念我们不仅要知其然，更要知其所以然。不要让这些好理论变成假大空的纸上模型，那今天就来分析一下<mark class="label success">“测试金字塔”</mark>理论和实际应用<span class="emoji" alias="sunglasses" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span></p>
</blockquote>
<h2 id="啥是测试金字塔"><a href="#啥是测试金字塔" class="headerlink" title="啥是测试金字塔"></a>啥是测试金字塔</h2><p>测试金字塔是按照分层测试的理论，将各种测试方法和测试对象分层，用来解决敏捷开发中测什么和怎么测的问题。一般划分为四层：<br><img data-src="https://i.loli.net/2020/01/02/tsJBZ4Cv6gKRGFo.png" alt="测试金字塔"></p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>根据单元测试测试范围窄，运行速度快，维护方便的特点，把它放在测试金字塔的最底层，所以它的数量和覆盖率也应当是所有测试中最多的。</p>
<h3 id="服务测试"><a href="#服务测试" class="headerlink" title="服务测试"></a>服务测试</h3><p>第二层，包括集成测试/组件测试/接口测试/契约测试。</p>
<blockquote>
<p>大佬说：所有常见的应用都会和一些外部环境做集成（数据库，文件系统，向其他应用发起网络请求）。为了使测试有更好的隔离、运行更快，我们通常不会在编写单元测试时涉及这些外部依赖。不过，这些交互始终是存在的，它们也需要被测试覆盖到。这正是集成测试的用处所在。它们测试的是应用与所有外部依赖的集成。</p>
</blockquote>
<p>大佬还说：<mark class="label info">服务测试是一个难以掌握的术语，所以很多开发人员完全忽略了这一层。在单页应用框架（如 react，angular，ember.js 等）的时代，UI 测试显然不必位于金字塔的最高层，因为完全可以用这些框架对 UI 进行单元测试。</mark></p>
<h3 id="UI-amp-端到端测试"><a href="#UI-amp-端到端测试" class="headerlink" title="UI&amp;端到端测试"></a>UI&amp;端到端测试</h3><ul>
<li>UI测试</li>
</ul>
<p>就是用户界面测试，有时也可以用某些框架提供的组件来写单元测试代替UI测试，所以UI测试并不等于端到端测试。但主流的UI测试还是用Selenium或者Appium等工具自动化完成的。</p>
<ul>
<li>端到端测试</li>
</ul>
<p>包括针对API和用户界面的端到端测试。</p>
<h3 id="手工测试"><a href="#手工测试" class="headerlink" title="手工测试"></a>手工测试</h3><p>第四层，包括必要的手工测试，探索测试和验收测试。有时候，一些功能无法用自动化进行测试，比如页面的美观性可用性等，只能手工测试。而且尽管有单元测试和自动化测试在前，但依然无法保证覆盖所有边缘情况。此时，一些探索测试是非常有必要的。</p>
<h2 id="一些需要注意的点"><a href="#一些需要注意的点" class="headerlink" title="一些需要注意的点"></a>一些需要注意的点</h2><h3 id="不要纠结各种测试术语"><a href="#不要纠结各种测试术语" class="headerlink" title="不要纠结各种测试术语"></a>不要纠结各种测试术语</h3><p>比如有些人说集成测试就是API测试，UI测试就是端到端测试，有人却说这些概念都是不同的。有人喜欢把集成测试叫组件测试等等。这就会导致同一个东西有很多的名字。容易陷入“你说的黑是什么黑，他说的白是什么白”这种无意义的牛角尖中。这个时候，大佬说的话，就很好<span class="emoji" alias="clap" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8">👏</span>：</p>
<div class="note info"><p>各种测试术语并无绝对的对与错。软件开发社区至今也没法给出关于测试术语的明确定义。<br>术语含义本身有模糊性，不必孜孜不倦于其中。你认为的集成测试，可能和其他公司的人的认知也不同，这也没问题。<br>找到适合你和你团队的术语，这就足够了。</p>
</div>
<h3 id="时刻维护金字塔形状，避免测试重复"><a href="#时刻维护金字塔形状，避免测试重复" class="headerlink" title="时刻维护金字塔形状，避免测试重复"></a>时刻维护金字塔形状，避免测试重复</h3><p>首先要避免在金字塔不同层级进行重复测试，因为浪费时间、浪费金钱<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span><br>在高层次测试发现的问题，想办法写低层测试去覆盖它，尽可能把测试往金字塔下层迁移，维护金字塔形状。</p>
<h3 id="整理测试代码"><a href="#整理测试代码" class="headerlink" title="整理测试代码"></a>整理测试代码</h3><p>重构是个好概念，希望你也知道<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>。<br>测试代码加tag, 根据功能分支分类。<br>运用Given,When,Then口诀写测试，一些BDD的测试工具就很好用，比如 <a href="https://cucumber.io/">Cucumber</a>。</p>
<h2 id="测试金字塔是一成不变的吗"><a href="#测试金字塔是一成不变的吗" class="headerlink" title="测试金字塔是一成不变的吗"></a>测试金字塔是一成不变的吗</h2><mark class="label primary">答案是否定的。</mark>

<p>在实际项目中，上面的三层金字塔模型也许过于简单和概括化了。但它却足够简洁，上述三种测试方法也确实是目前最主流的。所以，可以根据实际情况建立自己的金字塔模型，比如可以再细分几层，把里面的测试方法改成别的等等。但一定要遵守这两条法则：</p>
<ul>
<li>按照测试粒度分层</li>
<li>层次越高，你写的测试应该越少</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span id="inline-toc">1.</span><a href="https://insights.thoughtworks.cn/practical-test-pyramid/">ThoughtWorks洞见-测试金字塔实战</a></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
        <tag>测试金字塔</tag>
      </tags>
  </entry>
  <entry>
    <title>WebUI自动化测试框架Demo(中)</title>
    <url>/WebUI-AutoTest-Demo-2/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/15/hVCWgPazcRirtLj.jpg">

<div class="note info"><p>上篇博客我们已经完成了Demo Project的Set Up, 这篇文章就来简单用TestNG的注解和testng.xml文件，使代码结构更清晰，并实现element object的good practice.</p>
</div>

<h2 id="TestNG介绍"><a href="#TestNG介绍" class="headerlink" title="TestNG介绍"></a>TestNG介绍</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><pre><code>TestNG是一个开源的自动化测试框架， NG表示Next Generation。 
</code></pre>
<p>TestNG的灵感来源于Junit和Nunit,但其功能优于前面两个框架，例如TestNG支持依赖测试，测试分组等功能，并且它旨在涵盖所有类别的测试：单元测试，功能测试，端到端测试，集成测试等等。</p>
<h3 id="同类技术对比"><a href="#同类技术对比" class="headerlink" title="同类技术对比"></a>同类技术对比</h3><p>上篇博客中我们使用了Junit的注解@Test来识别测试代码，所以我们来看看TestNG和Junit的对比：<br><img data-src="https://i.loli.net/2020/05/26/GD37i9WBUE52v8d.png">可以看到TestNG比Junit支持的功能更多，比如分组测试，参数化测试等等。</p>
<h3 id="TestNG注解"><a href="#TestNG注解" class="headerlink" title="TestNG注解"></a>TestNG注解</h3><p>TestNG注解可以标记测试方法，设置测试方法运行顺序，将测试分组，还能向方法体传参。</p>
<p><span id="inline-toc">1.</span> 常见的TestNG注解</p>
<ul>
<li>@Test：最基本的注解，用来把方法标记为测试的一部分</li>
<li>@BeforeTest：在所有测试之前运行</li>
<li>@AfterTest：在所有测试执行之后运行</li>
<li>@BeforeClass：在调用当前类之前运行</li>
<li>@AfterClass：在调用当前类之后运行</li>
<li>@BeforeMethod：在每个测试方法执行之前都会运行</li>
<li>@AfterMethod：在每个测试方法执行之后都会运行</li>
<li>@BeforeGroups：在调用属于该组的第一个测试方法之前运行</li>
<li>@AfterGroups：在调用属于该组的最后一个测试方法执行之后运行 </li>
</ul>
<p><span id="inline-toc">2.</span> 注解运行顺序</p>
<p>TestNG运行时，顺序是这样的：</p>
<p>@BeforeSuite-&gt;@BeforeTest-&gt;@BeforeClass-&gt;{@BeforeMethod-&gt;@Test-&gt;@AfterMethod-&gt;@AfterClass-&gt;@AfterTest-&gt;@AfterSuite</p>
<p>其中{}内的有多少个@Test，就循环执行多少次。</p>
<p><span id="inline-toc">3.</span> 传参注解</p>
<p>有时我们想要把测试数据当作参数传入测试方法，然后在别的地方定义参数对应的测试数据，这时就要用到TestNG的传参注解。</p>
<ul>
<li>@Parameters：描述如何将参数传递给@Test方法，下文中会用到。</li>
<li>@DataProvider：当参数类型较为复杂时，@Parameters无法满足需要，此时可以利用@DataProvider传参标记一种方法来提供测试数据。该方法会返回一个Object二维数组或一个Iterator&lt;Object[]&gt;来提供复杂的参数对象。</li>
</ul>
<h3 id="TestNG的xml文件"><a href="#TestNG的xml文件" class="headerlink" title="TestNG的xml文件"></a>TestNG的xml文件</h3><blockquote>
<p>testng.xml是TestNG的配置文件，以xml格式记录测试文件。xml文件里的tags可以帮助理解测试代码的结构，设置参数数据，还可以和注解配合使用决定测试代码的运行规则，包括测试方法的执行顺序，测试方法个数和分组等等。每一个tag都有自己的参数设置。</p>
</blockquote>
<p>一个简单的testng.xml结构如下：<br><img data-src="https://i.loli.net/2020/05/26/Xb75whadgGBYJ1x.png"></p>
<pre><code>&lt;suite&gt;&lt;/suite&gt;
</code></pre>
<p>suite是testng.xml文档中最上层的元素，一个xml文件只能有一个suite，它是一个xml文件的根级。<br>suite tag的paraller和thread-count参数共同控制多线程运行，实现并发测试。paraller参数指定并发的级别，比如tests/classes/methods级别。thread-count参数指定线程个数。</p>
<pre><code>&lt;test&gt;&lt;/test&gt;
</code></pre>
<p>一个suite tag下可以有多个test tag，它是一个测试单元。</p>
<pre><code>&lt;classes&gt;&lt;/classes&gt;
</code></pre>
<p>方法选择器，要执行的方法写在这里。classes tag下必须包含执行的class，否则不会执行任何内容。</p>
<pre><code>&lt;parameter&gt;&lt;/parameter&gt;
</code></pre>
<p>提供测试数据，和@Parameters注解配合使用。<br>parameter tag可以声明在suite/tests/classes级别，在内层的parameter tag声明的变量会覆盖在外层声明的同名变量。</p>
<h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>TestNG的一般使用步骤是：</p>
<ul>
<li>编写测试业务逻辑代码并添加TestNG的注解</li>
<li>在TestNG的xml文件配置测试信息(如果有需要的话)</li>
<li>运行TestNG的xml文件</li>
</ul>
<p>下文的代码改造会详细介绍怎么做。</p>
<h2 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h2><h3 id="BeforeTest-AfterTest"><a href="#BeforeTest-AfterTest" class="headerlink" title="BeforeTest/AfterTest"></a>BeforeTest/AfterTest</h3><p>要使用TestNG的注解，我们必须添加TestNG依赖，步骤和之前添加Selenium依赖相同：<br><img data-src="https://i.loli.net/2020/05/15/19UmfH3uSvCMDLn.png"><br>接下来就可以使用TestNG的BeforeTest和AfterTest这两个注解了，我们可以把之前代码中在测试开始之前执行的操作，比如设置WebDriver、打开测试url都放在BeforeTest中，把测试执行结束后退出Driver的操作放在AfterTest中，这样改造之后的代码如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">public class SeleniumTest {</span><br><span class="line">    WebDriver driver;</span><br><span class="line"></span><br><span class="line">    @BeforeTest</span><br><span class="line">    public void beforeTest()</span><br><span class="line">    {</span><br><span class="line">        System.setProperty("webdriver.gecko.driver", "drivers/geckodriver");</span><br><span class="line">        driver = new FirefoxDriver();</span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        driver.get("https://www.baidu.com/");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void searchSelenium()</span><br><span class="line">    {</span><br><span class="line">        driver.findElement(By.id("kw")).clear();</span><br><span class="line">        driver.findElement(By.id("kw")).sendKeys("selenium");</span><br><span class="line">        driver.findElement(By.id("su")).click();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @AfterTest</span><br><span class="line">    public void afterTest()</span><br><span class="line">    {</span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="添加自定义testng-xml"><a href="#添加自定义testng-xml" class="headerlink" title="添加自定义testng.xml"></a>添加自定义testng.xml</h3><p>在BeforeTest中，我们手动设置了测试浏览器和url，但标准的做法是将这种设置提出来变成参数传入，而具体的数据可以放在一个单独的文件中。testng.xml文件可以帮助我们实现这点。<br>首先，我们使用TestNG的Parameters注解，将browser和url这两个数据作为参数传入beforeTest做处理，这样改造后的beforeTest方法如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@Parameters({"browser", "url"})</span><br><span class="line">@BeforeTest</span><br><span class="line">public void beofreTest(String browser, String url)</span><br><span class="line">{</span><br><span class="line">    switch (browser){</span><br><span class="line">        case "chrome":</span><br><span class="line">            System.setProperty("webdriver.chrome.driver", "drivers/chromedriver");</span><br><span class="line">            driver = new ChromeDriver();</span><br><span class="line">            break;</span><br><span class="line">        case "firefox":</span><br><span class="line">            System.setProperty("webdriver.gecko.driver", "drivers/geckodriver");</span><br><span class="line">            driver = new FirefoxDriver();</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            System.out.println("can't supply such browser.");</span><br><span class="line">    }</span><br><span class="line">    driver.manage().window().maximize();</span><br><span class="line">    driver.get(url);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>此时运行测试，因为我们没有在系统默认的testng.xml文件<mark class="label info">temp-testng-customsuite.xml</mark>里定义browser和url这两个参数，所以不难猜到运行失败：<br><img data-src="https://i.loli.net/2020/05/15/ogdLlYPhr54WEck.png"><br><img data-src="https://i.loli.net/2020/05/15/8W1a7Y6JSvNrT9Q.png"><br>所以，有两种解决办法：</p>
<ul>
<li>直接改动默认的testng.xml文件</li>
<li>新建自定义testng.xml文件，然后在pom.xml中指定此文件为默认的testng.xml<br>为了方便以后改动，我们采用第二种办法，新建testng.xml，使用<mark class="label info">parameter</mark> tag定义browser和url参数：<img data-src="https://i.loli.net/2020/05/17/vMOhB3FHkNRTnJK.png"></li>
</ul>
<p>此时我们可以在新建的testng.xml文件右键点击运行，就可以运行成功啦。<br>然后在pom.xml文件的maven-surefire-plugin里指定我们要引用的testng.xml，之后使用jenkins部署运行时就不会报错了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;suiteXmlFiles&gt;</span><br><span class="line">      &lt;!--可以添加多个xml文件--&gt;</span><br><span class="line">      &lt;file&gt;testng.xml&lt;/file&gt;</span><br><span class="line">    &lt;/suiteXmlFiles&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置多个Test执行顺序"><a href="#设置多个Test执行顺序" class="headerlink" title="设置多个Test执行顺序"></a>设置多个Test执行顺序</h3><p>我们现在只有1个searchSelenium()的TestCase，如果有多个Test，它们的运行顺序会是怎样的呢？<br>为了找到答案，我们添加一个searchJava()的TestCase:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void searchJava()</span><br><span class="line">{</span><br><span class="line">    driver.findElement(By.id("kw")).clear();</span><br><span class="line">    driver.findElement(By.id("kw")).sendKeys("java");</span><br><span class="line">    driver.findElement(By.id("su")).click();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><span id="inline-toc">1.</span> 在testng.xml中指定执行顺序</p>
<p>首先再回到我们自定义的testng.xml文件，可以发现有一个<methods> tag, 其中包含了所有要执行的test列表，我们把searchJava()也加进去：</methods></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;methods&gt;</span><br><span class="line">    &lt;include name="searchSelenium"/&gt;</span><br><span class="line">    &lt;include name="searchJava"/&gt;</span><br><span class="line">&lt;/methods&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>运行testng.xml可以发现searchSelenium先执行，searchJava后执行。<br>那么把这两个方法在methods list里的顺序交换呢？<br>没错，又变成searchJava先执行，searchSelenium后执行了，所以我们可以通过<strong>设置方法在methods list的顺序，达到指定方法执行顺序的目的。</strong></p>
<p><span id="inline-toc">2.</span> 默认执行顺序</p>
<p>为了看到默认的执行顺序，我们先把methods list注释掉，再运行testng.xml。<br>可以看到依然是searchJava先执行，searchSelenium后执行。没错，默认的执行顺序是<strong>将方法名按照字符串排序的方式执行</strong>的：<br><img data-src="https://i.loli.net/2020/05/17/tOuk64Mg3GCdB51.png"></p>
<p><span id="inline-toc">3.</span> 给testng注解加上priority顺序</p>
<p>其实，我们还可以通过<strong>给方法的@Test直接后边加上priority参数</strong>，数字小的先执行，达到设置执行顺序的目的。为了看到效果，我们将执行顺序设为和默认顺序相反：<br><img data-src="https://i.loli.net/2020/05/17/Z6kA2HVbhOeJPUq.png"><br>运行testng.xml之后，可以发现searchSelenium先执行，searchJava后执行。</p>
<div class="note info"><p>既然priority参数和上边的methods list都能设置执行顺序，那这两种方式谁的优先级更高呢？</p>
</div>
<p>为了解答这个问题，我们去掉testng.xml的注释，运行testng.xml观察效果：<br><img data-src="https://i.loli.net/2020/05/17/geaxQjf2I4JXdqO.png"><br>可以发现仍然是searchSelenium先执行，searchJava后执行。</p>
<blockquote>
<p>所以，priority参数方式要比methods list方式优先级高。</p>
</blockquote>
<h3 id="testng-xml的多线程设置"><a href="#testng-xml的多线程设置" class="headerlink" title="testng.xml的多线程设置"></a>testng.xml的多线程设置</h3><p>多线程运行测试代码，可以减少运行时间，提高测试效率。实际应用中要按照设备/服务器属性进行设置。<br>我们可以通过在testng.xml添加<strong>parallel</strong>和<strong>thread-count</strong>参数达到多线程运行测试的目的：<br>其中：</p>
<ul>
<li>paralle: 表示线程级别</li>
<li>thread-count: 线程个数<br>这里我们按照tests级别，将testng.xml改造如下：<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;</span><br><span class="line">&lt;suite name="Default Suite" parallel="tests" thread-count="2"&gt;</span><br><span class="line">    &lt;parameter name="url" value="https://www.baidu.com/"&gt;&lt;/parameter&gt;</span><br><span class="line">    &lt;test name="Automation1"&gt;</span><br><span class="line">        &lt;classes&gt;</span><br><span class="line">            &lt;class name="org.example.SeleniumTest"&gt;&lt;/class&gt;</span><br><span class="line">            &lt;parameter name="browser" value="chrome"&gt;&lt;/parameter&gt;</span><br><span class="line">        &lt;/classes&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;test name="Automation2"&gt;</span><br><span class="line">        &lt;classes&gt;</span><br><span class="line">            &lt;class name="org.example.SeleniumTest"&gt;&lt;/class&gt;</span><br><span class="line">            &lt;parameter name="browser" value="firefox"&gt;&lt;/parameter&gt;</span><br><span class="line">        &lt;/classes&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">&lt;/suite&gt;</span><br></pre></td></tr></tbody></table></figure>
为了让效果更明显，在每个@Test方法里加上：<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println("Thread id is " + Thread.currentThread().getId());</span><br><span class="line">//打印出方法所在线程id</span><br></pre></td></tr></tbody></table></figure>
接着运行testng.xml，可以看到不同test在不同的线程运行，同一test的测试在一个线程运行：<img data-src="https://i.loli.net/2020/05/17/VlObW86dHQ2Y7ry.png"></li>
</ul>
<h3 id="Element-Object"><a href="#Element-Object" class="headerlink" title="Element Object"></a>Element Object</h3><div class="note info"><p>在实际工作中，编写测试代码的时候，以beforeTest()和searchSelenium()方法为例，我们可以把beforeTest()/afterTest()这种公共方法提出来放在单独的文件中，searchSelenium()方法里的常用/公有元素也提出来放在单独的文件中，公共方法也可以提出来，以实现Element/Page Object，不把测试数据暴露在外边，这样就能更关注于测试代码的设计了。</p>
</div>

<p>根据上边的思想，我们将代码结构改动如下：<br><img data-src="https://i.loli.net/2020/05/26/98npgJdoQbmlvTM.png"><br>新建了两个class文件，SetUp和Functions。<br>SetUp.class用于存放beforeTest方法，然后在测试代码中调用：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.openqa.selenium.WebDriver;</span><br><span class="line">import org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line">import org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"></span><br><span class="line">public class SetUp {</span><br><span class="line"></span><br><span class="line">    WebDriver driver;</span><br><span class="line"></span><br><span class="line">    public WebDriver beofreTest(String browser, String url)</span><br><span class="line">    {</span><br><span class="line">        switch (browser){</span><br><span class="line">            case "chrome":</span><br><span class="line">                System.setProperty("webdriver.chrome.driver", "drivers/chromedriver");</span><br><span class="line">                driver = new ChromeDriver();</span><br><span class="line">                break;</span><br><span class="line">            case "firefox":</span><br><span class="line">                System.setProperty("webdriver.gecko.driver", "drivers/geckodriver");</span><br><span class="line">                driver = new FirefoxDriver();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println("can't supply such browser.");</span><br><span class="line">        }</span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        driver.get(url);</span><br><span class="line">        return driver;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Functions.class里是一些页面元素和操作这些元素的公共方法，也可以在测试代码里直接调用：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line">import org.openqa.selenium.WebDriver;</span><br><span class="line"></span><br><span class="line">public class Functions {</span><br><span class="line"></span><br><span class="line">    public By _searchBox = By.id("kw");</span><br><span class="line">    public By _searchButton = By.id("su");</span><br><span class="line"></span><br><span class="line">    public void searchText(WebDriver driver, String text)</span><br><span class="line">    {</span><br><span class="line">        driver.findElement(_searchBox).clear();</span><br><span class="line">        driver.findElement(_searchBox).sendKeys(text);</span><br><span class="line">        driver.findElement(_searchButton).click();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="TestNG-Report"><a href="#TestNG-Report" class="headerlink" title="TestNG Report"></a>TestNG Report</h3><p>漂亮的测试报告是自动化测试中不可缺少的元素，TestNG也支持生成测试报告，在页面右上角找到Edit Configurations:<br><img data-src="https://i.loli.net/2020/05/17/J4EibfRV2wcI9Du.png"><br>在当前页面找到Listeners然后勾选”Use default reporters”选项，确认：<br><img data-src="https://i.loli.net/2020/05/17/1iVejFuwCdcf7YB.png"><br>再次右键运行testng.xml之后，可以看到项目目录自动生成的”test-output”文件夹，点击test-output文件夹下的index.html文件，在浏览器打开，就可以看到TestNG的测试报告了：<br><img data-src="https://i.loli.net/2020/05/17/BrM578TpDidxc13.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/28b7ae892ed1">Maven + TestNG + Jenkins搭建自动化测试框架</a></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>TestNG</tag>
      </tags>
  </entry>
  <entry>
    <title>当代打工人职场生存现状</title>
    <url>/WorkerStates/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/07/01/UMFEbBhrX6vW5xN.png">


<div class="note default"><p>王铁锤是一个打工人。</p>
<p>因为公司的OKR和KPI制度，他每隔一段时间就要给自己定一些目标和期望，然后到年底或年中的时候，把这些目标拿出来溜溜看完成度，评估后公司再决定涨薪幅度和职级调整。</p>
<p>然而，这些目标不能是王铁锤的日常工作，而是要做一些具体的事情刷存在感，否则到了评估的时候，王铁锤就会因为啥也没干而失去涨薪和升职的可能性。</p>
<p>王铁锤一直很疑惑，明明自己每天都在认真搬砖，为啥做好日常工作就不算对自己的期望和目标了呢？我就想每天搬砖不行嘛？</p>
<p>答案是不行，只要王铁锤在职场里，就不能躲过OKR和KPI制度带来的灵魂拷问，这种制度下，佛系打工是不可能的。</p>
<p>那王铁锤得怎么办呢？</p>
<p>选择一：依然坚持把每天搬砖作为自己的目标和期望</p>
<p>做此选择后，王铁锤可以实现自己佛系打工的愿望，但只能维持几年。<br>随着新人不断涌入，王铁锤会逐渐陷入这样一种境地：年龄比新人高，工作年限比新人高，<del>工资比新人高</del>(随着工资倒挂现象愈发严重，此项大概率作废)，做的事情和新人一样。<br>到了最后，公司会裁掉他以防影响到其它做选择二的员工。</p>
<p>选择二：制定符合公司OKR/KPI制度的目标和期望</p>
<p>做此选择后，王铁锤将很难实现自己佛系打工的愿望。<br>他得按照套路，制定一些匹配自己甚至更高职级水平的目标，和别的同事一起卷起来，这样才能符合公司的期望，在职场里生存下去。<br>但也只能做到生存，至于升职？加薪？呵呵，随缘吧。<br>就算王铁锤卷成功了，随着职级变高，他需要达到的目标也越来越难实现，内卷的成功率也越来越低，这样在一个职级上一直停留，等待他的也只能是被裁掉，或者主动退出这个内卷修罗场。</p>
<p>选择三：转到一个内卷没有那么残酷的行业</p>
<p>王铁锤有想过找一个没有内卷，没有年龄焦虑的行业，比如教师。然而先不想自己适不适合做，能否转行成功，主要现在他严重怀疑这个选择还存不存在。也想过考公，找个铁饭碗，可每年考公人数那么多，录取比例也极低，让人望而却步。</p>
<p>王铁锤不知道自己还能有什么选择，他是一个拒绝内卷的佛系青年，没有太多欲望。从开始打工到现在，他一直在做选择一，但时间长了，好像又不得不做选择二。至于选择三，王铁锤也一直在观望。</p>
<p>先这样吧，希望王铁锤可以找到一个改变的契机。</p>
</div>

]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>王铁锤</tag>
      </tags>
  </entry>
  <entry>
    <title>WebUI自动化测试框架Demo(下)</title>
    <url>/WebUI-AutoTest-Demo-3/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/19/dKSi3gZFTJchr6P.png">

<div class="note info"><p>上篇博客我们已经完成了Demo Project的代码优化, 这篇文章我们就利用Jenkins和GoCD这两种工具来实现Demo Project的持续集成。</p>
</div>

<h2 id="CI-amp-CD介绍"><a href="#CI-amp-CD介绍" class="headerlink" title="CI&amp;CD介绍"></a>CI&amp;CD介绍</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><pre><code>持续集成CI(Continuous Integration)
</code></pre>
<p>持续集成指的是，频繁地（一天多次）将代码集成到主干。基本流程为：</p>
<ul>
<li>提交代码</li>
<li>执行第一轮测试(单元/集成测试)</li>
<li>代码合到master</li>
</ul>
<pre><code>持续交付(Continuous Delivery)
</code></pre>
<p>持续交付指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，当前代码就是一个可以直接部署的版本。基本流程为：</p>
<ul>
<li>代码集成完成</li>
<li>构建项目，将源码转换为可以运行的实际代码</li>
<li>执行第二轮测试(端到端/手工测试)</li>
</ul>
<pre><code>持续部署(Continuous Deployment)
</code></pre>
<p>持续部署是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。基本流程为：</p>
<ul>
<li>持续交付流程完成</li>
<li>利用工具自动部署到生产环境</li>
</ul>
<p>持续部署和持续交付的区别在于，前者可以自动化部署过程，后者只能手工部署。</p>
<h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>CI&amp;CD的实现离不开自动化工具，比较流行的有关注持续集成的Jenkins/Travis CI/…, 关注持续交付/部署的GoCD等等。</p>
<h2 id="使用Jenkins集成"><a href="#使用Jenkins集成" class="headerlink" title="使用Jenkins集成"></a>使用Jenkins集成</h2><blockquote>
<p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
</blockquote>
<p>完成后的效果，小太阳标志：<br><img data-src="https://i.loli.net/2020/05/17/Q5FMxDSWvgNUoXB.png"><br>首先把本地的DemoProject推送到Github，然后请直接按照 <a href="https://www.jianshu.com/p/28b7ae892ed1">这篇文章的Jenkins部分</a> 设置，已经写的很详细了，主要包括：</p>
<p><span id="inline-toc">1.</span> Jenkins安装：在本地8080端口运行Jenkins并设置管理员账号</p>
<blockquote>
<p>小知识：WAR(Web应用程序归档，英語：Web application archive)，也是一种Java归档，存储XML文件、Java类、JSP和Web应用程序中的其他文件。</p>
</blockquote>
<p><span id="inline-toc">2.</span> Jenkins配置：添加JDK和Maven<br><span id="inline-toc">3.</span> Jenkins添加GitHub server：Github生成token并在github的DemoProject项目里添加本地Webhook</p>
<blockquote>
<p>这部分Payload URL里的Jenkins server IP就是你电脑的IP，可以通过<strong>ifconfig</strong>命令获得，在结果的最后一行。</p>
</blockquote>
<p><span id="inline-toc">4.</span> Jenkins新建并配置Maven项目：绑定Github的DemoProject<br><span id="inline-toc">5.</span> Jenkins运行Maven项目并查看结果</p>
<h2 id="使用GoCD集成"><a href="#使用GoCD集成" class="headerlink" title="使用GoCD集成"></a>使用GoCD集成</h2><pre><code>GoCD是一种开源工具，用于软件开发，可帮助团队和组织使软件的持续交付/部署(CD)自动化。
</code></pre>
<p>完成后的效果，绿色的pipeline：<br><img data-src="https://i.loli.net/2020/05/26/eKa2fnP1oMQB7WL.png"></p>
<h3 id="下载GoCD-Server-amp-Agent"><a href="#下载GoCD-Server-amp-Agent" class="headerlink" title="下载GoCD Server&amp;Agent"></a>下载GoCD Server&amp;Agent</h3><div class="note primary"><p>Server和Agent</p>
<p>GoCD的基础架构由Server和Agent组成，Server 负责配置和控制，Agent负责执行。</p>
<p>Server：控制一切配置，关联仓库，触发pipeline执行，配置每个Job对应的Agent，将Job分配给Agent去执行，整理信息判断该Stage的状态。<br>Agent：接收Server分配的Job，执行Job下的Task（运行命令、部署等），并将Job的状态报告给Server。</p>
</div>

<p>打开GoCD官网 <a href="https://www.gocd.org/download/#osx">下载页面</a>, 根据系统下载：<br><img data-src="https://i.loli.net/2020/05/28/UmGMZHN7CudP5zJ.png"><br>这里我们下载19.9.0版本，所以点击下方 show old releases按钮，下载Server&amp;Agent:<br><img data-src="https://i.loli.net/2020/05/28/tUZ5lM4WDznbroh.png"><br>解压后放在新建的Pipeline文件夹下，就安装完成了：<br><img data-src="https://i.loli.net/2020/05/28/TZPhSqW6frYkC7b.png"></p>
<h3 id="启动Server-amp-Agent"><a href="#启动Server-amp-Agent" class="headerlink" title="启动Server&amp;Agent"></a>启动Server&amp;Agent</h3><p>首先确保自己安装了Java11, 然后切换到server目录执行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./bin/go-server console</span><br></pre></td></tr></tbody></table></figure>
<p>启动GoCD Server:<br><img data-src="https://i.loli.net/2020/05/28/AgyOR9KpqYLvHPl.png"><br>Server启动成功后，默认的端口号是 8153/8154 (HTTPS)，访问 <a href="https://localhost:8154/">https://localhost:8154</a> 就可以看到GoCD Server页面啦：<br><img data-src="https://i.loli.net/2020/05/28/roFANt8naqGH9SR.png"><br>打开一个新的终端窗口，同样切换到agent目录执行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./bin/go-agent console</span><br></pre></td></tr></tbody></table></figure>
<p>启动GoCD Agent:<br><img data-src="https://i.loli.net/2020/05/28/yRMoriNK2bQlqUh.png"></p>
<h3 id="创建Pipeline"><a href="#创建Pipeline" class="headerlink" title="创建Pipeline"></a>创建Pipeline</h3><p>回到Server页面，点击页面按钮，创建Pipeline。</p>
<pre><code>Pipeline: 管道，在GoCD里，Pipeline就像是一个工作流水线。它的结构如下所示：
</code></pre>
<img data-src="https://i.loli.net/2020/05/28/T5nXiopQ4OAWVNC.png">
首先指定Pipeline的Material，就是Demo Project在Github上的仓库地址：
<img data-src="https://i.loli.net/2020/05/28/wPsHAvpSVMeg3bh.png">


<pre><code>Material
</code></pre>
<p>用来触发Pipeline的条件，可以是代码的存储仓库，可以是其他Pipeline某个Stage执行成功后的产出。在这里，我们把Github仓库作为Material，如果有新的改动会触发Pipeline重新运行。</p>
<p>接着输入Pipeline名字，自定义就可以。这里我设为Auto:<br><img data-src="https://i.loli.net/2020/06/01/WoS7B3KN4qYL8jF.png"><br>输入Stage名字，这里我设为Test：<br><img data-src="https://i.loli.net/2020/06/01/EAmzj12fKLsvOrt.png"></p>
<pre><code>Stage
</code></pre>
<p>pipeline可以有多个Stage，每个Stage按照顺序执行，一个Stage Fail，则不会执行后边的Stage，pipeline也会是Fail状态。比如常见的这几个stage: Build，Package，Deploy，Smoke，FunctionTest</p>
<p>创建job和tasks，这里创建了一个名为run_tests的job, 并给它加上一个task，脚本命令:mvn test<br><img data-src="https://i.loli.net/2020/06/01/6Oxp31ysZQ8goe7.png"></p>
<pre><code>Job
</code></pre>
<p>一个Stage可以有多个Job，多个Job之间是相互独立的，一个Job失败，不会影响其他Job的执行，但是一个Stage中的任何一个Job失败，则这个Stage失败</p>
<pre><code>Task
</code></pre>
<p>一个Job由一个或多个Task组成，且Task按照顺序执行，一个Task fail，则后续的Task都不会被执行。Task就是Script，用命令行对代码进行进行编译，部署，或者运行测试。</p>
<p>点击”Save + Edit Full Config”按钮，保存pipeline并进入pipeline的设置界面，可以看到，它是按照 pipeline(Auto)-&gt; stage(Test) -&gt; job(run_tests)的结构展示的，在job的Tasks tab中，也已经加上了我们上边设置的mvn test：<br><img data-src="https://i.loli.net/2020/06/01/l2WCYqejKFuw9hX.png"><br>首先打开Auto pipeline设置，在Materials Tab下，可以看到我们设置的远程仓库地址：<br><img data-src="https://i.loli.net/2020/06/01/hguki5Ctl8zaHST.png"><br>接着点击上边的Url, 进入Edit Material页面，给Material加上一个Destination Directory，然后保存。因为在运行pipeline的时候，Server会从远程仓库克隆代码到Agent上去运行，需要设置Destination Directory，Server就会把克隆的的代码放进这个Destination Directory里，所以它的名字一般就是代码库的名字：<br><img data-src="https://i.loli.net/2020/06/01/1VJ6r2bRQI3BLOx.png" width="340" height="380"><br>接着进入job设置页面，点击右边的Tasks Tab：<br><img data-src="https://i.loli.net/2020/06/01/l2WCYqejKFuw9hX.png"><br>点击Custom Command按钮，进入Edit Custom Command task页面。将Working Directory设为我们刚才添加的Destination Directory，然后保存：<br><img data-src="https://i.loli.net/2020/06/01/pwLmgRn7GHTEFlC.png" width="340" height="430"><br>到这里，Pipeline就已经创建好了。</p>
<h3 id="运行pipeline"><a href="#运行pipeline" class="headerlink" title="运行pipeline"></a>运行pipeline</h3><h4 id="运行成功"><a href="#运行成功" class="headerlink" title="运行成功"></a>运行成功</h4><p>回到Pipeline首页, 点击Pause按钮，取消pipeline的暂停状态，取消之后pipeline就会自动运行了：<br><img data-src="https://i.loli.net/2020/06/01/jAINYbglrB7HFd2.png" width="340" height="300"><br><img data-src="https://i.loli.net/2020/06/01/MbOUDyBxQjirYHZ.png" width="340" height="300"><br>如果我们的代码没有问题，前面的设置也做好了的话，在运行过程中应该会跳出chrome/firefox窗口测试。pipeline就会运行成功了(绿色的标志)：<br><img data-src="https://i.loli.net/2020/06/01/XugQEJG6SR8wylx.png" width="340" height="300"></p>
<h4 id="console-log和本地目录结构解读"><a href="#console-log和本地目录结构解读" class="headerlink" title="console log和本地目录结构解读"></a>console log和本地目录结构解读</h4><p>点击绿色状态条进入运行结果界面，里面有当前代码库的版本号，作者，以及comment信息；还可以在右侧看到运行历史，以后多次运行的时候，也可以看到之前的运行结果：<br><img data-src="https://i.loli.net/2020/06/01/CPNkGsM58eKozlv.png"><br>点击上图中的job名称run_tests，可以看到本次运行的console log:<br><img data-src="https://i.loli.net/2020/06/01/fHeIkUuWD9Ynhc3.png"><br>观察console log我们可以理解pipeline的运行流程：</p>
<p><span id="inline-toc">1.</span> Server开始准备并克隆代码到Agent<br><img data-src="https://i.loli.net/2020/06/01/3bL6KV7ivwufAcX.png"><br>上图中，Agent会生成Auto/1/Test/1/run_tests文件夹记录本次运行信息，然后，Server克隆远程代码到Agent对应的Pipeline文件夹下：<br><img data-src="https://i.loli.net/2020/06/01/xghnt9A7YDJWC4l.png"><br>第一次运行之后，Server将会持续check远程仓库中的代码更新，并自动运行Pipeline，这是它的默认机制。<br><span id="inline-toc">2.</span> 设置环境变量<br><img data-src="https://i.loli.net/2020/06/01/BUsoWfS85gyjxvk.png"><br><span id="inline-toc">3.</span> 在Agent运行task<br>准备工作做好之后，Server就会把Job分配给Agent去执行，这里是build代码并执行命令 <strong>mvn test</strong> , 输出内容在本系列第一篇博客介绍Maven的时候已经给大家 <a href="https://jmyblog.top/WebUI-AutoTest-Demo-1/#%E4%BD%BF%E7%94%A8Maven%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">剖析过了</a> :<br><img data-src="https://i.loli.net/2020/06/01/UMBKXvbWL9siulE.png"><br><span id="inline-toc">4.</span> Agent将运行结果报告给Server<br><img data-src="https://i.loli.net/2020/06/01/R3enSwrBATx1zYE.png"><br>Agent将记录本次运行信息的文件夹Auto/1/Test/1/run_tests，上传到本地Server文件夹下：<br><img data-src="https://i.loli.net/2020/06/01/eObyG4WmvJHg9hP.png"></p>
<pre><code>Artifact
</code></pre>
<p>Artifact是运行Job的产出物，在Agent生成，由Server接收并保存。存放在上图的 <strong>artifact</strong> 文件夹下。<br>比如此次运行中Agent生成的Auto/1/Test/1/run_tests文件夹，就是由Server接收保存的。它有一个保存运行日志console.log的cruise-output文件夹：<br><img data-src="https://i.loli.net/2020/06/01/mv1zS4twIC7d6G8.png"><br>运行结束之后，在页面上也可以看到它：<br><img data-src="https://i.loli.net/2020/06/01/IgyWiRALq1Kfh3x.png"></p>
<h3 id="利用Custom-Tabs展示测试报告"><a href="#利用Custom-Tabs展示测试报告" class="headerlink" title="利用Custom Tabs展示测试报告"></a>利用Custom Tabs展示测试报告</h3><p>我们已经理解了Artifact的概念，知道它是在Agent生成，由Server接收并保存的。</p>
<blockquote>
<p>还记得我们在本系列第二篇博客中提到的 <a href="https://jmyblog.top/WebUI-AutoTest-Demo-2/#TestNG-Report">TestNG测试报告</a> 吗？它也是在Agent生成的，这里我们就新建一个Artifact来让Server接收Agent生成的TestNG测试报告，并利用Custom Tabs将它展示在页面上。</p>
</blockquote>
<p>回到首页，点击Auto的设置按钮：<br><img data-src="https://i.loli.net/2020/06/01/hrjgN7QpREdlCwZ.png" width="340" height="300"><br>进入Job run_tests的Artifacts Tab, 添加一个Test Artifact:<br><img data-src="https://i.loli.net/2020/06/01/9tJCNTMsRaGWxqV.png"><br><img data-src="https://i.loli.net/2020/06/02/r3DHx1Oz9tKXmqv.png"><br>这里的Source就是指Artifact在Agent的生成路径，由于Agent的Working Directory是AutoTest文件夹，所以这里我们用Agent本地文件夹的绝对路径 <strong>AutoTest/target/surefire-reports</strong> 来获得测试报告。<br>没错，Maven的surefire插件会帮我们保存TestNG测试报告index.html:<br><img data-src="https://i.loli.net/2020/06/01/xuiPTJvkBZ9Rpsw.png"><br>Destination就是Server存放测试报告的路径，这里是相对路径。我们指定TestResult文件夹来保存测试报告，它比较完整的路径是 run_tests/TestResult，和上文中artifact文件夹下的run_tests/cruise-output是同一级。</p>
<p>保存之后，切换到Custom Tabs下，新建TestResult Tab，用来展示我们获取的index.html文件，路径 <strong>TestResult/surefire-reports/index.html</strong> ：<br><img data-src="https://i.loli.net/2020/06/02/Mvn2PpYIl7DfOaK.png"></p>
<p>保存，然后再次运行Pipeline:<br><img data-src="https://i.loli.net/2020/06/01/bTX3FeNJ5hqHPZ4.png" width="340" height="300"><br><img data-src="https://i.loli.net/2020/06/01/tuKZHPbk3hoUlFe.png" width="340" height="300"><br>运行完成之后，在console log可以看到Agent上传测试报告的过程，首先是把surefire-reports文件夹下的内容上传到Server的TestResult文件夹，然后还上传了Agent自己生成的index.html测试报告到系统默认的testoutput文件夹：<br><img data-src="https://i.loli.net/2020/06/01/1x34XyBNoG25imq.png"></p>
<p>在Artifacts Tab可以看到多了两个artifact文件夹，TestResult文件夹是我们添加的，testoutput文件夹是系统默认生成的，它们都是test artifact：<br><img data-src="https://i.loli.net/2020/06/01/BY1ikDzFc4Rl8Hf.png" width="370" height="500"><br>图中一共有3个index.html文件，图片下方的index.html和testoutput/result文件夹里的index.html是Agent自己生成的测试报告，内容一致，默认会放在名为testoutput的Test Artifact文件夹里。展示在Test Tab下：<br><img data-src="https://i.loli.net/2020/06/01/Lzy8UaEvg5HcIFu.png"><br>TestResult Tab里展示的是我们指定的surefire文件夹下的index.html文件：<br><img data-src="https://i.loli.net/2020/06/01/odCli5zbFgDXpHN.png"></p>
<h3 id="其它的pipeline设置"><a href="#其它的pipeline设置" class="headerlink" title="其它的pipeline设置"></a>其它的pipeline设置</h3><p>以上都是最基本的GoCD使用，它还有很多比较高端的设置，这里再举几个例子。<br><span id="inline-toc">1.</span> Label Template<br>pipeline的build number可以自己配置，默认是1/2/3。实际项目中，build number一般会表示特定的含义，比如版本号等等：<br><img data-src="https://i.loli.net/2020/06/02/JNd7UVsXEutA2qy.png"><br><span id="inline-toc">2.</span> Timer Settings<br>可以设置触发Pipeline的运行时间，有固定的语法，比如 ‘0 0 10 ? * MON-FRI’ 就是让pipeline在周内每天早上10点整运行：<br><img data-src="https://i.loli.net/2020/06/02/MY8bkZ7LoXTAVtz.png"><br><span id="inline-toc">3.</span> Agent的Resource标签<br>当有多个Agent时，可能每个Agent有不同的配置，不同的空间大小，根据Agent的不同，可以通过设置Resource标签指定Job在某一类的Agent上执行：<br><img data-src="https://i.loli.net/2020/06/01/KOsPSIf9gWkwGYD.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/28b7ae892ed1">Maven + TestNG + Jenkins搭建自动化测试框架</a></li>
<li><a href="https://devops.phodal.com/home">DevOps 元素周期表</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">阮一峰：CI&amp;CD是什么</a></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Jenkins</tag>
        <tag>GoCD</tag>
      </tags>
  </entry>
  <entry>
    <title>测试课程学习笔记第一弹：自动化测试理论</title>
    <url>/auto-test-learning/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2019/11/19/bKwNRZ3XJYpPyI5.png" alt="题图" height="400" width="600">

<blockquote>
<p>近段时间报名了一个自动化测试课程，首先学习了自动化测试理论。有很多也是我目前在做的，还有一些之前没有了解到。所以想整理一下，分点描述。</p>
</blockquote>
<mark class="label success">绿色</mark>是我目前在做的，<mark class="label warning">黄色</mark>是在实践但没有深入了解的，<mark class="label danger">红色</mark>是我没有了解或者没有实践的。

<h2 id="分层测试体系"><a href="#分层测试体系" class="headerlink" title="分层测试体系"></a>分层测试体系</h2><p>也就是说自动化测试，要根据 <mark class="label success">测试金字塔</mark>分层来做。之前我写了 <a href="http://jmyblog.top/Test-Pyramid/">这篇文章</a> 总结了一下。 </p>
<h2 id="自动化测试场景"><a href="#自动化测试场景" class="headerlink" title="自动化测试场景"></a>自动化测试场景</h2><ul>
<li><mark class="label success">冒烟测试</mark>：check主要功能</li>
<li><mark class="label success">功能测试</mark>：自动化case覆盖功能</li>
<li><mark class="label danger">验收测试</mark>：兼容性测试，可用性测试，无障碍测试等，这部分我目前是Manual测试</li>
<li><mark class="label danger">性能测试</mark>： 测试性能/卡顿/应用健壮性，这部分也没了解过，我目前没做过</li>
</ul>
<h2 id="对自动化测试的错误观点和假“瓶颈”"><a href="#对自动化测试的错误观点和假“瓶颈”" class="headerlink" title="对自动化测试的错误观点和假“瓶颈”"></a>对自动化测试的错误观点和假“瓶颈”</h2><p>澄清了一些对自动化测试常见的错误观点，还有我们“以为”的瓶颈<span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p>
<p><span id="inline-toc">1.</span> <mark class="label success">UI和业务流程变更导致自动化测试代码不可用</mark></p>
<p>这种问题其实是一种Technical debt.<br>比如一般UI自动化测试，都是根据 <strong>id/class</strong> 等属性定位页面元素，然后对页面进行测试的。然而，这些元素并非一成不变，这就导致需要频繁更换，使代码变得难以维护，此时我们可以在写测试的时候，要求开发给元素加上一个固定的 <strong>QA-hook</strong>，这样就不用频繁更换了。</p>
<p><span id="inline-toc">2.</span> <mark class="label danger">UI自动化测试只能模拟人工</mark></p>
<p>另一种说法是“UI自动化测试”就是机器点点点。<br>按课程所说，UI自动化测试发展到现在是有3个阶段：</p>
<div class="note default"><ul>
<li><mark class="label success">传统自动化测试</mark>：就是我现在做的，写常规测试，加断言，需要用例维护。可以帮助做回归测试。</li>
<li><mark class="label danger">自动探索测试</mark>：可以利用自动化对新功能进行测试，也可以对老功能做回归。没有接触过。</li>
<li><mark class="label danger">codeless方向及智能生成测试用例方向</mark>：自动智能化生成case，不用写代码就可以完成自动化测试。也没有接触过。</li>
</ul>
</div>

<h2 id="根据分层测试体系控制自动化场景和规模"><a href="#根据分层测试体系控制自动化场景和规模" class="headerlink" title="根据分层测试体系控制自动化场景和规模"></a>根据分层测试体系控制自动化场景和规模</h2><p>就是在项目开发上线整个流程中的自动化测试实践，主要是三个部分：<br><span id="inline-toc">1.</span> <mark class="label success">核心用例自动化覆盖</mark><br>写Smoke测试覆盖核心功能，这块已经实践了。<br><span id="inline-toc">2.</span> <mark class="label success">基础回归自动化覆盖</mark><br>老功能用自动化覆盖，也实践了。<br><span id="inline-toc">3.</span> <mark class="label success">新功能手工测试</mark><br>这块其实说的有点笼统，应该是对新功能做一些不能自动化的测试，比如探索测试，可用性测试等等。基础的功能测试应当提前写好自动化case去覆盖。</p>
<h2 id="如何高效落地自动化"><a href="#如何高效落地自动化" class="headerlink" title="如何高效落地自动化"></a>如何高效落地自动化</h2><p>以移动端自动化测试为例，要做到三点：<br><span id="inline-toc">1.</span> <mark class="label warning">了解待测产品和平台</mark><br>移动端有Android/iOS/App/小程序等应用，我是没有深入了解其差异的。而Desktop端有哪些应用也并没有了解。<br><span id="inline-toc">2.</span> <mark class="label warning">精通好的测试框架</mark><br>比如Selenium(虽然是TW开发的), Appium等等，前者目前在用，但远远谈不上精通。后者完全无了解。<br><span id="inline-toc">3.</span> <mark class="label warning">掌握一些自动化测试代码编写技巧和关键点</mark><br>比如PageObject模型，TDD，智能等待，失败重试机制。这些 Good Practice 项目上在用，但自己没有深入了解。</p>
<h2 id="常用自动化测试框架"><a href="#常用自动化测试框架" class="headerlink" title="常用自动化测试框架"></a>常用自动化测试框架</h2><ul>
<li><mark class="label warning">Web应用自动化</mark>：Selenium</li>
<li><mark class="label danger">App手机应用自动化</mark>：Appium</li>
<li><mark class="label danger">PC端的应用的GUI自动化</mark>：Unkown</li>
<li><mark class="label danger">微信小程序自动化</mark>：App+Web测试技术的外延形态</li>
<li><mark class="label danger">智能设备自动化</mark>：Unknown</li>
</ul>
<h2 id="自动化遍历测试和探索测试工具"><a href="#自动化遍历测试和探索测试工具" class="headerlink" title="自动化遍历测试和探索测试工具"></a>自动化遍历测试和探索测试工具</h2><p>是指能够以自动化的方式对 app 进行充分的功能遍历以探索 bug 的工具，以移动端为例。</p>
<ul>
<li><mark class="label danger">Android原生Monkey</mark></li>
<li><mark class="label danger">百度 SmartMonkey</mark></li>
<li><mark class="label danger">腾讯 NewMonkey</mark></li>
<li><mark class="label danger">阿里 Macaca 的 NoSmoke</mark></li>
<li><mark class="label danger">Google出品的 AppCrawler</mark></li>
</ul>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><div class="note info"><p>这么多的红色和黄色，主要是一些新型工具的学习，看来真是学海无涯啊<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span></p>
</div>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网站评论回家了</title>
    <url>/comments-comeback/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/19/5qCbYiSNDszno3y.png">

<p>这张题图很能表示我现在激动的心情<span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><div class="note info"><p>博客建立伊始，也就是2017年那个夏天，我就开始用livere评论系统。<br>后来出现过两次评论消失的情况，第一次是17/9，当时是因为改了博客的url，所以也就丢失了。<br>第二次不知道是啥时候，经常出现博客评论莫名消失的情况，所以只能在管理后台看到评论：</p>
</div>

<img data-src="https://i.loli.net/2020/05/19/FO4KepHxIStEDLn.png">

<p>开始的时候觉得无所谓，后来时间长了，感觉评论还是挺重要的，否则老感觉博客没人访问一样冷冷清清<span class="emoji" alias="pensive" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8">😔</span>。<br>然后就开始搜解决办法，但好像没有遇到跟我相似情况的小伙伴，再加上工作忙(lan)慢慢这个事也就放下了。直到今天，我终于找回了我的评论。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>多亏了<a href="https://vikifish.cn/2020/04/18/Hexo-theme-nexT-livere-comments-bug/#more">这篇博客</a>给出的解决办法：</p>
<div class="note primary"><p>其实第二次评论消失的原因是livere插件代码中的refer值设置问题。<br>refer是个参数，评论的添加与获取都是会带上这个参数的。而默认的refer值是根据当前页面的url来获取的，如果设置的不对，就会导致评论页面地址和网页实际地址不符合，因此文章的评论无法在页面显示。<br>所以改动插件代码(虽然以前的refer设置我也看不懂是个啥)：</p>
</div>

<img data-src="https://i.loli.net/2020/05/19/sdVryhuHgqZnl15.png">

<p>我的评论就回来了！！！简直就是活生生的博客历史啊有没有，可以追溯到17年：<br><img data-src="https://i.loli.net/2020/05/19/SrmgpshDyx3n7UV.png"></p>
<p>但是第一次因为url改动而消失的评论(2017.9.11之前的)真的回不来了：<br><img data-src="https://i.loli.net/2020/05/19/KCegVLdTGMYb7pO.png"></p>
<p>所以，欢迎大家的热情评论呀～撒花花🎉🎉🎉</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>突然发现livere不支持微信和QQ登录了，给官网发了消息在等回复。希望可以支持，否则就要考虑换个评论系统了，比如Valine啥的。<br>之前使用DaoVoice可以在线交流，很方便，但之前更新博客的时候不知道为毛一加上它，博客就不能显示，还在研究。。。</p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓模拟器快速冷启动</title>
    <url>/emulator-cold-boot/</url>
    <content><![CDATA[<div class="note info"><p>问题</p>
</div>

<p>博主最近搬砖，发现安卓模拟器有一些小bug，最常见的是App打不开，得冷启动模拟器后，卸载App重新安装才可以。由于项目暂时用不了真机，只能在模拟器测试，所以经常遇到这个问题，每次都得重复这个步骤：<mark class="label primary">冷启动模拟器-&gt;卸载App-&gt;安装App</mark>。</p>
<div class="note info"><p>解决</p>
</div>

<p>首先冷启动模拟器：</p>
<p><img data-src="https://i.loli.net/2021/08/03/rTQ1wObeRgiEqya.png" alt="Cold Boot"><br>卸载测试App，之后点击模拟器右侧菜单栏 <strong>…</strong> 按钮进入高级设置，然后进入Snapshots选项，点击TAKE SNAPSHOT：</p>
<p><img data-src="https://i.loli.net/2021/08/03/JYDru2NTiqeoG8Q.png" alt="TAKE SNAPSHOT"><br>之后可以看到新的snapshot，这里我命名为quickboot：</p>
<p><img data-src="https://i.loli.net/2021/08/03/ZEwqUF9OSnTQaI6.png" alt="命名snapshot"><br>打开AVD Manager页面，编辑刚才的模拟器，在高级设置中选择通过snapshot启动模拟器，点击finish：</p>
<p><img data-src="https://i.loli.net/2021/08/03/dl2a1SJIHDR6knA.png" alt="编辑设置"><br>最后再打开编辑页面检查一遍，确保设置正确，我自己设置的时候，发现这里要选择两次才可以，感觉又是AVD Manager的一个bug。<br>设置完成后，以后再打开模拟器测试，就是一个干净的测试环境了，只需要再安装测试App就可以了，再也不用经常手动冷启动了。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>emulator</tag>
        <tag>coldBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java判断素数</title>
    <url>/java%E5%88%A4%E6%96%AD%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<p>嗯，就是来秀插件的。</p>
<span id="more"></span>

<iframe height="498" width="666" src="http://player.youku.com/embed/XMzU1ODc3NDU2NA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类中的代码块执行顺序</title>
    <url>/java%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>代码实例分析java类中的代码块执行顺序.</p>
<span id="more"></span>

<h1 id="一道笔试题"><a href="#一道笔试题" class="headerlink" title="一道笔试题"></a>一道笔试题</h1><p>下面是一道阿里的java校招笔试题：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloA</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	<span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		System.out.println(<span class="string">"父类构造方法"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//非静态代码块</span></span><br><span class="line">	{</span><br><span class="line">		System.out.println(<span class="string">"父类非静态代码块"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">	<span class="keyword">static</span>{</span><br><span class="line">		System.out.println(<span class="string">"父类静态代码块"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloB</span> <span class="keyword">extends</span> <span class="title">HelloA</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	<span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		System.out.println(<span class="string">"子类构造方法"</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//非静态代码块</span></span><br><span class="line">	{</span><br><span class="line">		System.out.println(<span class="string">"子类非静态代码块"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">	<span class="keyword">static</span>{</span><br><span class="line">		System.out.println(<span class="string">"子类静态代码块"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="keyword">new</span> HelloB();</span><br><span class="line">		<span class="keyword">new</span> HelloB();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>请写出上述代码的输出，看完本文你就会有答案。</p>
<h1 id="代码块分类及其执行顺序"><a href="#代码块分类及其执行顺序" class="headerlink" title="代码块分类及其执行顺序"></a>代码块分类及其执行顺序</h1><h2 id="代码块分类"><a href="#代码块分类" class="headerlink" title="代码块分类"></a>代码块分类</h2><p>代码块，就是使用”{}”定义的一段代码，根据代码块定义的位置和关键字，可分为以下四种：</p>
<ul>
<li>普通代码块：定义在类的方法中的代码块。</li>
<li>构造块：定义在类中的代码块（无修饰符）。</li>
<li>静态代码块：使用static修饰的，在类中定义的代码块。</li>
<li>同步代码块（与多线程有关，本文不涉及）</li>
</ul>
<h2 id="执行顺序（无继承）"><a href="#执行顺序（无继承）" class="headerlink" title="执行顺序（无继承）"></a>执行顺序（无继承）</h2><p>看代码：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		System.out.println(<span class="string">"非主类构造方法"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	{</span><br><span class="line">		System.out.println(<span class="string">"非主类构造块,优于构造方法执行"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> {</span><br><span class="line">		System.out.println(<span class="string">"非主类静态块，优于构造块执行，无论产生多少实例化对象，只执行一次。"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		System.out.println(<span class="string">"主类构造方法"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		System.out.println(<span class="string">"----start----"</span>);</span><br><span class="line">		<span class="keyword">new</span> Hello();</span><br><span class="line">		<span class="keyword">new</span> Person();</span><br><span class="line">		<span class="keyword">new</span> Person();</span><br><span class="line">		<span class="keyword">new</span> Hello();</span><br><span class="line">		System.out.println(<span class="string">"-----end-----"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	{</span><br><span class="line">		System.out.println(<span class="string">"主类构造块"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>{</span><br><span class="line">		System.out.println(<span class="string">"主类静态块，优于主方法执行"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>执行结果：</strong></p>
<p><img data-src="http://ou7wdump3.bkt.clouddn.com/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.PNG" alt="66"></p>
<p><strong>结论：</strong></p>
<p><img data-src="http://ou7wdump3.bkt.clouddn.com/%E5%9B%BE%E7%A4%BA.PNG" alt="78"></p>
<p><strong>其中：</strong></p>
<ul>
<li>主类静态块优于主方法执行。</li>
<li>无论生成多少类对象，静态块只执行一次。</li>
<li>主类和非主类的构造方法、构造块谁先执行取决于代码顺序，与主类/非主类无关。</li>
</ul>
<h2 id="执行顺序（有继承）"><a href="#执行顺序（有继承）" class="headerlink" title="执行顺序（有继承）"></a>执行顺序（有继承）</h2><p>我们知道，在继承的情况下，子类在实例化时，首先调用父类的构造方法，然后再调用子类的构造方法。因此，结合上面的结论，我们就可以得出开始那道笔试题的结果。</p>
<blockquote>
<p>为了方便观察，对代码改动如下：</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"----start----"</span>);</span><br><span class="line">		System.out.println(<span class="string">"---first---"</span>);</span><br><span class="line">		<span class="keyword">new</span> HelloB();<span class="comment">//first</span></span><br><span class="line">		System.out.println(<span class="string">"---second---"</span>);</span><br><span class="line">		<span class="keyword">new</span> HelloB();<span class="comment">//second</span></span><br><span class="line">		System.out.println(<span class="string">"-----end-----"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>答案在这里：</p>
<p><img data-src="http://ou7wdump3.bkt.clouddn.com/%E7%BB%A7%E6%89%BF%E5%90%8E%E7%BB%93%E6%9E%9C.PNG" alt="77"></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>我的前1/3 of 2021</title>
    <url>/my-1-3-part-of-2021/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/05/19/Oe4vFPdGs7K3Nlc.png">

<h2 id="被「内卷」了吗？"><a href="#被「内卷」了吗？" class="headerlink" title="被「内卷」了吗？"></a>被「内卷」了吗？</h2><p>2021年开始之前，我还没从王铁锤的suffer中走出来。</p>
<p>等到半年之后我再思考王铁锤经历的一切，好像是跟今年的流行词「内卷」有点关系。通过拜读一篇关于<a href="https://mp.weixin.qq.com/s/5RrEOppRanZHfKzfqRs25w">内卷是什么</a>的文章，其中有几点定义和王铁锤经历的一些事情仿佛可以对得上号，包括但不限于：</p>
<ol>
<li>将简单问题复杂化：各种评审会议和报告，实际上意义并不大，只是为了按部就班的走所谓的「程序」</li>
<li>与预期目标严重偏离：过分追求bug数量的趋势图，却从不考虑预防bug的产生</li>
<li>内部竞争：加班时间的battle，很多时候明明无事可干，比如环境挂了之类只能干等，却还是得等到9点甚至10点然后并没有任何产出</li>
<li>被动应付工作：在上线时间本就紧张的情况下，还要强行搞一些并不能发现问题的非功能测试，比如在测试环境做性能测试，一切只是为了走流程</li>
</ol>
<p>所以王铁锤其实是「被内卷」吗？我也不太确定，只是觉得王铁锤不属于这种环境，所以他只能退出。</p>
<p>关于内卷，我还在深圳航空上看到一篇飞机读物，航空公司不怎么样，但那篇文章还不错；下飞机后又在网上搜了一下电子版，分享给大家：<a href="https://mp.weixin.qq.com/s/RtRkisO9p6xgJD3zcGU6kA">不内卷的38岁北京程序员</a>。<br>文章的主人公实现了我理想中的「不内卷」生活，我也想搬一辈子砖；但人家能做到不内卷也是有前提的，他08年之前在北京买了房，外企工作，还丁克，我想在当前的中国社会这三个条件少了一个，都不能做到不内卷吧，所以普通人要做到不被内卷，难度还是相当高的。</p>
<h2 id="在家办公"><a href="#在家办公" class="headerlink" title="在家办公"></a>在家办公</h2><p>王铁锤事件之后，是11月底。</p>
<p>先是开始了两周没有项目的生活，算是缓了缓心情，也在复盘和思考，学了一些零散的知识。后来作为非正式成员加入了一个公司内部项目做了半个月，没有无意义的加班，项目安排也比较合理，只是再也没有归属感了。一个月的时间里，每天想离职想到睡不着，还会怀疑自己是不是不适合做这个行业，又想转行，但综合考虑各种因素后，还是决定苟且，终究没有付诸行动。</p>
<p>时间到了12月底，我又作为非正式成员加入了新项目，与之前不同，这个项目是做自己的产品，一个线上画图的工具。依然没有无意义的加班，项目安排有时不太合理但还可以接受，但还是没有归属感。项目的成员大多都异地，比较分散(比如在我的城市只有我一个成员)，所以基本上都在家办公。</p>
<p>于是我开始了在家办公的生活，时间是1月初到4月中旬，大概4个半月的时间。</p>
<p>对我而言，在家办公的这段时间是挺开心的。因为在家，不用通勤，也不用早起。有时我甚至一上午都可以躺在床上办公，然后中午起床做饭，就可以吃一天。而且可以自由安排时间，在不影响别人和项目进度的情况下，有时我会把输出时间挪到晚上，白天只参加一些必要的会议。甚至会边看电视边上班，早上起床打开投影仪播放自己喜欢的电视剧，然后躺在沙发上敲电脑，一躺就是一天。有时晚上虽然也会加点班，但是因为真的有事干才加，而且因为在家，也感觉不那么抵触了。</p>
<p>虽然是远程办公，但项目里的同事都很不错，每天工作也充满了欢声笑语，感觉很温暖，大家对我的评价也都是积极的。就这样，王铁锤事件带来的阴霾也渐渐散去了，由此带来的工作倦怠感也没了，甚至有点想去公司上班，见见之前熟悉的同事。</p>
<p>最后安利一下我们的线上画图工具：<a href="https://beeart.hello-bees.com/introduce">BeeArt</a> (谁用谁知道，一般人我不告诉他～)</p>
<h2 id="新项目旧生活"><a href="#新项目旧生活" class="headerlink" title="新项目旧生活"></a>新项目旧生活</h2><p>4月中旬我交接了工作，在两周的准备后，作为正式成员在5月初又加入了新项目。</p>
<p>虽然是新项目，但之前经历过类似的项目，而且待了很久，无论是节奏还是工作方式都大同小异。总之就是熟悉的配方，熟悉的味道，所以过的是旧生活，但学到了很多。我的散装英语又派上了用场，之前的归属感回来了一点，但并不多，也许我再也不会有从前的「归属感」了，只是平淡的打工人，搬砖挣钱而已，并不会有太多的情怀。</p>
<h2 id="2021剩下的1-3"><a href="#2021剩下的1-3" class="headerlink" title="2021剩下的1/3"></a>2021剩下的1/3</h2><p>2021是我的本命年，虽然已经过去了1/3，不过也是开心的1/3，人生已经如此的艰难，还是开心最重要。<br>剩下的2/3，大概会继续平淡的过着我的旧生活，然后学点工作上的新技能。未来也许并不能实现搬一辈子砖的愿望，但搬砖的每一天都要开心，活在当下。</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>活着</tag>
      </tags>
  </entry>
  <entry>
    <title>我的厨艺进阶之路</title>
    <url>/myCookingWay/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/12/03/82ec95aLFtVkzAJ.png">

<p>作为新时代的「空巢青年」，做饭可谓是一个必备技能了。</p>
<p>小时候家里大多都是老爸<span class="emoji" alias="man" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8">👨</span>做饭，每次看他随便拿出一个食材就能想到做什么菜，怎么做，即使最简单的食材也可以做成一道菜，就觉得很神奇。</p>
<p>在家人的影(bi)响(po)下，初高中那会就已经会做一些简单的菜了，也打下了不错的切菜功底<span class="emoji" alias="v" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8">✌</span>，但真正学会做饭，还是从毕业后的空巢生活开始的。</p>
<p>– 多图预警 –</p>
<h2 id="早餐篇"><a href="#早餐篇" class="headerlink" title="早餐篇"></a>早餐篇</h2><p>「一日之计在于晨」，说实话，早餐并没有太花心思做。</p>
<p>之前的固定搭配是胡萝卜葱花鸡蛋卷🥚+自己煮的粥🥣，后来又开始搭配纯牛奶🥛喝，有时加点水果蔬菜🍅，感觉营养就比较全面了：<br><img data-src="https://i.loli.net/2020/12/03/PNAzln8bfECFKa3.jpg"></p>
<p>现在很少做鸡蛋卷了，比较喜欢纯牛奶🥛+麦片+鸡蛋🥚的搭配，或者纯牛奶🥛+鸡蛋🥚+面包🍞的标准搭配，营养都很全面：<br><img data-src="https://i.loli.net/2020/12/03/oHFDUjY3PJcTl5x.jpg"></p>
<p>这里推荐 <mark class="label success">良品铺子</mark> 家的「每日坚果水果荟燕麦片」，还有 <mark class="label success">小熊家电</mark> 的「蒸蛋器」。</p>
<p>鸡蛋卷的教程可以在「下厨房」APP里搜，很简单的。</p>
<h2 id="午饭篇"><a href="#午饭篇" class="headerlink" title="午饭篇"></a>午饭篇</h2><p>午饭可就到了大显身手的时候了<span class="emoji" alias="metal" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8">🤘</span>。主食还是米饭，或者各种杂粮粥，配菜可就多了<span class="emoji" alias="smirk" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span></p>
<p>搭配1: 杂粮粥🥣+老干妈土豆丝🥔+醋溜娃娃菜+可乐鸡翅<br>搭配2: 黑米粥🥣+老干妈土豆丝🥔+肉末炒鸡蛋+煎饼🥞<br><img data-src="https://i.loli.net/2020/12/03/6Os7ERPASYb9FGn.png" width="600" height="300"></p>
<p>搭配3: 糯米红枣粥🥣+西红柿炒鸡蛋🍅+醋溜娃娃菜+妈妈做的饼👩<br>搭配4: 糯米饭🍚+凉拌酸辣茄子🍆+清炒土豆片🥔<br><img data-src="https://i.loli.net/2020/12/03/gHPV73t8YDeQnZL.png" width="550" height="300"></p>
<p>搭配5: 糯米饭🍚+麻婆豆腐+鱼香肉丝<br>搭配6: 红薯小米粥🥣+凉拌黄瓜皮老铺🥒+老干妈土豆丝🥔<br><img data-src="https://i.loli.net/2020/12/03/peg6iVZFDfsXKB4.png" width="600" height="300"></p>
<p>搭配7: 糯米南瓜粥🎃+酸辣带鱼🐟+虾仁滑蛋🍤+煮玉米🌽<br>搭配8(早中餐一起吃)): 纯牛奶🥛+糯米饭🍚+煮鸡蛋+红烧茄子🍆+西红柿炒西葫芦<br><img data-src="https://i.loli.net/2020/12/03/H6i59XOltxoseJ3.png" width="550" height="300"></p>
<p>搭配9: 糯米饭🍚+酸辣平菇🍄+西红柿炒西葫芦<br>搭配10: 糯米饭🍚+青菜炒鸡蛋🥬+西红柿炒土豆片<br><img data-src="https://i.loli.net/2020/12/03/ZqQJmR6GOypi38H.png" width="600" height="300"></p>
<p>搭配11: 糯米饭🍚+西红柿辣椒炒鸡蛋🥚+酸辣娃娃菜+肉丸萝卜汤🥣<br>搭配12: 糯米饭🍚+酸辣娃娃菜+肉末炒西芹<br><img data-src="https://i.loli.net/2020/12/03/bJEl9z6yLmesPxk.png" width="600" height="300"></p>
<p>菜品单独展示，第一组：香煎孜然豆腐、蒜蓉粉丝娃娃菜、红烧带鱼🐟、麻婆豆腐<br><img data-src="https://i.loli.net/2020/12/03/MIHUyelGozkv1c2.jpg"></p>
<p>第二组：青菜炒平菇🥬、红烧茄子🍆、手撕包菜、鱼香肉丝<br><img data-src="https://i.loli.net/2020/12/03/5CyYM2RXBsVn1hj.jpg"></p>
<p>配汤组：枸杞银耳汤、疙瘩汤、萝卜肉丸汤<br><img data-src="https://i.loli.net/2020/12/03/1aYqCPMB7pdRjSm.jpg" width="600" height="200"></p>
<p>其实还有很多，没有存图<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>，这些菜品都可以在「下厨房」APP搜索教程，个人认为最省时好做的菜品有：西红柿炒鸡蛋、老干妈土豆丝、酸辣娃娃菜、青菜炒鸡蛋。</p>
<h2 id="晚餐篇"><a href="#晚餐篇" class="headerlink" title="晚餐篇"></a>晚餐篇</h2><p>晚餐主要会做一些速食，或者吃中午的剩菜剩饭<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，比午饭耗时少，毕竟晚餐要少吃一些。</p>
<p>一组速食：酸辣挂面、家常版阳春面、酸辣速冻饺子、螺蛳粉<span class="emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">😋</span><br><img data-src="https://i.loli.net/2020/12/03/v8QbfkM9Hw72Wty.jpg"></p>
<p>说到螺蛳粉，我还是比较有发言权的哈哈哈，淘宝排名前5的店都吃遍了，好欢螺、嘻螺会、良品铺子、李子柒还有其他几家的都吃遍了，个人认为还是李子柒家的最好吃<span class="emoji" alias="thumbsup" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span></p>
<p>有时候会整点硬菜，煎个牛排啥的<span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span>，意面算是第5种速食了，做起来也很快：<br><img data-src="https://i.loli.net/2020/12/03/RqTOExXmvFnVBJw.jpg" width="400" height="600"></p>
<h2 id="烘焙篇"><a href="#烘焙篇" class="headerlink" title="烘焙篇"></a>烘焙篇</h2><p>工具是「小熊电器」的烤箱，其实烘焙自己做的种类也不多，主要用来烤鸡翅、烤红薯、烤饼干、做纸杯蛋糕：<br><img data-src="https://i.loli.net/2020/12/03/91VdOgUC2ruADZ4.jpg"></p>
<p>有时会买腌制好的鸡翅来直接烤，有时也会买生鸡翅，自己配酱汁腌制，烤鸡翅很快，230度烤15-20分钟即可；烤红薯时间比较长，需要先230度烤30分钟，再200度烤20分钟左右；饼干和纸杯蛋糕比较麻烦，需要按照教程做。</p>
<h2 id="便当篇"><a href="#便当篇" class="headerlink" title="便当篇"></a>便当篇</h2><p>作为一个会做饭的上班族，当然少不了带便当。但也不是每天都带，看心情<span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span>，我一般是前一天晚上做好第二天要带的便当：</p>
<img data-src="https://i.loli.net/2020/12/03/KdyLMiYnDbEO2pJ.jpg" width="500" height="600">

<h2 id="外卖篇"><a href="#外卖篇" class="headerlink" title="外卖篇"></a>外卖篇</h2><p>什么？！竟然还有外卖篇，想不到吧<span class="emoji" alias="grinning" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8">😀</span>，但有时候不想做饭，也是会点外卖的，一组外卖：<br><img data-src="https://i.loli.net/2020/12/03/d81bNuGAHcYJgtn.jpg"></p>
<div class="note info"><p>说了这么多，那到底怎么才能学会做饭呢？一句话：<strong>只要你做，就能会；不做，永远不会</strong>，哈哈哈哈哈哈哈哈哈。</p>
</div>]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Cook</tag>
      </tags>
  </entry>
  <entry>
    <title>测试策略浅谈</title>
    <url>/testStrategy/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/11/27/Nt7m4suaOyUPfBV.png">

<div class="note info"><p>前段时间，有同事分享了一些测试策略设计的内容，讲的很不错。并且自己也是最近才开始接触一些新的项目，之前都是中途加入项目工作，没有全面思考过测试策略的东西，所以感触比较深。于是记了点笔记和自己的心得，这样后续再加入一些新项目，也不会手足无措了。</p>
</div>

<h2 id="Foreword：前言"><a href="#Foreword：前言" class="headerlink" title="Foreword：前言"></a>Foreword：前言</h2><p>每一个测试小朋友进入到全新的项目时，肯定有很多<mark class="label info">问号</mark>，比如：</p>
<ul>
<li>这是一个什么样的项目？</li>
<li>是一个旧项目的改造还是一个全新的项目？</li>
<li>是某个产品的一部分，还是独立的一个产品？如果是一部分，是上游，还是下游，还是中间？</li>
<li>这个项目的用户群体是什么样？用户群体的数量？</li>
<li>这个项目的周期是多久？多久发一次版，每个版本分为几个阶段？</li>
<li>这个项目要做哪些方面的测试？</li>
<li>这个项目有几个QA？<br>…</li>
</ul>
<p>其实，这些问题都是包含在测试策略中的。</p>
<h2 id="What？测试策略是什么"><a href="#What？测试策略是什么" class="headerlink" title="What？测试策略是什么"></a>What？测试策略是什么</h2><blockquote>
<p><strong>测试策略</strong>一般是针对一个整体产品或者版本，制定出的包含质量保证策略、测试范围、测试方法、测试计划管理、测试分层、测试重点和难点、测试执行过程管理、环境策略、Showcase管理、风险识别等方面的<strong>设计文档</strong>。</p>
</blockquote>
<p>好的测试策略可以提升团队的质量水平和QA团队的工作效率，在敏捷软件开发生命周期的每一个阶段都能发挥作用。</p>
<h2 id="When？什么时候设计测试策略"><a href="#When？什么时候设计测试策略" class="headerlink" title="When？什么时候设计测试策略"></a>When？什么时候设计测试策略</h2><div class="note primary"><p>测试策略的设计，一般在需求分析(Inception)阶段开始，与技术设计并行，并且在需求分析阶段不断补充和完善。需要在测试阶段开始之前闭环。</p>
</div>

<h2 id="Who？谁应该参与测试策略设计"><a href="#Who？谁应该参与测试策略设计" class="headerlink" title="Who？谁应该参与测试策略设计"></a>Who？谁应该参与测试策略设计</h2><pre><code>测试策略是由项目的QA团队输出，团队成员参与评审的。
</code></pre>
<p>由于敏捷开发是一种重实践，轻文档的开发模式。所以个人认为不必写出多么详尽的文档，重要的是考虑全面，列出关键点，和团队成员一起讨论，达成共识，且在后续的开发测试过程中注意与测试策略保持一致。</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>上文提到了测试策略是由许多方面的集合，接下来就分别聊聊它们。</p>
<h3 id="敏捷团队的质量保证策略"><a href="#敏捷团队的质量保证策略" class="headerlink" title="敏捷团队的质量保证策略"></a>敏捷团队的质量保证策略</h3><p>首先就是敏捷团队的质量保证策略，其实这就是许多非QA角色眼中的<strong>狭义测试策略</strong>，展示了敏捷开发中每个阶段团队如何协作来保证产品质量。个人认为这个是最基本的质量保证标准，每个敏捷团队都应该做好。</p>
<img data-src="https://i.loli.net/2020/11/30/TpxlCFQ4uYWa58s.png">

<p><span id="inline-toc">1.</span> <strong>故事分析</strong><br>BA与客户沟通清楚需求后，编写故事卡，并和QA结对写AC，或者写完AC找QA review.<br><span id="inline-toc">2.</span> <strong>故事启动</strong><br>BA组织团队成员一起讨论开发内容，澄清需求。<br><span id="inline-toc">3.</span> <strong>故事开发</strong><br>Dev同学按照需求写代码，确保单元测试的覆盖率满足要求。QA同学编写测试用例和自动化测试。<br><span id="inline-toc">4.</span> <strong>故事验收</strong><br>团队成员一起在正确的环境进行deskCheck，确保代码通过AC，满足基本需求。并再次检查单元测试的覆盖率是否满足要求。<br><span id="inline-toc">5.</span> <strong>故事测试</strong><br>QA同学进行测试，将发现的问题与BA、开发沟通并修复，直到产品行为满足需求。<br><span id="inline-toc">6.</span> <strong>故事演示</strong><br>所有故事卡测试通过后，团队组织showcase邀请客户一起查看产品功能，并对showcase中客户提出的优化建议进行记录，确定优先级后放入相应迭代开发范围。如果离上线还有一段时间，也可以组织团队成员进行BugBash，最好邀请客户，提前识别更多问题。<br><span id="inline-toc">7.</span> <strong>故事上线</strong><br>当所有Bug和优先级高的优化问题都已解决后，用户故事就可以上线了。上线后，对应用户故事的生命周期就已经终结。线上发现的问题在确定优先级后，建立新的用户故事，放入对应迭代开发范围。</p>
<div class="note default"><p>上线之后，团队应该回顾分析上个迭代的开发测试情况，可以一起查看迭代的<strong>Sprint report</strong>和<strong>Bug report</strong>。</p>
</div>

<pre><code>Sprint report
</code></pre>
<p>Sprint report是敏捷开发管理工具Jira的一个功能，如下图，纵轴是迭代内所有故事卡的点数，横轴是迭代时间。两周一个迭代，体现了迭代内随时间推移故事卡开发的情况：</p>
<img data-src="https://i.loli.net/2020/12/01/vEqDKlLMYz6fA3X.png">

<p>灰色线条是在迭代开始后，默认生成的一条该迭代的理想开发速率线，灰色地带是周末，所以没有变化(这也可以看出敏捷开发是不提倡加班的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)。红色是迭代开发的真实情况，健康的敏捷开发，<strong>红线的趋势应该是和灰线基本一致的</strong>。<br>上图就是因为两周内并不能完成迭代任务，所以又延迟了两周，此时就应该分析为什么会导致这种情况，是对需求理解不够，点数估计少了呢，还是别的原因，从而避免以后再发生同样的情况。<br>这里我再贴几张迭代的Sprint report，都是我之前经历过的真实敏捷迭代(所以我都经历了什么<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>抱走心酸的自己<span class="emoji" alias="persevere" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8">😣</span>)，大家可以自己尝试分析，导致下边几种情况的可能原因：<br><img data-src="https://i.loli.net/2020/12/01/tueAgQEZ9byo4la.png"><br><img data-src="https://i.loli.net/2020/12/01/xSCBPQ9MJzLVTHb.png"><br>其实之前也有两条线一致的时候，但那已经是很久之前了。。。。</p>
<pre><code>Bug report
</code></pre>
<p>Bug report是对迭代内发现问题的总结，由QA同学产出，如何做好Bug report可以参考<a href="https://mp.weixin.qq.com/s/OVqTsk6OJ_xi5Q4iWtKkUg">ThoughtWorks洞见-Bug Report该怎么做?</a></p>
<h3 id="测试范围和重难点分析"><a href="#测试范围和重难点分析" class="headerlink" title="测试范围和重难点分析"></a>测试范围和重难点分析</h3><blockquote>
<p><strong>测试范围</strong>的确定需要分析软件周期各个阶段的需求目标，了解客户期望和产品的用户群体，主要包括以下几个方面：</p>
</blockquote>
<pre><code>功能
</code></pre>
<ul>
<li><p>业务功能</p>
</li>
<li><p>API功能</p>
</li>
<li><p>数据一致性</p>
</li>
<li><p>…</p>
<p>  性能</p>
</li>
<li><p>接口性能</p>
</li>
<li><p>单接口并发和非并发访问性能，混合场景并发访问性能</p>
</li>
<li><p>页面性能</p>
</li>
<li><p>常用操作页面响应时间，非常用操作页面响应时间</p>
</li>
<li><p>…</p>
<p>  安全</p>
</li>
<li><p>API访问权限</p>
</li>
<li><p>数据访问权限</p>
</li>
<li><p>数据传输安全</p>
</li>
<li><p>数据存储安全</p>
</li>
<li><p>异常信息展示安全</p>
</li>
<li><p>日志信息安全</p>
</li>
<li><p>…</p>
<p>  易用性</p>
</li>
<li><p>页面展示的引导性</p>
</li>
<li><p>操作的便捷性</p>
</li>
<li><p>返回信息的易理解性</p>
</li>
<li><p>…</p>
<p>  兼容性</p>
</li>
<li><p>操作系统兼容</p>
</li>
<li><p>数据库兼容</p>
</li>
<li><p>浏览器兼容</p>
</li>
<li><p>应用软件兼容</p>
</li>
<li><p>…</p>
<p>  可维护性</p>
</li>
<li><p>软件的安装和升级是否可以很容易的完成</p>
</li>
<li><p>核心操作是否都有日志记录</p>
</li>
<li><p>…</p>
<p>  可靠性</p>
</li>
<li><p>接口加锁和释放</p>
</li>
<li><p>接口失败重试</p>
</li>
<li><p>服务重启后数据恢复</p>
</li>
<li><p>大数据处理能力</p>
</li>
<li><p>页面重复操作禁止</p>
</li>
<li><p>…</p>
<p>  稳定性</p>
</li>
<li><p>长时间访问系统，系统在响应时间，资源使用方面的情况</p>
</li>
<li><p>…</p>
</li>
</ul>
<p><strong>以上这些方面，确定之后要求BA在写卡以及QA测卡时都要注意覆盖到。</strong></p>
<blockquote>
<p><strong>测试重难点</strong>确定后，需要多增加对应模块的回归测试，开发也应该增加单元测试的覆盖率。</p>
</blockquote>
<pre><code>测试重点
</code></pre>
<ul>
<li><p>需求的核心功能</p>
</li>
<li><p>经常变化的部分</p>
</li>
<li><p>与其他系统相互影响的部分</p>
<p>  测试难点</p>
</li>
<li><p>相对不够独立的部分</p>
</li>
<li><p>处理过程较复杂的部分</p>
</li>
</ul>
<h3 id="测试方法与分层"><a href="#测试方法与分层" class="headerlink" title="测试方法与分层"></a>测试方法与分层</h3><div class="note info"><p>明确测试范围，时间和人力之后，还应该根据需求的变化来确定<strong>测试方法</strong>，决定是否需要自动化测试。然后再按照 <a href="https://jmyblog.top/Test-Pyramid/">测试金字塔原理</a> 决定每种测试方法的比重。</p>
</div>

<h3 id="测试计划管理"><a href="#测试计划管理" class="headerlink" title="测试计划管理"></a>测试计划管理</h3><blockquote>
<p>测试计划管理是指按照团队的上线计划，确定具体的测试时间，包括迭代内测试、集成测试、回归测试、验收测试。</p>
</blockquote>
<h3 id="测试执行过程管理"><a href="#测试执行过程管理" class="headerlink" title="测试执行过程管理"></a>测试执行过程管理</h3><p>主要包括：</p>
<ul>
<li>测试计划制定和管理：按照测试计划安排的时间执行测试，避免延期</li>
<li>测试用例编写和管理：自动化用例编写以及自动化代码重构</li>
<li>测试过程记录和管理：我的做法是在每张卡里记录自己的测试环境，场景以及是否通过，疑问等等</li>
<li>测试结果管理：发现的缺陷管理，比如新建缺陷卡，Bug report等</li>
</ul>
<h3 id="环境策略"><a href="#环境策略" class="headerlink" title="环境策略"></a>环境策略</h3><blockquote>
<p>稳定的环境是高效开发和测试的先决条件，个人人为在开发之前就应该配置好环境以及流水线等基础设施，主要用到的环境有：</p>
</blockquote>
<ul>
<li>DEV环境：Dev自测和联调使用，deskCheck环境</li>
<li>QA环境：QA日常测试使用</li>
<li>UAT环境：用户验收测试</li>
<li>其他环境：按照项目情况准备安全环境、性能测试环境等等</li>
</ul>
<h3 id="风险识别与解决"><a href="#风险识别与解决" class="headerlink" title="风险识别与解决"></a>风险识别与解决</h3><blockquote>
<p>主要是识别敏捷开发流程中的质量风险。</p>
</blockquote>
<img data-src="https://i.loli.net/2020/12/01/rjD83zVIi9e4wHq.png">

<p><span id="inline-toc">1.</span> <strong>需求阶段</strong></p>
<p>R: 需求频繁变更，对产品的需求理解不准确有偏差。<br>S: 多和用户沟通，争取更充分的研发时间和测试时间，或者把提出的功能放到下一个版本中实现。提供验收环境给客户，需要的话也可以提供测试环境给客户，这样客户可以随时看到产品进展。</p>
<p><span id="inline-toc">2.</span> <strong>开发阶段</strong></p>
<p>R: 代码质量达不到相应要求，bug多，模块开发没有统一设计。<br>S: 提升单元测试覆盖率，进行code diff，与TL讨论更多提升代码质量的方式，确定好标准。</p>
<p><span id="inline-toc">3.</span> <strong>测试阶段</strong></p>
<p>R: 测试经验不足，用例设计不到位，对业务不熟悉、不了解用户如何操作该产品；测试时间短，测试环境与生产环境的不一致，不稳定。<br>S: 找BA或开发review测试用例，与开发一起pair单元测试场景；找熟悉产品的人员进行业务培训，增加人力，尽可能模拟用户使用的环境，在测试的时候尽量和用户沟通要到用户真实的数据进行测试。</p>
<p><span id="inline-toc">4.</span> <strong>上线阶段</strong></p>
<p>R: 上线环境准备不充足，与其他服务或系统有上线依赖。<br>S: 提前准备上线脚本、上线配置文档，上线前测试；提前识别上线依赖。</p>
<h3 id="Showcase管理"><a href="#Showcase管理" class="headerlink" title="Showcase管理"></a>Showcase管理</h3><blockquote>
<p>与客户、团队成员确定多久进行一次showcase，Showcase以什么样的方式进行。确定好每次showcase的owner，推荐的做法是轮流主持。</p>
</blockquote>
<h3 id="BugBash管理"><a href="#BugBash管理" class="headerlink" title="BugBash管理"></a>BugBash管理</h3><p>参考 <a href="https://jmyblog.top/BugBash/">BugBash知多少</a> 和 <a href="https://mp.weixin.qq.com/s/S5cOjQkyvpFxpfew_exZrA">如何成功的组织Bug bash</a>。</p>
<h3 id="遗留问题记录"><a href="#遗留问题记录" class="headerlink" title="遗留问题记录"></a>遗留问题记录</h3><blockquote>
<p>记录测试策略中还需要明确和后续更新的部分。</p>
</blockquote>
<h2 id="The-End：写在最后"><a href="#The-End：写在最后" class="headerlink" title="The End：写在最后"></a>The End：写在最后</h2><p>以上就是测试策略应该包含的内容，果然像海一样宽广<span class="emoji" alias="dizzy_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8">😵</span>，不过在敏捷开发中，产品的质量是渗透到每一个开发阶段的，所有团队成员都应该为质量负责，愿每一个QA都能开心的工(ban)作(zhuan)。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
        <tag>测试策略</tag>
      </tags>
  </entry>
  <entry>
    <title>博客Next主题升级</title>
    <url>/themeUpgrade/</url>
    <content><![CDATA[<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>前几天在优化博客的浏览体验，过程中参考了一些同道博客，发现他们在聊Next主题的v8版本。因为我也用的是这个主题，但我只更新到了v7.8版本，而且浏览了官网，最新的就是v7.8版本，引起了我的疑惑🤔，然后就开始了解惑和升级之路。</p>
<h2 id="解惑：theme-next-amp-next-theme"><a href="#解惑：theme-next-amp-next-theme" class="headerlink" title="解惑：theme-next&amp;next-theme"></a>解惑：theme-next&amp;next-theme</h2><p>我目前用的是 <a href="https://github.com/theme-next/">theme-next</a> 团队提供的Next主题，最新的是我在用的v7.8版本：<br><img data-src="https://i.loli.net/2021/06/25/h54FWYfywklibjV.png" alt="theme-next-v7.8"></p>
<p>浏览了同道博客，发现他们用的是 <a href="https://github.com/next-theme">next-theme</a> 团队提供的Next主题，最新版本确实是v8.x：<br><img data-src="https://i.loli.net/2021/06/25/lpjf4UEsiXhkW8M.png" alt="next-theme-v8"></p>
<p>那么问题来了，同一个主题为什么有两个团队在维护呢？作为一个合格的吃瓜群众🍉，我嗅到了一丝不寻常的气息，果然，有疑惑的不止我一个人：<br><img data-src="https://i.loli.net/2021/06/25/5fkAD2LBXtCyWux.png" alt="同样疑惑的吃瓜群众"></p>
<p>紧接着我就找到了答案：<br><img data-src="https://i.loli.net/2021/06/25/oliLXKknhpUQG51.png" alt="原来是一场神仙打架"></p>
<p>好了，疑惑没有了，虽然已经完成了对当前使用主题的一些优化，但为了与时俱进，还是决定使用新团队开发的Next主题，当然，我心中对大佬们的敬畏是一样的😂</p>
<h2 id="升级之路"><a href="#升级之路" class="headerlink" title="升级之路"></a>升级之路</h2><p>首先git clone新的 <a href="https://github.com/next-theme/hexo-theme-next">next仓库</a> ，通读了read me，然后按照同道文章进行更新，参考了：<a href="https://asurada.zone/post/Update-Next-From-V7-To-V8/">Hexo Next 主题 V7 升级 V8 记录</a></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>关于配置文件，新团队提出了 <a href="https://hexo.io/docs/configuration.html#Alternate-Theme-Config">Alternate Theme Config 存储配置</a> 的概念，简单来说就是推荐两种方式存放主题配置文件：</p>
<ol>
<li>在博客根目录创建一个_config.next.yml 文件，将next主题的配置迁移到这里，然后在博客配置文件_config.yml里指向这个配置文件。</li>
<li>直接在博客配置文件_config.yml里添加next主题的所有配置，在一个文件里同时管理博客配置和主题配置。</li>
</ol>
<p>我参考的同道文章中使用的就是第一种方式，但我尝试之后，还是觉得之前配置方式(在主题目录和博客根目录管理各自的_config.yml)比较适合我，因为我只有一个主题，而且我一直都是这么做的，已经习惯了，所以上面两种我都不采取。</p>
<p>于是按照之前的做法，对比新旧next主题配置，直接更改 <strong>next/_config.ym</strong>l 里的内容，从上到下依次改动了：</p>
<div class="note info"><ul>
<li>切换到Mist主题</li>
<li>修改网站图标</li>
<li>打开博文copyright</li>
<li>添加菜单栏</li>
<li>修改头像，打开圆角和旋转效果</li>
<li>添加社交链接</li>
<li>添加友链</li>
<li>修改网站底部信息</li>
<li>打开标签图标</li>
<li>开启博客赞赏并添加收款码</li>
<li>开启代码库复制按钮</li>
<li>开启浏览进度header bar</li>
<li>修改字体</li>
<li>开启图片fancybox和lazyload</li>
<li>开启livere评论</li>
<li>开启chatra chat</li>
</ul>
</div>

<p>这些配置大部分都只是把 next/_config.yml 文件里的toggle打开，把false改成true而已，非常方便，没什么可讲的，但有两个功能我觉得可以高亮一下。</p>
<h4 id="图片fancybox"><a href="#图片fancybox" class="headerlink" title="图片fancybox"></a>图片fancybox</h4><p>开启fancybox只需要在_config.xml里搜索fancybox，然后将false改成true就可以了，简单到不可置信。之后就可以点开博客里的图片，而且还能切换查看上下图、幻灯片播放、查看图片列表，而且还可以看到图片下方的描述，简直了，什么神仙功能，大佬们太棒了❤️：</p>
<p><img data-src="https://i.loli.net/2021/06/25/iMc3p7a8WSoGsdQ.png" alt="fancybox"></p>
<h4 id="chatra-chat"><a href="#chatra-chat" class="headerlink" title="chatra chat"></a>chatra chat</h4><p>事实上，之前使用的next主题也有这项配置，但一直没深入研究，不过这次使用之后也觉得超级方便！开启chatra chat只需要在_config.xml里搜索Chat Services，之后开启chat button展示，接着去chatra官网注册账号，把id加上就可以了，官网和找id的路径也在文件里注释了：</p>
<p><img data-src="https://i.loli.net/2021/06/25/yVWdFzJloPquMt9.png" alt="开启chatra chat"></p>
<p>chatra官网中也可以进行个性化配置，包括默认回复的信息，展示文本等等：</p>
<p><img data-src="https://i.loli.net/2021/06/25/ikAVf1JdjSrOxYs.png" alt="自定义弹窗展示文本"><br><img data-src="https://i.loli.net/2021/06/25/J1F2fexgbtGrQ8I.png" alt="自定义用户信息表单"><br><img data-src="https://i.loli.net/2021/06/25/ykLIPbEMOqUQT3s.png" alt="自定义默认回复信息"></p>
<p>至于使用成本，自注册之日起，会赠送10天的pro套餐，10天之后会回到免费套餐，但这并不影响简单使用，基本的聊天功能还是会支持的，所以还是推荐使用：<br><img data-src="https://i.loli.net/2021/06/25/K7Sug1ksNRw8WyM.png" alt="价格信息"></p>
<p>Chat Services里列出的其它Chat服务tidio和gitter我也试了，但tidio貌似需要科学上网，gitter貌似只能群聊，隐私感体验较差，所以还是选择了chatra。<br>chatra可以用邮件的方式提示新消息，但刚开始只能在网页上回复消息，后来发现AppStore也有这个应用，叫<strong>Chatra</strong>，下载后就能及时用手机回复消息了：</p>
<p><img data-src="https://i.loli.net/2021/08/07/fNKCAtxyvwecpRF.png" alt="用手机App发送消息"><br>手机端交互和网页差不多，但不能同时在线：</p>
<p><img data-src="https://i.loli.net/2021/08/07/fvbPwaZUjMtzOlS.jpg" alt="chatra手机端"></p>
<h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><p>到这里，基本的配置就ok了，然而我之前还给主题加了一些 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE">个性化设置</a> ，但这次不打算添加太多了，只留下一些必要的就可以，返璞归真。</p>
<mark class="label success">博客宠物</mark>

<p>首先就是我们博客右下角萌萌的小黑啦，依然是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E5%8D%9A%E5%AE%A2%E5%AE%A0%E7%89%A9">之前的文章</a> ，在路径 /themes/next/layout/_layout.njk 尾部加上 <strong>live2d()</strong> 的标签就行。</p>
<mark class="label success">博客运行时间</mark>

<p>在博客底部加上运行时间真的很有仪式感，跳动的时间感觉博客是“活着的”，还是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4">之前的文章</a> 设置。</p>
<mark class="label success">校正livere评论的refer值</mark>

<p>之前由于livere评论的refer值不对，导致评论数据缺失，后来找回来并写了 <a href="https://jmyblog.top/comments-comeback/">一篇文章</a> 讲述解决办法，所以还是按照这个解决办法，在路径 next/source/js/third-party/comments/livere.js 改动之后才能看到所有的评论数据:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">refer: 'jmyblog.top' + location.pathname</span><br></pre></td></tr></tbody></table></figure>

<h2 id="升级后对比"><a href="#升级后对比" class="headerlink" title="升级后对比"></a>升级后对比</h2><p>新版Next主题内置了更多插件，只需要打开开关就能用，确实挺香的。这次升级我也把之前的Next_Gemini卡片式布局，切换到了现在的Next_Mist布局，博客展示更加返璞归真了，对比感觉还是现在的效果比较适合展示博客：</p>
<p><img data-src="https://i.loli.net/2021/06/24/ibkeCQwLaV9xsXd.jpg" alt="之前是有点花里胡哨哈"></p>
<p><img data-src="https://i.loli.net/2021/06/24/cHQjPZJUMAq5fta.png" alt="现在沉稳多了"></p>
<p>这段时间真折腾啊，又是升级博客服务，又是升级主题的，终于告一段落了，之后很长一段时间应该不会再有升级了。为了维护这个小破站，我真是操碎了心，接下来就是专注写作，多更新博客了。</p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>next-theme</tag>
        <tag>theme-next</tag>
      </tags>
  </entry>
  <entry>
    <title>工作三年后</title>
    <url>/three-years-after-graduation/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/07/31/FoOkzjwaQncAq3l.png">

<h2 id="2018：传说中的试用期"><a href="#2018：传说中的试用期" class="headerlink" title="2018：传说中的试用期"></a>2018：传说中的试用期</h2><p>三年前的今天「2018.7.24」，我入职了，正式成为了打工人，也开始了6个月的试用期。<br>入职第二天，我就去印度浦那参加了为期五周的 <a href="https://jmyblog.top/TWUJourney/">TWU培训</a> ，收获颇丰；培训结束之后，又无缝衔接去了一个国外的项目，TWU练的散装英语正好派上了用场。<br>领取了新的MacBook Pro电脑，18年有touch bar那款，当时的价格大概1.8w左右，给员工配新款Mac，公司真的很良心了。<br>按照公司试用期的安排，我有了一个buddy，她可以帮助我度过试用期。我的buddy也是毕业之后来公司的，刚入职时是开发，后来又做测试，是一个代码能力强的QA。<br>在她的帮助下，我逐渐融入了项目的节奏和公司文化，也开始了一系列学习，比如英语打卡、测试知识之类，总之这一年的关键字就是「学习」，然后试用期就这样无惊无险的过去了，也没加过班，一切都很顺利，我觉得自己找到了「钱多事少离家近」的工作。</p>
<h2 id="2019：开心搬砖，快乐生活"><a href="#2019：开心搬砖，快乐生活" class="headerlink" title="2019：开心搬砖，快乐生活"></a>2019：开心搬砖，快乐生活</h2><p>这一年，是三年中最开心的一年了。<br>因为试用期结束，工作也稳定下来了，每天干的活都差不多，逐渐明白了「搬砖」是什么意思。再后来，除了搬砖，还能腾出很多时间思考和学习。<br>由于一直在一个项目组，和周围的同事们以及客户都很熟悉，每天上班唠嗑也很欢乐，有时甚至一想到第二天要上班，还很期待，一年中项目里有人走，也有人进来，但我的快乐一直不变。<br>除此之外，公司经常会办一些节日活动，比如3.7女生节的微景观DIY，第二天还放了半天假；还有万圣节做南瓜灯、中秋节做月饼，平时的人文关怀也不少。</p>
<p><img data-src="https://i.loli.net/2021/08/01/t859kegJHNB6b7o.jpg" alt="公司的节日活动"></p>
<p>这一年我搬了两次家，第一次搬到了一个朝北的房子(住进去之前我一直以为这房子是朝东的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)，装修很不错，没什么可以自己折腾的空间，而且朝北让人住着很压抑，所以住了一个月又搬了。搬到了同小区另一个朝南的房子，装修一般，但正合我意，一番折腾之后终于把房子改造成了自己喜欢的风格，而且从此后我终于分得请南北了<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
<p><img data-src="https://i.loli.net/2021/08/01/B4PdgGpbyAROq3t.jpg" alt="第一次搬家(左)第二次搬家(右)"><br>后来还安排了投影仪和烤箱，看电影、研究厨艺也是一种享受。</p>
<p><img data-src="https://i.loli.net/2021/08/01/t2367xjFVWkTLrR.jpg" alt="投影仪真香"><br><img data-src="https://i.loli.net/2021/08/01/OmK46iCosyIgezG.jpg" alt="各种烤"><br>住处离公司大概5公里，但没有直达的公交，于是买了一个电动滑板车🛴，每天骑着滑板去上班，单程15-20分钟就能到公司，不能骑车的天气就打车，然后就很少坐公交了。</p>
<p><img data-src="https://i.loli.net/2021/08/01/XNd4KMO5ZcWsalL.jpg" alt="我的滑板车"><br>自从我用滑板出行后，发现通勤路上的滑板车越来越多了，公司里也有人买了，有次澳洲的客户来西安出差，还被我成功安利，回去后也买了一辆<span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span><br>一年中也有和同事一起去 <a href="https://jmyblog.top/5-1-travel/">青海</a>、<a href="https://jmyblog.top/6-6-travel/">色达</a> 旅行，和朋友去 <a href="https://jmyblog.top/HuaShanTravel/">爬山</a> 等 ，经常出去玩，这一年就这样快乐的结束了。</p>
<h2 id="2020：疫情下的打工人，活着"><a href="#2020：疫情下的打工人，活着" class="headerlink" title="2020：疫情下的打工人，活着"></a>2020：疫情下的打工人，活着</h2><p>2020，对大多数人来讲都是艰难的一年吧，我也不例外。<br>因为新冠疫情，过年后不能回公司上班，但后来又说要在家办公，我也没带电脑，幸亏有个同事帮我把电脑寄到了家，然后就开始在家办公，和家人一起待了1个多月，闲暇时互相切磋麻将技艺。毕业后能有这么多和家人相聚的时间真的难得，以后估计也很少有这样的机会了，所以我们都很珍惜。</p>
<p>2月底，我终于回到了西安，继续在家办公，期间一直潜心钻研厨艺，吃着美食、用投影仪看电影追剧，宅在家的日子倒也十分自在。<br>4月初，毕业后的第一个项目在疫情的影响下提前结束了，但下个项目还没有着落，所以被强制休假到月底，才去公司上班。然后开始了一个多月自我学习和培训的日子，也算充实。</p>
<p>6月初，我终于有了项目，此时国内的疫情已经基本控制住了，但国外却越愈发严重起来，这也是我第一个项目提前结束的原因，所以新项目自然是国内项目。<br>早听说过国内项目加班多节奏快，而我在公司近两年的时间里，都在国外项目，从来没加过班。经历过的国内软件项目，还是毕业前 <a href="https://jmyblog.top/%E6%9C%AA%E6%9D%A5%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7-Part2/">实习</a> 的时候，而那时的体验并不好，所以刚开始不太想去，但此时形势很严峻，我没有别的选择，只能硬着头皮上了。</p>
<p>刚开始的一个项目，虽有些不适，但也还能撑得住，有个同事听说我工作两年没加过班表示非常震惊，他是不久前来公司的，可能之前在别的公司经常加班吧，对比下来，我还真是挺「幸运」的。<br>同时，公司里也有一些微妙的变化，有人离职了，也有人「被」离职。人也越来越多了，办公室重新装修，原先的好多休闲区和休息区被拆掉，全部换成了工位，有的地方连会议室都摆上了工位，让人倍感压抑。</p>
<p>后来，这个项目终于结束了，但还是没有适合的国外项目可以去，所以又去了另一个国内项目，节奏更加紧张，这次我 <a href="https://jmyblog.top/Silent-protest/">没撑住</a> ，心态直接崩了，然后默默的下了项目。<br>此时已是11月底，剩下的一个月，是一段五味杂陈、胡思乱想的日子，2020就这样结束了。</p>
<h2 id="2021：优雅的躺平"><a href="#2021：优雅的躺平" class="headerlink" title="2021：优雅的躺平"></a>2021：优雅的躺平</h2><p>2021，我的本命年，目前没有什么奇怪的事情发生。<br>前四个月我是 <a href="https://jmyblog.top/my-1-3-part-of-2021/">这样度过</a> 的，总之就是拨云见日的一段时光，到今天，我已经在新项目上待了三个月，整体来说挺不错，因为熟人很多，也学了不少东西，不出意外今年会在这个项目上一直做下去，这样倒也不错，至于明年之后会如何，见招拆招吧。</p>
<p>到今天，我已经工作整整三年了。<br>三年以前，我想开心的工作，现在，我只想优雅地躺平<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>，我是一个习惯被安排的人，习惯于被指点江山，被激扬文字，玩游戏喜欢玩辅助，所以工作也选择了辅助角色。<br>在公司我一直无争无为，默默搬砖，除了跟在一个项目工作过的人彼此认识之外，也没有什么大的影响力，可能我忽悠不了别人，也很难被人忽悠吧。搁娱乐圈，这就叫做「搬砖三年，归来仍是素人。」</p>
<p>记得刚入职的时候，有同事向我感慨「我要是21岁，就可劲儿造」，但我却一直心如止水，「造」不起来。后来，又有很多同事说我太佛系，不像个年轻人。<br>其实我一直都尽力搬砖，遵纪守法，不逃税不漏税，好好活着，不给别人找麻烦，作为社会人，我觉得已经很合格了，我是一个没有太多欲望的人，这就是我对自己的期望，如果这样就叫做「佛系」和「躺平」的话，那就是吧。</p>
<p>工作后感觉时间过的更快了，好像昨天才拿到公司的offer，转眼就已经三年了，这三年我一直一个人住，所以也练就了不错的 <a href="https://jmyblog.top/myCookingWay/">厨艺</a> ，偶尔请朋友和同事来家里小聚，生活倒也平淡自在。有人老想回到过去，但我还是喜欢现在的生活，因为过去太迷茫，对未来有太多恐惧，还是现在选择更多一些，更自由。<br>按照公司的制度，我又可以更换新的办公电脑了，这次应该是16寸的MacBook Pro，之前的电脑也打算按照员工优惠回购，收拾心情，重新出发。</p>
<h2 id="我眼里的车和房"><a href="#我眼里的车和房" class="headerlink" title="我眼里的车和房"></a>我眼里的车和房</h2><p>打工三年，我的月薪从税前四位数变成了税后五位数，这三年我每个月都攒钱，一直想买个二手的小房子，期望是用公积金就可以还贷款，这样不用降低生活质量。</p>
<p>五月份我开始实地看房，但一直找不到合适的，房价真的虚高，我的期望根本达不到，以我能拿出手的首付，只能用得上商贷，想用公积金贷款，只能掏更多的首付，凭我一人之力，目前根本做不到。<br>至于买新房，更难，虽然我有购房资格，但抛开价格不谈，现在买房必然摇号，我并不是刚需，所以希望渺茫。更别说现在无良开发商这么多，少有不维权的楼盘，所以买房这场游戏，我只能暂时被劝退。<br>最近，西安正在进行二手房价格调控，政府出台了指导价，虽不能指望对目前涨到最高点的房价有太多约束，但总归市场还是有一些震荡，买卖双方还在观望，且先看着吧。</p>
<p>至于买车？倒也不是不能买，但买了车，停哪呢，公司的车位已经排到了2023年，而且在西安开车太难了，除了限号，就是堵车，更别提车到手就贬值，还得买保险保养什么的，主要我一个人，买车的需求实在不强烈。<br>还是骑上我心爱的小滑板吧，它永远不会堵车。</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>UiAutomator初体验(中)</title>
    <url>/ui-automator-test-2/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/08/07/gVpdC1hMQHsrT64.png">

<div class="note info"><p>事实上，如何上手编写最基本的UiAutomator测试，<a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing">官网</a> 上已经给出了设置步骤和简单的代码示例，只是没有从零开始介绍怎么创建一个完整的测试而已，所以我们可以基于官网文档，写一个可以在模拟器上运行的测试。</p>
</div>

<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>回到上篇博客创建好的测试项目，在app模块的build.gradle文件中，加上UiAutomator库的依赖：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    ...</span><br><span class="line">    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>添加之后Android Studio可能不会立刻下载依赖，所以为了确保可以使用uiautomator，需要在下图手动Apply一下：</p>
<p><img data-src="https://i.loli.net/2021/08/06/ljXOiHw7F5KQZIu.png" alt="下载依赖"></p>
<h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><p>UI测试的第一步当然是定位元素，uiautomatorviewer工具可以做到这一点，它位于 <mark class="label primary">android-sdk/tools/bin/</mark> 目录，android-sdk就是下图中的sdk路径：</p>
<p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>打开终端，定位到上述目录中，然后运行uiautomatorviewer：</p>
<p><img data-src="https://i.loli.net/2021/08/06/1lOsYUNK7haAxnV.png" alt="运行uiautomatorviewer"><br>如果上篇博客的环境都准备好了，就能打开uiautomatorviewer窗口，如果有已启动的设备，这里我打开了一个 <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E5%90%AF%E5%8A%A8Android-Emulator">安卓模拟器</a> ，点击窗口左上角第二个按钮，就能获取设备当前页面的screenshot，右侧是页面元素信息，通过这些信息，我们就可以定位元素了。<br>UiAutomator提供了findObject()方法定位UiObject元素，以定位上图页面底部Login按钮为例：</p>
<div class="tabs" id="定位元素写法"><ul class="nav-tabs"><li class="tab active"><a href="#定位元素写法-1">定位元素写法 1</a></li><li class="tab"><a href="#定位元素写法-2">定位元素写法 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="定位元素写法-1"><p>Kotlin：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">val loginButton: UiObject = device.findObject(</span><br><span class="line">        UiSelector().text("Login").className("android.widget.TextView")</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="定位元素写法-2"><p>Java：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">UiObject loginButton = device.findObject(new UiSelector()</span><br><span class="line">        .text("Login")</span><br><span class="line">        .className("android.widget.TextView"));</span><br></pre></td></tr></tbody></table></figure></div></div></div>

<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下来我们就可以编写代码测试App了，我还是用了 <a href="https://jmyblog.top/AppUI-AutoTest-1/">之前文章</a> 里的测试App，可以在 <a href="https://github.com/webdriverio/native-demo-app/releases">这里</a> 下载，然后把它安装到模拟器里。<br>我们来编写最简单的两个Case，登录和注册。</p>
<p><img data-src="https://i.loli.net/2021/08/06/6wSmbHJQcOIKTgz.png" alt="登录和注册页面"></p>
<div class="note info"><p>首先是登录，要实现登录操作，我们要切换到登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要先切换到登录页面，再切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p>
</div>
<p>这里我只贴出一个步骤，是去打开app的登录页面，就使用上面的元素定义，其它步骤都可以参考这个完成：</p>
<p><img data-src="https://i.loli.net/2021/08/06/9UVPvcLlJqCKRzD.png" alt="打开登录页面测试步骤"><br>其中，launchApp方法依然是 <a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing#accessing-ui-components">官网提供</a> 的，先定义了一个device对象，通过该对象连接设备，然后再利用PackageName打开对应的App，最后我们定位元素并点击进入登录页面。<br>设备当前打开App的PackageName可以通过以下命令得到：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb shell dumpsys window | grep -E 'mCurrentFocus'</span><br></pre></td></tr></tbody></table></figure>
<p>这就是我们使用Ui Automator编写的第一个可以运行的测试。</p>
<h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>有三种方式可以运行Ui Automator测试，第一种是直接在编辑器里点击运行图标：</p>
<p><img data-src="https://i.loli.net/2021/08/06/LualXZYnq1R49Bv.png" alt="两个地方都可以点"><br>第二种方式是通过adb shell在命令行运行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb shell am instrument -w -m -e debug false -e class 'com.example.androidtest.ExampleInstrumentedTest#openLoginPage' com.example.androidtest.test/androidx.test.runner.AndroidJUnitRunner</span><br></pre></td></tr></tbody></table></figure>
<p>第三种方式也是在命令行运行，上篇博客提到，因为Ui Automator测试位于androidTest文件夹，是一种插桩测试，所以可以利用gradle直接运行，和mvn test执行测试的道理差不多：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./gradlew connectedAndroidTest</span><br></pre></td></tr></tbody></table></figure>
<p>后两种运行方式，官网上也给出了 <a href="https://developer.android.com/studio/test/command-line">详细介绍</a> ，并且提供了各个参数的含义。<br>值得一提的是，用第三种方式运行测试还会生成两个测试结果文件，一个是html格式，在 <mark class="label info">path_to_your_project/module_name/build/reports/androidTests/connected/</mark> 目录中：</p>
<p><img data-src="https://i.loli.net/2021/08/06/S7AfZ3yGMFXTRYo.png" alt="测试报告"><br>另一个是xml格式，在 <mark class="label info">path_to_your_project/module_name/build/outputs/androidTest-results/connected/</mark> 目录中。</p>
<h2 id="PageObject"><a href="#PageObject" class="headerlink" title="PageObject"></a>PageObject</h2><p>尽管我们已经写好了测试，但把所有的步骤都放在一个文件中显然不是good practice，所以我们可以按照Page Object模式将代码进行优化，把before方法、页面元素、操作步骤和测试分开，完成后的代码结构如下：</p>
<p><img data-src="https://i.loli.net/2021/08/07/piOLVbxPScuAw5t.png" alt="PageObject"><br>其中，selectors包里是各个页面的元素，pages包则用来存放各个页面的操作方法，公用的方法比如launchApp都放在BasePage里，真正的测试用例则统一放在tests包里，我已将 <a href="https://github.com/Summyj/UiAutomatorDemo">代码库</a> 上传到了github，不足之处还请大家批评指正。<br>以下是用三种方式执行测试的视频，直接点击编辑器图标运行大概12秒，用adb运行16秒，gradle运行也不过25秒：</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>uiautomatorviewer</tag>
      </tags>
  </entry>
  <entry>
    <title>UiAutomator初体验(下)</title>
    <url>/ui-automator-test-3/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/08/07/XE59SbdlRZBJ7iW.png">

<div class="note info"><p>上篇博客我们用UiAutomator编写了一个可以用命令行运行的测试，那它就肯定可以集成到CI上，没有完成的同学也不用担心，可以先fork <a href="https://github.com/Summyj/UiAutomatorDemo">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p>
</div>

<h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>这里直接复用 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E5%88%9B%E5%BB%BAAndroid%E5%BA%94%E7%94%A8">之前博客</a> 相同部分的内容，按照步骤做就可以了。</p>
<h2 id="添加UiAutomator-workflow"><a href="#添加UiAutomator-workflow" class="headerlink" title="添加UiAutomator workflow"></a>添加UiAutomator workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为UiAutomator的 workflow：</p>
<p><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="新建workflow(忽略这里的名字哈)"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：</p>
<p><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="添加执行步骤(忽略这里的名字哈)"><br>接下来请依次添加以下步骤。</p>
<h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步通常为每个workflow最开始的两个步骤，不需要做任何改动，保持默认的配置就好，意思是说用SSH的方式下载主代码库，这里是指上面fork的模拟的Android开发代码库：</p>
<p><img data-src="https://i.loli.net/2021/08/07/bqzS9O2DV1BgE6h.png" alt="下载主代码库"></p>
<h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>第三步是下载测试代码库，搜索并添加一个Script步骤，直接git clone即可，repo地址请换成自己的哦，Bitrise会把测试代码库下载到$BITRISE_SOURCE_DIR，也就是/bitrise/src/这个目录下：</p>
<p><img data-src="https://i.loli.net/2021/08/07/VG2rC7TZIXcsRMA.png" alt="下载测试代码库"></p>
<h3 id="添加安卓模拟器"><a href="#添加安卓模拟器" class="headerlink" title="添加安卓模拟器"></a>添加安卓模拟器</h3><p>然后是创建并启动模拟器，和在本地运行测试一样，运行之前得确保模拟器开启，这里我将默认的API Level改成了29，因为比较常用：</p>
<p><img data-src="https://i.loli.net/2021/08/07/JwTigPXExe2um97.png" alt="创建模拟器"></p>
<h3 id="等待模拟器启动"><a href="#等待模拟器启动" class="headerlink" title="等待模拟器启动"></a>等待模拟器启动</h3><p>接着等待模拟器启动，默认是等待5分钟，这里我增加到了10分钟：</p>
<p><img data-src="https://i.loli.net/2021/08/07/5QtKkLRU28N4jnY.png" alt="等待模拟器启动"></p>
<h3 id="安装测试App"><a href="#安装测试App" class="headerlink" title="安装测试App"></a>安装测试App</h3><p>接下来就是在模拟器里安装App了，我把测试App也保存到了代码库里，这里使用adb install命令来安装指定位置下的apk文件：</p>
<p><img data-src="https://i.loli.net/2021/08/07/JzEcfoVBwQGT4Yb.png" alt="安装Apk"></p>
<h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，上篇博客中提到可以用两种命令执行测试，一个是gradle，一个是adb，因为用gradle执行可以生成一个测试报告，为了方便接下来的步骤，这里选择用gardle：</p>
<p><img data-src="https://i.loli.net/2021/08/07/CYS2gtmpMWDaqw1.png" alt="执行测试"></p>
<h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，上篇博客同样提到gradle执行测试后，会生成html和xml两种格式的测试报告，由于Bitrise只能解析xml格式的测试报告，所以改路径为下图xml文件所在位置，接着添加depoly步骤后才能运行之后看到测试报告，不需要做任何改动，保持默认的配置就好：</p>
<p><img data-src="https://i.loli.net/2021/08/07/DhFivjswpXt5m8n.png" alt="导出测试报告"></p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>有时候为了安全考虑，代码里不能明文存储像账号密码之类的测试数据，所以这里我将账号密码保存成Bitrise的环境变量：</p>
<p><img data-src="https://i.loli.net/2021/08/07/mq2bJtDaAT9QGlu.png" alt="Bitrise添加环境变量"><br>接着在代码里用getenv()方法获取环境变量即可，本地运行的话再赋个值就可以了：</p>
<p><img data-src="https://i.loli.net/2021/08/07/Zqv796Dt3docrXP.png" alt="获取环境变量"></p>
<h2 id="运行workflow"><a href="#运行workflow" class="headerlink" title="运行workflow"></a>运行workflow</h2><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><p>万事皆备，就可以运行workflow了，点击右上角保存按钮，之后回到应用页面，选择开始build，选择UiAutomator workflow，然后开始Build：</p>
<p><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="首次运行workflow((这里是之前文章里的图))"><br>以后再运行，可以像上边一样设置Build，更方便的是进入上个build的详情页，直接点击rebuild就可以再次运行了：</p>
<p><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="Rebuild(这里是之前文章里的图)"><br>也可以选择“Rebuild with remote access”，Bitrise给安卓应用提供了远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="Rebuild with remote access(这里是之前文章里的图)"><br>可以按照Bitrise提供的地址和密码连接该机器(每次运行地址和密码都会变)。</p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>如果上面的步骤都设置正确，应该是可以运行成功的，失败的话大概率应该是上边配置不对，自行解决哦：</p>
<p><img data-src="https://i.loli.net/2021/08/07/uIFs2vK5nBQTROf.png" alt="运行结果"><br><img data-src="https://i.loli.net/2021/08/07/UwucB8XYFqzDGLk.jpg" alt="测试报告"><br>一共10分钟，测试跑了3分半左右，但真正执行测试的时间应该只有几十秒，其他都是在下载依赖：</p>
<p><img data-src="https://i.loli.net/2021/08/07/WxzDIfAoq1N7bTU.png" alt="测试日志"><br>然后发现模拟器安装测试APP这一步花的时间很长，通常得5分钟左右：</p>
<p><img data-src="https://i.loli.net/2021/08/07/1dZblQcaHUkRDuI.png" alt="安装apk日志"><br>有时时间更长甚至会失败，没找到解决办法，但失败的情况比较少，重跑就行，所以先不管了：</p>
<p><img data-src="https://i.loli.net/2021/08/07/XmsRVoIEP8lzq4a.png" alt="安装失败"></p>
<h3 id="尝试用adb运行测试"><a href="#尝试用adb运行测试" class="headerlink" title="尝试用adb运行测试"></a>尝试用adb运行测试</h3><p>试过不导出测试报告，用adb在CI执行测试，但会报一个互斥锁的错误，感觉在CI上太难连到模拟器了，上边在模拟器安装apk的步骤也很费劲，所以最好不用adb命令吧。</p>
<p><img data-src="https://i.loli.net/2021/08/07/MTudktDJ41ZcO6G.png" alt="adb运行"></p>
<h2 id="UiAutomator-vs-Appium"><a href="#UiAutomator-vs-Appium" class="headerlink" title="UiAutomator vs Appium"></a>UiAutomator vs Appium</h2><p>UiAutomator初体验到这里就结束了，因为之前我也写过用Appium进行移动端UI自动化测试的系列文章，所以感受到了很多不同，具体在以下几个方面。</p>
<h3 id="上手方面"><a href="#上手方面" class="headerlink" title="上手方面"></a>上手方面</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，UiAutomator是更快更简洁的，依赖更少；这是Appium创建的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，这是UiAutomator创建的 <a href="https://jmyblog.top/ui-automator-test/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，还是UiAutomator更快更方便。</p>
<p>这是Appium用来定位元素的 <a href="https://jmyblog.top/AppUI-AutoTest-1/#Appium-Desktop">Appium Desktop</a> ，这是UiAutomator用来定位元素的 <a href="https://jmyblog.top/ui-automator-test-2/#%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0">uiautomatorviewer</a> ，还是UiAutomator更方便，不用设置Desired Capabilities，但界面其实没人家好看。</p>
<p>这是利用Appium <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这是用UiAutomator <a href="https://jmyblog.top/ui-automator-test-2/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这里写的是同样的测试用例，其实是差不多的，只是语言不同而已。不过对于Webview，Appium还需要切换context，UiAutomator则可以直接操作Webview，不用手动切换context，这会大大减少测试运行的时间和出错率。</p>
<p>Appium适用于iOS和Android两个平台，UiAutomator是只针对Android的，其实Appium在Android平台底层用的也是UiAutomator作为自动化引擎，从Desired Capabilities的配置就可以发现：</p>
<p><img data-src="https://i.loli.net/2021/08/07/y9QTpiPKDWul81b.png" alt="android capabilities"><br>所以UiAutomator相当于是安卓原生的一个自动化测试框架，iOS也有自己原生的UI测试框架XCUITest，它也是Appium在iOS平台底层引用的自动化引擎：</p>
<p><img data-src="https://i.loli.net/2021/08/07/9GQvkLTlxMgU8Zt.png" alt="ios capabilities"></p>
<h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>再来看看运行时间，还是贴出两个框架的运行视频，这里写的同样的测试用例，先来看UiAutomator用三种方式运行测试的视频，最长的时间是用gradle运行，大概25秒，最短只需要12秒：</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe>

<p>再来看Appium运行视频，是用npm命令跑，大概23秒，看起来和UiAutomator差不多，但更复杂的场景还是UiAutomator更快的。</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe>

<h3 id="CI配置"><a href="#CI配置" class="headerlink" title="CI配置"></a>CI配置</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E6%B7%BB%E5%8A%A0e2e-workflow">CI配置过程</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test-3/#%E6%B7%BB%E5%8A%A0UiAutomator-workflow">CI配置过程</a> ，看着虽然也差不多，但亲测其实Appium步骤更多，因为要切换Webview，后续还要加一步下载chrome webdriver，而UiAutomator则不用。</p>
<h3 id="个人体验"><a href="#个人体验" class="headerlink" title="个人体验"></a>个人体验</h3><div class="note info"><p>两个框架各有优劣，可以根据实际需求选择，我自己体验下来还是Ui Automator更方便一些，不过两个框架我都是初次使用，目前除了webview之外我也没遇到别的复杂场景，或许有的方面Appium会更胜一筹，继续学习吧，碰到之后我也会写博客分享的。</p>
</div>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Bitrise</tag>
      </tags>
  </entry>
  <entry>
    <title>UiAutomator初体验(上)</title>
    <url>/ui-automator-test/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2021/07/31/hT5tpAjqk2xZN8L.png">

<blockquote>
<p>前段时间博主写了 <a href="https://jmyblog.top/AppUI-AutoTest/">系列文章</a> 来介绍移动端的UI自动化，主要工具是Appium。之后发现Appium还是存在一些问题，比如定位不到元素、运行时间长等等。<br>后来又针对Android平台spike了其它的工具，比如Espresso、UiAutomator，它们都是安卓官网推荐的测试工具，参考了网上诸多文章，如 <a href="https://medium.com/@phamngocson.l13cla/espresso-vs-ui-automator-66af8232259d">Espresso vs Ui Automator</a>。<br>结论是Espresso拥有更多高级的方法，但它对代码能力的要求比较高，所以对于一般QA来说难以使用，而UiAutomator更容易上手，所以我选择了UiAutomator，本来想用一篇博客介绍的，但篇幅太长，所以分了三篇博客分享。</p>
</blockquote>
<h2 id="UiAutomator介绍"><a href="#UiAutomator介绍" class="headerlink" title="UiAutomator介绍"></a>UiAutomator介绍</h2><p>UiAutomator是什么呢？参考 <a href="https://developer.android.com/training/testing/ui-automator">官网介绍</a> ：</p>
<div class="note info"><p>UI Automator 测试框架提供了一组 API，用于构建在用户应用和系统应用上执行交互的界面测试。通过 UI Automator API，您可以执行在测试设备中打开“设置”菜单或应用启动器等操作。UI Automator 测试框架非常适合编写黑盒式自动化测试，此类测试的测试代码不依赖于目标应用的内部实现细节。</p>
</div>
<p>hummm…官方介绍总是给人一种似懂非懂的感觉，不过问题不大，接下来我们通过实践来深入了解UiAutomator <span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.下载 <a href="https://developer.android.com/studio">Android Studio</a>，下载后打开以下设置确保sdk location正确：</p>
<p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>2.下载 <a href="https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u292b10.pkg">JDK 8</a> ，这里版本一定要是8，否则打不开uiautomatorviewer工具。<br>3.下载 <a href="https://download.eclipse.org/eclipse/downloads/drops4/R-4.20-202106111600/">swt</a> ，滑到页面底部找到这里，按照对应平台下载即可：</p>
<p><img data-src="https://i.loli.net/2021/08/04/k28chb6SsBjpIwH.png" alt="下载swt"><br>这个也是为了打开uiautomatorviewer工具，因为uiautomatorviewer自带的swt包有一些问题，所以得自己下载一个，这个感觉是uiautomatorviewer的一个bug。<br>下载之后解压，然后把里面的swt.jar重命名为swt2.jar：</p>
<p><img data-src="https://i.loli.net/2021/08/04/WPT7VcmHapot1J5.png" alt="swt2.jar"><br>进入上文的sdk location目录，然后再依次打开<mark class="label primary">tools/lib/x86</mark> 目录，可以看到uiautomatorviewer自带的swt包，然后复制刚才的swt2.jar到这里(我也不知道为啥不干脆替换掉原有的swt包)，下面的x86_64目录也要做同一操作：</p>
<p><img data-src="https://i.loli.net/2021/08/04/r2IeHSdCPiasYbn.png" alt="添加swt2.jar"><br>4.所有依赖都已经下载完啦，然后我们来设置环境变量，打开你本地的 .bash_profile 或者 .zshrc 文件，没有就新建一个，之后输入下边的设置，直接粘贴改动即可：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export ANDROID_HOME=path/to/your/Android sdk (eg:/Users/usr/Library/Android/sdk)</span><br><span class="line">export PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">AAPT_HOME=/path/to/your Android sdk build-tools (eg:/Users/usr/Library/Android/sdk/build-tools/28.0，这里的28.0是我本地的版本，你需要打开对应目录查看自己的版本然后修改。)</span><br><span class="line">export AAPT_HOME</span><br><span class="line">export PATH=$PATH:$AAPT_HOME</span><br></pre></td></tr></tbody></table></figure>
<p>保存后执行 <strong>source .bash_profile</strong> 或者 <strong>source .zshrc</strong> 使配置生效，然后执行 <strong>java -version</strong>，确保java版本正确。</p>
<h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>打开Android Studio创建新项目，因为我们是要写测试，而不是开发App，所以选择No Activity后继续，这里我把项目名和包名改成了自定义的，你也可以改成别的；项目语言有Java和Kotlin，其实两者非常相像，语法略有不同，这里我选了Kotlin，你也可以用Java，影响不大：</p>
<p><img data-src="https://i.loli.net/2021/08/04/1Hz826lcKeNWPwV.png" alt="创建项目"><br>之后Android Studio会开始用Gradle构建你的项目，右下角可以看到进度，构建完成后，在页面左上角下拉框中切换到Project视图，可以看到项目结构：</p>
<p><img data-src="https://i.loli.net/2021/08/04/dgVfhKHEDsjRt95.png" alt="项目结构"></p>
<h2 id="熟悉项目结构"><a href="#熟悉项目结构" class="headerlink" title="熟悉项目结构"></a>熟悉项目结构</h2><p>这是一个最基本的安卓项目代码结构，根目录和app模块各有一个build.gradle文件，我们重点关注 <strong>app</strong> 模块，src里有三个目录，main目录里一般存放App的activity文件，这里没有是因为我们前边选择了No Activity，不过这个与测试无瓜。<br>其他两个目录 <strong>androidTest</strong> 和 <strong>test</strong> 分别用来存放app的插桩测试(Instrumented tests)和单元测试，单元测试我们都知道，那什么是插桩测试呢？<br>同样引用 <a href="https://developer.android.com/studio/test#test_types_and_location">官网介绍</a>：</p>
<div class="note info"><p>插桩测试，位于 module-name/src/androidTest/java/ 目录，这些测试在硬件设备或模拟器上运行。这些测试有权使用 Instrumentation API，可让您获取某些信息（例如您要测试的应用的 Context），并且可让您通过测试代码来控制受测应用。在编写集成和功能界面测试来自动执行用户交互时，或者当您的测试具有模拟对象无法满足的 Android 依赖项时，可以使用这些测试。</p>
</div>
<p>很明显，我们要写的就是这种测试，所以无论是UiAutomator测试，还是上文提到的Espresso测试，都应该写在各模块文件夹里的AndroidTest目录中。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Android</tag>
        <tag>UiAutomator</tag>
      </tags>
  </entry>
  <entry>
    <title>关于闰年，你不知道的那些事</title>
    <url>/%E5%85%B3%E4%BA%8E%E9%97%B0%E5%B9%B4%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p>“四年一闰，百年不闰，四百年再闰”。你知道为什么吗？</p>
<span id="more"></span>

<p>判断某一年是否是闰年几乎是所有编程语言的基础练习题之一，而我们必然也熟知其规则：</p>
<ul>
<li>整除但4不能整除100</li>
<li>整除100又能整除400</li>
</ul>
<blockquote>
<p>这就是俗语中的“四年一闰，百年不闰，四百年再润”，我们当然可以根据这个规则编写程序判断闰年，但你知道为什么这样规定闰年的算法么？</p>
</blockquote>
<hr>
<p>事实上，闰年是为了弥补因人为历法规定，造成的年度天数与地球实际公转周期的时间差而设立的。所以闰年有366天。</p>
<p>那么具体是怎么弥补的呢？</p>
<blockquote>
<p>我们知道，平年一年只有365天，而实际上地球绕太阳的公转周期为365天5小时48分46秒。即一回归年。所以公历的每一年都比回归年短0.2422天，四年累计起来，共短0.9688天。</p>
</blockquote>
<p>大概就是一天，所以为了弥补这一天的时间差。给2月加上1天，就有了闰年。这样一来，每四年里就有一个闰年，3个平年。这就是<strong>四年一闰</strong>。</p>
<p>那么<strong>百年不闰，四百年再闰</strong>又是怎么回事呢？</p>
<blockquote>
<p>是这样的，刚才说四年累计起来的时间差只有0.9688天，这比我们给闰年增加的一天还少0.0312天，所以每四年就会多出0.0312天。这样400年后，就会比实际天数多出3.12天。所以我们必须在这400年中少设3个闰年。这样公历年的平均长度与回归年就近似了。</p>
</blockquote>
<p>那这3个闰年怎么少呢？</p>
<p>很简单，给百年除以400即可，比如2000-2400这400年：</p>
<ul>
<li>2000/400=5</li>
<li>2100/400=5.25</li>
<li>2200/400=5.5</li>
<li>2300/400=5.75</li>
<li>2400/400=6</li>
</ul>
<p>可以发现，正好有3个不能整除的整百年。所以规定年份是整百数的必须是400的倍数才是闰年。这就是百年不闰，四百年才闰的规定。</p>
<p>你明白了吗？</p>
<hr>
<p>当然，根据规则，我们就可以编写代码判断了：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	cin &gt;&gt; year;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span>)<span class="comment">//1. 能整除4，不能整除100</span></span><br><span class="line">		{</span><br><span class="line">			cout &lt;&lt; <span class="string">"是闰年\n"</span> &lt;&lt; endl;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((year % <span class="number">100</span>==<span class="number">0</span>) &amp;&amp; (year % <span class="number">400</span>==<span class="number">0</span>))<span class="comment">//2. 能整除100， 又能整除400</span></span><br><span class="line">		{</span><br><span class="line">			cout &lt;&lt; <span class="string">"是闰年\n"</span> &lt;&lt; endl;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//其它情况不是闰年</span></span><br><span class="line">		{</span><br><span class="line">			cout &lt;&lt; <span class="string">"不是闰年\n"</span> &lt;&lt; endl;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//不能整除4就不是闰年</span></span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"不是闰年\n"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>闰年</tag>
      </tags>
  </entry>
  <entry>
    <title>敏捷开发与测试</title>
    <url>/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>啥是敏捷，敏捷是啥？</p>
<span id="more"></span>

<h1 id="与“敏捷开发”的初次接触"><a href="#与“敏捷开发”的初次接触" class="headerlink" title="与“敏捷开发”的初次接触"></a>与“敏捷开发”的初次接触</h1><p>开始接触到“敏捷”这个概念，是在公司实习的时候，因为所在项目组实行的是敏捷开发。后来又读了几本关于敏捷测试的书籍（软件测试的艺术第三版—Chapter9），有了更深入的理解。所以本文主要是博主的实习经历总结和读书笔记。</p>
<hr>
<blockquote>
<p>接下来我将从3个方面：What?（什么是敏捷开发）&amp;Why（为什么要实行敏捷开发）&amp;How（如何实施）来谈谈我对敏捷软件开发模式的理解。</p>
</blockquote>
<h1 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h1><h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><p>简单来说，敏捷开发是一个<strong>以用户为中心、客户需求为导向</strong>的开发过程。强调客户合作、响应需求变化。是一种<strong>迭代式、增量式</strong>的开发模式。主要有以下特点：</p>
<ul>
<li>依赖客户参与</li>
<li>测试驱动开发（TDD）</li>
<li>开发周期短</li>
</ul>
<h2 id="敏捷测试"><a href="#敏捷测试" class="headerlink" title="敏捷测试"></a>敏捷测试</h2><p>对应敏捷开发模式，敏捷测试要求每个人都参与到测试过程中，所以需要团队人员之间进行大量的沟通与协作。</p>
<ul>
<li>客户：定义用例和程序属性参与验收测试</li>
<li>开发和测试：共同打造可以进行功能自动化的测试配件</li>
</ul>
<p>与传统测试过程相比，敏捷测试主要有以下特征：</p>
<ul>
<li>测试并不是一个独立的阶段，而是和开发过程紧密联系并<strong>驱动开发</strong>（TDD）。</li>
<li>开发者先创建<strong>单元测试</strong>用例（失败验证测试），然后实现软件单元代码。</li>
<li>敏捷测试依赖于<strong>自动化测试</strong>。</li>
<li>测试者要通过持续的测试反馈推动项目前行，并<strong>帮助开发者修复bug</strong>。</li>
</ul>
<hr>
<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><blockquote>
<p>与传统软件开发模式相比，敏捷开发把客户的参与作为关键环节。这样引入了灵活性，提高客户满意度。</p>
</blockquote>
<p>如今的客户总是需要能立即发布的高质量应用产品，使得传统开发模式不能适应这种激烈的市场竞争环境。所以大多数企业更青睐像敏捷开发一般，轻量化、快速的开发方法。</p>
<hr>
<h1 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h1><p>事实上，敏捷开发方法有很多种，比如：功能驱动开发（FDD）、开放统一过程等等。但最流行的是<strong>极限编程（XP）</strong>开发方法和<strong>Scrum（进度跟踪）</strong>项目管理方法。</p>
<blockquote>
<p><strong>XP</strong>是一种迭代式、增量式的开发模式，非常强调单元测试和验收测试，是现在最著名的敏捷方法。<br><strong>Scrum</strong>是一种迭代式、增量式的项目管理方法，适用于所有的敏捷方法，用来度量开发速度和进度。两者相辅相成，形成了现今最流行的敏捷开发模式。</p>
</blockquote>
<h2 id="XP编程"><a href="#XP编程" class="headerlink" title="XP编程"></a>XP编程</h2><p>面向对象的编程语言如Java/C#，都含有全功能的API，所以可以利用其迅速实现大型复杂应用。但正因如此，应用程序的质量经常得不到保证。</p>
<blockquote>
<p>XP编程的目的就是<strong>短时间</strong>开发<strong>高质量</strong>的应用程序。所以，XP方法将主要精力集中在测试上，在产品设计阶段之后，必须首先生成单元测试用例，然后才编写代码通过测试。</p>
</blockquote>
<p>XP开发模型用12个核心实践来驱动该过程：</p>
<ul>
<li>NO.1：需求分析（开发、客户、产品均参与）</li>
<li>NO.2：小规模、递增发布（增加实在/可增值的新功能，频繁发布新版本）</li>
<li>NO.3：系统隐喻（编程小组确认开发规则）</li>
<li>NO.4：简要设计（实现简要设计，通过单元测试，不需重复设计，只要不停实现）</li>
<li>NO.5：连续测试（编写模块之前先生成单元测试用例，模块在通过单元测试后才算完成，程序在通过所有单元测试和验收测试后才算结束）</li>
<li>NO.6：重构（清理调整代码库，任何重构之后需重新进行所有单元测试）</li>
<li>NO.7：结对编程（两位程序员在同一台机器协同开发代码库，便于对代码实时检查，提高缺陷发生纠正率）</li>
<li>NO.8：代码的集体所有权（所有代码归全体程序员所有，不存在某一个程序员只开发某一个代码库）</li>
<li>NO.9：持续集成（变更后的代码在通过单元测试之后将其集成到代码库中）</li>
<li>NO.10：每周工作40小时（不允许加班，如果每周都全力工作了40个小时，就不需要加班，在版本发布的前一周例外）</li>
<li>NO.11：客户在现场（编程小组可以随时与客户沟通）</li>
<li>NO.12：按标准编码（所有的代码需要满足编程小组设计的系统隐喻）</li>
</ul>
<h2 id="XP测试"><a href="#XP测试" class="headerlink" title="XP测试"></a>XP测试</h2><blockquote>
<p>为满足XP方法的流程和思想，XP测试强调连续测试。主要由两种类型的测试组成：<strong>单元测试</strong>和<strong>验收测试</strong>。</p>
</blockquote>
<h3 id="XP单元测试"><a href="#XP单元测试" class="headerlink" title="XP单元测试"></a>XP单元测试</h3><p>单元测试是XP测试采用的主要测试方法，具有两条规则：</p>
<p>1.所有的代码模块在编码开始前必须设计好单元测试用例（最主要的优点在于可以更好理解程序需求，排除混淆）</p>
<p>2.产品发布之前所有的代码模块必须通过单元测试</p>
<p>为了迎合项目进度，单元测试通常要用自动化测试套件来减轻单元测试负担，测试套件可以生成测试报告并对程序中出现的缺陷进行分类，帮助修复bug。</p>
<h3 id="XP验收测试"><a href="#XP验收测试" class="headerlink" title="XP验收测试"></a>XP验收测试</h3><blockquote>
<p>验收测试是判断应用程序是否满足功能性和易用性及其他需求，在设计阶段，开发人员和客户设计验收测试，由客户执行。</p>
</blockquote>
<p>验收测试需注意以下几点：</p>
<ul>
<li>同单元测试一样，验收测试也可是自动化的。测试内容为计算/数据等，可用自动化测试；当测试内容为界面布局和颜色等，测试应该是非自动化的。</li>
<li>与单元测试相同，验收测试过程中发现多个bug时，应对其进行优先级排序，每次bug修正后都要重新执行验收测试。所以验收测试也算是一种回归测试。</li>
</ul>
<h2 id="一个完整XP项目的运作流程"><a href="#一个完整XP项目的运作流程" class="headerlink" title="一个完整XP项目的运作流程"></a>一个完整XP项目的运作流程</h2><p>下表给出了一个完整XP项目应进行的流程：</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>Step1</td>
<td>程序员与客户进行产品需求分析会议，决定产品使用场景</td>
</tr>
<tr>
<td>Step2</td>
<td>编程小组进行内部会议，将需求分解为独立的任务，并估计每个任务所需要的时间（StoryPoint）</td>
</tr>
<tr>
<td>Step3</td>
<td>程序员向客户提交任务清单，并要求客户对任务清单进行优先级排序</td>
</tr>
<tr>
<td>Step4</td>
<td>编程小组根据程序员具备的能力，将任务分配给对应结对程序员</td>
</tr>
<tr>
<td>Step5</td>
<td>每对程序员按照程序需求和规格说明，编写相应任务的单元测试用例</td>
</tr>
<tr>
<td>Step6</td>
<td>每对程序员编写完成通过其单元测试用例的任务代码，期间不断对代码进行修改和重测，并对代码库进行整合和集成</td>
</tr>
<tr>
<td>Step7</td>
<td>编程小组发布应用程序的一个预览版本，由客户进行验收测试，并通过修改缺陷不断进行回归测试</td>
</tr>
<tr>
<td>Step8</td>
<td>程序员在验收测试成功的基础上发布产品版本</td>
</tr>
</tbody></table>
<p>其他工作：程序员根据最新经验更新对客户需求的时间估计方式。</p>
<h2 id="敏捷开发学习网站"><a href="#敏捷开发学习网站" class="headerlink" title="敏捷开发学习网站"></a>敏捷开发学习网站</h2><p><a href="http://www.scrumcn.com/agile/scrum-knowledge-library/scrum.html#tab-id-1">Scrum中文网</a><br><a href="https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Chinese-Simplified.pdf#zoom=100">Scrum指南</a></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>敏捷测试</tag>
        <tag>极限编程</tag>
      </tags>
  </entry>
  <entry>
    <title>未来是星辰大海_Part2</title>
    <url>/%E6%9C%AA%E6%9D%A5%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7-Part2/</url>
    <content><![CDATA[<p>记录一下博主小半年的心路历程。</p>
<span id="more"></span>

<h2 id="Part1-尘埃落定-2017-10-2017-11"><a href="#Part1-尘埃落定-2017-10-2017-11" class="headerlink" title="Part1 尘埃落定(2017.10-2017.11)"></a>Part1 尘埃落定(2017.10-2017.11)</h2><p>自从去年9月份拿到第一个offer后，就直接签了，后来也没有再找过。当时的想法是找到一个还不错的就行，毕竟事少离家近嘛。于是安排好自己毕业前的计划，开始了在宿舍颓废的生活，期间将自己的游戏账号打到了钻石，吃饭靠舍友投喂。。</p>
<p>两个月后，按照计划，我怀着紧张中带着一丝小激动的心情出发去公司实习。</p>
<h2 id="Part2-心态有点崩-2017-12-2018-02"><a href="#Part2-心态有点崩-2017-12-2018-02" class="headerlink" title="Part2 心态有点崩(2017.12-2018.02)"></a>Part2 心态有点崩(2017.12-2018.02)</h2><p>emmm…刚开始实习的时候，也没啥感觉。毕竟需要学习的东西有很多，每天下来也能收获不少东西。</p>
<p>但是时间长了，问题就开始出现了。</p>
<p>无脑病态的加班、毫无技术难度可言的工作、传话筒一般的工作感受让我觉得有些幻灭。</p>
<p>其实对于软件测试这个岗位呢，我也知道刚开始一般都是功能（黑盒）测试，比较基础。我也是愿意从基础打起的。但我想学习更多的测试技术，利用一些工具来提高工作效率。这样能提高自己以后的竞争力和学习能力。但这些，在我两个多月的实习工作中，没有感受到。</p>
<p>此外，繁琐的管理制度和考核流程也在考验我的耐性。这样的工作环境无法达到我“还不错”的标准，如果长期这样下去，我可能连Hello World都不会写了。无脑病态的加班更是占用了我的个人时间，基本上失去了利用空闲时间提升自己的可能性。</p>
<p>总的来说，这绝对不是我要的生活，我需要重新开始找工作（论早点实习的重要性）。</p>
<h2 id="Part3-重新开始-2018-03"><a href="#Part3-重新开始-2018-03" class="headerlink" title="Part3 重新开始(2018.03)"></a>Part3 重新开始(2018.03)</h2><p>过年那会，我就开始寻找目标。经过实习之后，我更加明确自己想要什么，完善了自己的简历。所以很快就确定了目标。</p>
<p>开学之后，我参加了宣讲会。提问环节HR说测试这个岗位在我所在的城市只招5个人。这意味着我要跟好多985/211的学生甚至研究生竞争，作为一个普通一本的本科生，在学历上，我可以说是毫无胜算。</p>
<p>不过我还是想尽力一试，毕竟这是我还有应届生光环的最后一次找工作机会。而且他们公司的工作理念很吸引我，岗位需求描述也和我很贴合，我确实很想成为他们的一员。</p>
<ul>
<li>笔试</li>
</ul>
<p>宣讲之后的几天，他们公司提供了线上笔试题（全英文），我有4天时间去完成。处理完学校的杂事（学校真是一个让人又爱又恨的地方），我在图书馆泡了两天做完了笔试题（答案也是全英文），半张纸的题目我写了10张纸的答案。</p>
<p>之后开始了几天的等待期，等待的过程是煎熬的。就在我怀疑自己要挂了的时候（是不是嫌弃我答案太长了/上传答案的时候我没有改文件名等等猜测），HR给我打了电话，让我去参加面试。感觉整个世界都晴朗了。</p>
<ul>
<li>面试</li>
</ul>
<p>在经过了精心的打扮（两天没洗头），一路畅通无阻（坐反了公交车到终点站才发现，最后叫了辆滴滴），心情舒畅（电梯里跟他们公司的外国小哥哥用英语尬聊了一分钟）之后，我到达了面试地点。没有我想象中的人山人海，因为那天只面试3个人。</p>
<p>由于我非常缺乏面试经验（秋招只面试了一家拿到offer就签了，这是人生中第二次面试），所以对我而言面试的过程是漫长的，还是紧张的（两个面试官，一男一女）。坐在大会议室的我有一种任人宰割的感觉。。，在面试官的调节下（面试官很友好的），我渐渐没了紧张的感觉。在后边的面试中，做到了知无不言，言无不尽。还跟面试官聊起了人生和理想。整体感觉挺High的。就这样，原本只给我40分钟的面试时间，愣是聊了一个多小时。最后由于别人要在会议室开会，我们还是结束了面试。</p>
<ul>
<li>offer</li>
</ul>
<p>在经过1天的等待后，HR给我发了口头offer，之后几天再去公司签了正式offer。</p>
<p>没错，这家公司就是传说中的TW(ThoughtWorks)。</p>
<h2 id="Part4-最后的规划-2018-04-2018-06"><a href="#Part4-最后的规划-2018-04-2018-06" class="headerlink" title="Part4 最后的规划(2018.04-2018.06)"></a>Part4 最后的规划(2018.04-2018.06)</h2><p>今天已经4月9号了，离毕业论文答辩还有两个月的时间。这两个月我需要闭关修炼，完成3件大事：</p>
<ul>
<li>做毕设</li>
<li>完成TW毕业生入职前的线上培训学习并完成所有任务卡（所以后边也会发表一些技术相关的学习总结博客）</li>
<li>拿到驾照</li>
</ul>
<p>emmm…有点理想主义，毕竟只有两个月，不过时间是挤出来的嘛，祝我好运。</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>人生规划</tag>
      </tags>
  </entry>
  <entry>
    <title>未来是星辰大海</title>
    <url>/%E6%9C%AA%E6%9D%A5%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7/</url>
    <content><![CDATA[<p>今天去签了三方，所以，我的大学生活也许真的要结束了。</p>
<span id="more"></span>
<h1 id="大学三年"><a href="#大学三年" class="headerlink" title="大学三年"></a>大学三年</h1><p>以前常听别人说，大学其实只有短短三年。开始我是不信的，现在却不得不信了。</p>
<h2 id="大四安排"><a href="#大四安排" class="headerlink" title="大四安排"></a>大四安排</h2><p>大四刚开始，金九银十。秋招开始了：</p>
<ul>
<li>大佬：一个offer接一个offer，择优录取</li>
<li>我：找了一个offer，得，还不错，签了吧</li>
</ul>
<p>没错，作为第一次面试就拿到了offer，还签了三方的我。确实是一个很容易满足的人，当然，这跟实力也有关系，我等渣滓不敢跟大佬比。。。</p>
<p>其实offer拿到有段时间了，到今天才去签。（中间那段时间把段位从黄金升到了铂金，再也没人说我是黄金狗了），当然，还干了点别的事情。</p>
<p>唉，本来想深沉一下，咋越写越欢脱。。。</p>
<p>后边的安排可能就是先把照学到手，不过最近改革了，估计很难成为老司机的一员了。然后去实习，春节前刚好结束（说不定还能参加下公司年会）。</p>
<p>学期末确定下毕设题目，然后开整。解决完了去旅个游，毕竟大学生优惠什么的不能浪费。。。</p>
<p>然后毕业照走一波，之后再去公司报到，咱也是社会人了。</p>
<h2 id="三年回首"><a href="#三年回首" class="headerlink" title="三年回首"></a>三年回首</h2><p>这个只能在心里默默吐槽了，不过怎么说呢，有句话是成长的过程就是越来越觉得以前的自己是个xx的过程。</p>
<p>嗯，我想了一想，说的还真对。</p>
<h2 id="那些让我后悔的事"><a href="#那些让我后悔的事" class="headerlink" title="那些让我后悔的事"></a>那些让我后悔的事</h2><blockquote>
<p>说实话，还真没啥。</p>
</blockquote>
<p>说自己没好好学习吧，那是我懒我认了。不过咱好歹还拿过奖学金不是~</p>
<p>说自己没挂过科把，谁说的，挂过一门。。。（说起来既拿过奖学金，又挂过科的，估计我也是独一份）</p>
<p>说没谈过恋爱吧，有那个时间我还不如去睡觉，省事省心还自由不是~</p>
<p>其实吧，哪有那么多后悔的事情。</p>
<p>人嘛，该干嘛的时候就得干嘛，每个时间段都有自己该做的事情。做完了你才有资格搞其它有的没的。结果是你自己没做，后来又说后悔，你说这不是耍流氓这是啥？</p>
<p>或许你觉得当时没有做好，但人的身心发展都是分阶段的，几年之后再回想之前做的事情，肯定觉得不对味呀。人要是一直钻这个牛角尖，那就没啥意思了。</p>
<h1 id="对未来的一点小小畅想"><a href="#对未来的一点小小畅想" class="headerlink" title="对未来的一点小小畅想"></a>对未来的一点小小畅想</h1><p>梦想还是要有的，万一实现了呢。</p>
<h2 id="想要坚持的"><a href="#想要坚持的" class="headerlink" title="想要坚持的"></a>想要坚持的</h2><ul>
<li>健身（身体最重要）</li>
<li>读书（腹有诗书气自华（老脸一红））</li>
<li>学习（行业特殊，为了不被淘汰掉，坚持学习真的很重要）</li>
<li>坚持给父母的全民K歌账号打call（真的超爱唱歌）</li>
</ul>
<p>除了最后一条，我还真不敢保证每天都做，毕竟谁都不是圣人。但是要尽量坚持下去。</p>
<h2 id="想要实现的"><a href="#想要实现的" class="headerlink" title="想要实现的"></a>想要实现的</h2><p>等我有钱了，要啥啥没有？┑(￣Д ￣)┍</p>
<h2 id="其它有的没的"><a href="#其它有的没的" class="headerlink" title="其它有的没的"></a>其它有的没的</h2><p>都在心里。</p>
<blockquote>
<p>好了，也该收收心了。看这个日子，上次发文都在一月前了。之后得给自己博客上点干货了。</p>
</blockquote>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>未来</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>测试矩阵</title>
    <url>/%E6%B5%8B%E8%AF%95%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>谈谈对各种测试方法做二维定位后形成的测试矩阵.</p>
<span id="more"></span>

<p>最近在ThoughtWorks的#TW洞见#栏目看到了<a href="http://insights.thoughtworks.cn/test-matrix/">测试矩阵</a>的概念和介绍，觉得很有意思。也让我在另一种层面上理解了各种测试方法。</p>
<h1 id="你晕了没"><a href="#你晕了没" class="headerlink" title="你晕了没"></a>你晕了没</h1><p>相信大家在初学测试的时候一定听过下列测试名词：单元测试、集成测试、性能测试、API测试、UI测试、压力测试、冒烟测试等等。诸如此类，不胜枚举。这么多的“测试”不知道你晕了没，反正博主开始是挺晕的。</p>
<p>此外，不同的人对这些测试的理解也不尽相同，比如“单元测试”，在Java中，有人说一个类就是一个单元，有人说一个方法就是一个单元，甚至有人说一个完整的API就是一个单元。一千个人眼里有一千种单元测试。。。</p>
<h1 id="测试矩阵"><a href="#测试矩阵" class="headerlink" title="测试矩阵"></a>测试矩阵</h1><blockquote>
<p>既然有这么多的测试方法，在实际的测试工作中，我们到底怎么测试呢。像上边说的，测试种类如此繁多，难于理解，所以在测试时也难以沟通。</p>
</blockquote>
<p>其实，我们可以从两个维度来理解这些测试方法，并将其应用到实际工作中。</p>
<p>其中，第一个维度就是测试实现的层次和粒度，说白了就是测哪。是方法，类，还是API？是应用、系统、还是整个平台？</p>
<p>而我们常说的性能测试，功能测试，安全测试等等，都可以归为第二个维度，即测试的目标，也就是测什么，咋测。</p>
<p>这两个维度结合起来就形成了下边的测试矩阵：</p>
<table>
<thead>
<tr>
<th align="left">测哪\咋测</th>
<th align="left">功能测试</th>
<th align="left">集成测试</th>
<th align="left">性能测试</th>
<th align="left">安全测试</th>
</tr>
</thead>
<tbody><tr>
<td align="left">端到端</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
</tr>
<tr>
<td align="left">API</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
</tr>
<tr>
<td align="left">类</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
</tr>
<tr>
<td align="left">方法</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
<td align="left">test</td>
</tr>
</tbody></table>
<p>有了这样的认识，以后进行测试工作时工作起来就方便多了。我们可以进行“方法级别的功能测试”、“API级别的性能测试”等等。这样，使测试内容变得更加清晰。</p>
<blockquote>
<p>事实上，，而常常忽略了第二个维度，即咋测。所以，根据测试矩阵进行测试，可以避免这种问题。在实际测试工作中，大多数情况下都进行的是功能测试</p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>爱你就像爱生命</title>
    <url>/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/</url>
    <content><![CDATA[<p>你要是愿意，我就永远爱你，你要是不愿意，我就永远相思。</p>
<span id="more"></span>

<p>王小波一直是我喜欢的作家之一，更令人惊讶的是，他竟然还是个程序员。</p>
<p>他的作品部部经典，引人深思。《爱你就像爱生命》是王小波写给妻子李银河的情书合集，非常动人，每看一遍都回味无穷。</p>
<hr>
<p>你要是喜欢了别人我会哭，但是还是喜欢你。</p>
<p>你是非常可爱的人，真应该遇到最好的人，我也真希望我就是。</p>
<p>我是爱你的，看见就爱上了，我爱你爱到不自私的地步，就像一个人手里一只鸽子飞走了，他从心里祝福那只鸽子的飞翔。你也飞吧，我会难过，也会高兴，到底会怎么样我也不知道。</p>
<p>不管我本人多么平庸，我总觉得我对你的爱很美。</p>
<p>我现在已经养成了一种习惯，就是每天要对你说几句不想对别人说的话。</p>
<p>有时候你难过了，这个时候我更爱你，只要你不拒绝我我就拥抱你，我会告诉你这是因为什么，就是我不知道是为了什么。</p>
<p>我爱你，这是我的命运。</p>
<p>我决不为了仪式爱你，我是正经爱你呢。我一正经起来，就觉得自己不坏，生活也真不坏。真的，也许不坏？我觉得信心就在这里。</p>
<p><strong>但愿我和你，是一支唱不完的歌。</strong></p>
<p>我真的是个好人，我对好多人怀有最深的感情，尤其是对你。我很想为别人做好事，尤其是对你，我真想把我做出的一切好事全献给你了。</p>
<p>我们是两个在宇宙里游荡的灵魂，我们不愿孤独，走到一起来，别人与我们无关。我把我的整个灵魂给你，连同它的怪癖耍小脾气，忽明忽暗，一千八百种坏毛病。它真讨厌，只有一点好，爱你。</p>
<p>只希望你和我好，互不猜忌，也互不称誉，安如平日，你和我说话像对自己说话一样，我和你说话也像对自己说话一样。</p>
<p>说吧，和我好吗？</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>王小波</tag>
      </tags>
  </entry>
  <entry>
    <title>递归求解1到100求和</title>
    <url>/%E9%80%92%E5%BD%92%E6%B1%82%E8%A7%A31%E5%88%B0100%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p>递归求解1到100的和是一个常见面试题。</p>
<span id="more"></span>

<p><strong>思想：</strong></p>
<p>思考一下，从1加到100可以分解成：</p>
<ul>
<li>1+（2加到100的和）</li>
<li>1+2+（3加到100的和）</li>
<li>1+2+3+（4加到100的和）</li>
<li>……</li>
</ul>
<p>怎么样，这样是不是有点递归的味道了？递归的出口就是1。</p>
<p>所以，可以编写如下代码：</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span> n + <span class="built_in">count</span>(n - <span class="number">1</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>这样，不仅可以求1到100的和，还可以求任意区间数字的和。只要改变递归出口和上限即可。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>十一旅行中的小插曲</title>
    <url>/%E8%AE%B0%E5%8D%81%E4%B8%80%E6%97%85%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8F%92%E6%9B%B2/</url>
    <content><![CDATA[<p>我人生中的这一部分，叫做冒傻气。</p>
<span id="more"></span>

<h2 id="动卧-x1f684"><a href="#动卧-x1f684" class="headerlink" title="动卧 🚄"></a>动卧 <span class="emoji" alias="bullettrain_side" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8">🚄</span></h2><p>按计划1号早上出发去苏州，高铁票。</p>
<p>6点起床去赶9点半的高铁。但交通拥堵还是没赶上车<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span> 。。。无奈只能改签当晚的动车卧铺，小一千块的车费。</p>
<p>于是国庆第一天，在高铁站看《闯关东》度过<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>。<br><img data-src="https://i.loli.net/2019/10/12/3saEzBhb7NOS1Xi.jpg" width="250" height="300" alt="看闯关东">(这样看图有助于治疗颈椎)</p>
<p>第一次坐卧铺，感觉挺新鲜。环境还不错。<br><img data-src="https://i.loli.net/2019/10/11/aZUYzu1rVdic5vG.jpg" width="250" height="300" alt="动卧"></p>
<p>刚开始只有我一个人，本来都快睡着了。后来上来了一对去南京的中年夫妇，然后。。。我就再也睡不着了。</p>
<p>记得是大妈先开始的，打呼声虽然有些大，但还能勉强眯会眼。睡在大妈上铺的大叔表示不服，亲自示范给我们啥叫震耳欲聋，振聋发聩<span class="emoji" alias="hear_no_evil" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8">🙉</span> 大妈不打呼了，因为她也被吵醒了，整个房间瞬间变成了大叔的主场。。。</p>
<p>睡在我上铺的兄弟也睡不着了，穿上外套出去了，我知道，他一定是想去静静。也或许他是想出去问问，能不能把之前另一个女生跟他交换的铺位换回来<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
<p>我觉得自己有义务提醒大叔控制下自己，于是起身敲大叔的床板，没醒。求救的眼神投向大妈，大妈顿时会意也起身，敲床板。大叔醒了。但显然大叔还没有完全清醒，嘟囔了两句家乡话。两人交谈了几句，大叔转身又睡了。</p>
<p>声音虽然小了下来，但我知道，这只是暴风雨前的宁静。睡在我上铺的兄弟回来了，不知他是否意识到房间里的声音小了很多<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>。</p>
<p>果然，不一会，打鼾声又开始了。不幸的是，我没有赶在这之前睡着。</p>
<p>南京站到了，大叔大妈终于下车了。但这时离苏州也只有不到一小时的车程，看来睡觉是不可能了。天将降大任于斯人也，必将苦其心志。苦就苦吧<span class="emoji" alias="confounded" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8">😖</span>。</p>
<p>5点20分，苏州到了，我也下车了。</p>
<h2 id="看电影-x1f3a5"><a href="#看电影-x1f3a5" class="headerlink" title="看电影 🎥"></a>看电影 <span class="emoji" alias="movie_camera" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8">🎥</span></h2><p>既然是国庆，那咱也该应个景。其他电影不说，《我和我的祖国》得看吧，电影虽说得两个多小时，但也安排上了。<br>然后，我眼睛就瞎了<span class="emoji" alias="see_no_evil" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8">🙈</span> </p>
<p>最不忍直视的是’白昼流星’这一篇，接宇航员和老大爷死的这两幕，简直尬到了极点。还我的陈飞宇小哥哥!!!<br><img data-src="https://i.loli.net/2019/10/14/KmAZaWJP5qYk19z.jpg" width="250" height="300" alt="白昼流星">(有多尬大家参考<a href="https://www.zhihu.com/question/348312976/answer/843634337">这篇回答</a>)</p>
<p>只能说电影想把剧情和祖国重大事件联系起来的初衷是好的，但联系不上，也不能强制联系啊。。。<br>槽点最少的一篇，当属’回归’篇了。朱一龙简直太帅了吧///<br><img data-src="https://i.loli.net/2019/10/14/5gD27LwOvRiGcl6.jpg" width="400" height="300" alt="回归"></p>
<p>至于《中国机长》，据说戴着<a href="https://www.zhihu.com/question/346282105/answer/841583568">3D眼镜可以看出4D效果</a>，也是槽点满满啊。所以说假期电影，不能盲目从众，爱护眼睛，从我做起。</p>
<h2 id="拙政园-x1f33f"><a href="#拙政园-x1f33f" class="headerlink" title="拙政园 🌿"></a>拙政园 <span class="emoji" alias="herb" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8">🌿</span></h2><p>到了苏州，拙政园是必定要去的，原计划到苏州的第二天去，但我低估了国庆节的客流量，只能预定第三天的票了。</p>
<p>于是，第三天早上十点半，和家人一起兴致勃勃的到了拙政园景区，还没到门口，我们就傻眼了。这哪是看景，这分明是看人嘛 <span class="emoji" alias="weary" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8">😩</span> 门口早就拍好了二百米的长队。但我有点疑惑，因为拙政园的门票，在网上是按入园时间段订票的，我预订了10点半到11点半的票。这才刚刚10点半，没道理有这么多人。跟保安小哥沟通后，我们得到了答案。</p>
<p>原来，网上所谓的‘入园时间’不过是个摆设。按照常理，如果预定的是9点半到10点半的入园票，那么10点半以后才来，票应该是作废的。然而并不是，只要预订了今天的票，今天内任何时间段都可以入园，大家都想早点去，在里面多呆点时间，当然会有这么多人了。我心里有点气愤，质问保安小哥那为什么要按时间段预定票？小哥只说他们只负责维持秩序，订票规则他也不清楚<span class="emoji" alias="flushed" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8">😳</span></p>
<p>尽管心里好气，但已经到了，总不能又折回去，所以只好从队伍的最后边开始排队。后面有人打电话投诉，火气很大。嗯，我很佛系了<span class="emoji" alias="expressionless" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8">😑</span></p>
<p>排队这件事，精髓不在于排在你前边的人变少，而在于排在你后边的人越来越多，这样心里就会有一种莫名的满足感。半小时后，终于排到了最前面，下一波就可以进去了。后面一个插队进来的北京大叔，说山东人素质不好，还插队，只能在心里默默鄙视一下，五十步笑百步，彼此彼此罢了。</p>
<p>终于入园了，然而此刻我已经完全没了游玩的心情，只想走马观花看一遍林子，然后就离开。然而现实连这个机会都不肯给我。入园之后，我才明白‘看人’这个词的含义。尽管园子已经足够大，但游玩的的人更多，进去之后完全没有下脚的地方。整个园林像极了一座围城，里面的人想出去，外边的人想进来。过了一会，竟然下起雨来，找了个满是人的亭子避了会雨，想着这么大的林子，古时候住在里面的人该多有钱。</p>
<p>转悠了一会，想去看看园林博物馆，于是跟着路标出去，越走越觉得不对劲。转悠出去才发现再也进不去了，博物馆呢？！完全没看着，我们就这样被忽悠出去了<span class="emoji" alias="neutral_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span> 这时候，天又下起了大雨，没有伞的我们就像一群逃兵一样，匆忙打了车逃离了这个[围城]，围城外，旅游大巴还在源源不断的向城里开去。</p>
<p>放一张[走马观花]的时候，拍的一张园林照。听解说员介绍(偷听别人的解说员说)，右侧的亭子是按照[神龙见首不见尾]的意境设计的：</p><center><img data-src="https://i.loli.net/2019/10/14/Wyamv3ucXGQ5ITA.jpg" width="550" height="400" alt="园林"></center><p></p>
<h2 id="商务座-x1f4ba"><a href="#商务座-x1f4ba" class="headerlink" title="商务座 💺"></a>商务座 <span class="emoji" alias="seat" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8">💺</span></h2><p>由于第一天折腾改签的时候，手滑把回程的高铁票给退了(我真是个天才<span class="emoji" alias="neutral_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span>)。所以只能订从上海回去的机票，从苏州去上海，还要买高铁票。</p>
<p>开始是没有订商务座的，买的二等座。反正也就坐20多分钟，不讲究。但为啥后来又成了商务座呢？</p>
<p>没错，我又没赶上高铁<span class="emoji" alias="broken_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8">💔</span> hummm, 或许苏州这个地方跟我的体质相冲。</p>
<p>事情是这样的，吸取了第一天的教训，这次时间很充裕。买了[苏州北站]去[上海虹桥]的高铁，但我却在苏州站取了票，进站的时候刷不进去了，问了旁边的服务人员，她瞟了我一眼，翻着白眼，视线看着前方说[这里是苏州火车站，高铁站是苏州北站]。我才明白搞错了<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>。。。来不及细细品味她鄙夷的表情。我又转地铁去北站，但时间已经来不及了。到了苏州北站，检了票进去(过期的票)。万幸一个半小时后，又有一趟高铁，但只有商务座了。没有任何迟疑买了票。本来想体验下商务接待区，但服务人员已经下班了，所以又坐在高铁站看《闯关东》。。。</p>
<p>嗯，我也觉得我当时可能智商不在线。</p>
<p>第一次坐商务座，服务很到位。送了瓶水，还送了盒月饼。座位也是电动调节的，很宽敞，没有拍照<span class="emoji" alias="see_no_evil" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8">🙈</span></p>
<h2 id="找酒店-x1f3e8"><a href="#找酒店-x1f3e8" class="headerlink" title="找酒店 🏨"></a>找酒店 <span class="emoji" alias="hotel" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8">🏨</span></h2><p>历经万难出了高铁站，因为早在机场旁边预订了汉庭，所以叫了辆滴滴开过去(3公里30块你敢信？）。本来以为今日份的suffer已经结束了，万万没想到老天爷又给我安排了一劫<span class="emoji" alias="worried" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8">😟</span></p>
<p>下车后，拿着行李箱，有点懵。因为四周并没有汉庭的牌子，往后边走了一会。发现了一家汉庭，心想肯定就是这家了，拉着行李箱我就过去了。到了前台，出示预订信息，接待的小姐姐对我说，我预订的不是这家，是另一家。我有点方<span class="emoji" alias="no_mouth" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8">😶</span>，这不是百度地图导航的吗？但还是拖着行李箱走了。</p>
<p>打了预订酒店电话，我描述了一下自己的位置，接电话的小哥说让我看见桥，往前走。5分钟后，果然又看见了一家汉庭。</p>
<p>进去之后，人还蛮多的，等了好久。到了柜台，我又出示了预订信息，前台小姐姐对我说，我预订的依然不是这家，是另一家。我真的快哭了<span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>。再次打电话过去，小哥也对我有点无语。叹了口气，说我走了相反的方向，让我顺着立交桥往下走，桥下就是。</p>
<p>挂了电话，我又拉着行李箱往回走。大晚上的，四下无人，强悍如我也不禁心里发虚。一边拿着手机假装打电话一边往桥下走。在桥下又看到了一家汉庭。进店之后，刚才打电话的小哥好像也认出了我，说没错，就是这家店。我终于找到了酒店<span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span><span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span><span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p>
<p>Checkin之后让小哥看下班车预订信息，之前已经预定好了最早的一班，想再次确认。小哥一脸狐疑的看着我，估计心里在想，像我这样脑子断线的人，应该不会想到要提前预订班车吧。当我指着预定表里说，[这行就是我]，小哥才相信。</p>
<p>后来我就明白了，不到1千米的距离，有三家汉庭。然后百度地图给我定位到了酒店停车场，就走错了。也是自己一时着急没看清楚。</p>
<h2 id="坐班车-x1f68c"><a href="#坐班车-x1f68c" class="headerlink" title="坐班车 🚌"></a>坐班车 <span class="emoji" alias="bus" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8">🚌</span></h2><p>晚上睡了5个小时，然后就起来了，没误班车我也觉着是个奇迹<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，估计是智商归位了吧。</p>
<p>在前台等了几分钟，车就来了。找了个比较舒服的坐，等着出发。然后，又一出小闹剧开始了。</p>
<p>在车上坐了会儿我就觉着不对，因为人有点多。按理说大家都是预订的，应该人数刚好才对。很显然，有些人没有预订也上车了。开始大家相安无事，没有拆穿。几分钟后，师傅上车了，发现人数不对，就说[没有预订的人下车坐下一班吧，这样超载的话车也开不了]。话毕，车内没人说话，也没人动作。气氛变得有些微妙。</p>
<p>僵持了几分钟，还是没人下车。但车上的人坐不住了，前边有个小哥说自己七点的航班，再不走就来不及了，希望大家互相理解，自觉下车。嗯，很合情合理。然而话毕，依旧没人动作。我也纳闷究竟什么人，脸皮能这么厚。环顾车内，发现一对中年夫妇，脸上表情不太自然。</p>
<p>车上发牢骚的人越来越多。有说自己赶不上航班的，有说为什么不能自觉下车的，好像每个人都有预订一样，互相指责，千姿百态。我心里也有点着急。师傅说[实在不行就拿预定表对信息，但这样被揪出来，大家面子上也不好看。]，然而还是没人下车。没办法，大家说那就拿表对吧。</p>
<p>师傅拿表过来了，那对中年夫妇终于坐不住了，嘴里辩驳了几句，下了车。随后，又有一些人下了车。大家都用鄙夷的眼神看着那些下车的人，好像这样能把他们看穿。车开了，透过车窗，我看到刚刚下车的那对夫妇就好像什么也没发生一样，有说有笑<span class="emoji" alias="neutral_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span></p>
<h2 id="结语-x1f33b"><a href="#结语-x1f33b" class="headerlink" title="结语 🌻"></a>结语 <span class="emoji" alias="sunflower" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8">🌻</span></h2><p>每个人在旅行的过程中，都会有或好或坏的经历。重要的是保持积极向上的心态，乐观看待一切Love&amp;Peace <span class="emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">❤</span></p>
<center><img data-src="https://i.loli.net/2019/10/15/c8bBHQYPEr6ZThd.jpg" width="300" height="300" alt="Love&amp;Peace"></center>]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>苏州</tag>
      </tags>
  </entry>
  <entry>
    <title>国庆成都三日游</title>
    <url>/ChengduTravel/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>今年因为疫情，基本没咋出去玩，就是去周边玩玩。国庆假期也不敢走得太远，想到还没去过成都，就和朋友一起去成都转了转，记录一下自己拍的照片和感想。虽然一共5天的旅程，但只有三天是全天都在玩，所以是三日游。</p>

</blockquote>

<h2 id="日期加花费"><a href="#日期加花费" class="headerlink" title="日期加花费"></a>日期加花费</h2><div class="note info"><p>出行日期： 10.1-10.5<br>出行方式： 没报团，自行<br>个人花费：往返车票263*2+住宿1272+餐饮门票456+交通出行288.7 = 2542.7<br>出发地： 西安<br>集合地： 成都</p>
</div>

<h2 id="Day-0-抵达成都"><a href="#Day-0-抵达成都" class="headerlink" title="Day 0: 抵达成都"></a>Day 0: 抵达成都</h2><p>10.1，下午5点10分，到达成都东站，想着预定的酒店在春熙路，离这里不远，所以打了车。<br>高铁站地形复杂，为了找到司机师傅，我颇费了些周折，折腾了好一会，终于在5点30分和司机师傅确认了眼神。<br>事实证明打车是个错误的决定，因为下午的春熙路堵到爆炸，原本半小时的路程愣是走了一个多小时才到。<br><img data-src="https://i.loli.net/2021/07/08/6XazxfnUhESuWFC.jpg" width="500" height="500" alt="当时的春熙路"><br>明明东站有地铁可以直达，我却选择了打车，好吧我就是懒得挤地铁<span class="emoji" alias="grimacing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8">😬</span>，但反而弄巧成拙。<br>就这样，下午6点半我终于到了酒店，收拾齐整后和朋友一起在春熙路转了转，找了家卖米线的小店吃了饭。<br>此时的春熙路华灯初上，人潮汹涌，热闹非凡，一派繁华都市景象：<br><img data-src="https://i.loli.net/2021/07/08/YZ8cwKrolyXxCR4.jpg" alt="春熙路"><br>太古里也在旁边，和春熙路一起形成了一条极为繁华的商业街：<br><img data-src="https://i.loli.net/2021/07/08/WunLft7Hi6IkJGO.jpg" alt="太古里"><br>一天的舟车劳顿，我们都有点累，简单逛了逛之后就回了酒店休息，准备明天的行程。</p>
<h2 id="Day-1-看熊猫-amp-网红点打卡-amp-采耳"><a href="#Day-1-看熊猫-amp-网红点打卡-amp-采耳" class="headerlink" title="Day 1: 看熊猫&amp;网红点打卡&amp;采耳"></a>Day 1: 看熊猫&amp;网红点打卡&amp;采耳</h2><h3 id="看熊猫"><a href="#看熊猫" class="headerlink" title="看熊猫"></a>看熊猫</h3><blockquote>
<p>门票：55元<br>交通：地铁+公交 1小时</p>
</blockquote>
<p>来成都，第一站就是看大熊猫啦，早上9点从春熙路地铁口出发，上午10点我们就到了「成都大熊猫繁育研究基地」。此时门口已经排满了人，国庆假期这里还是很热门的：<br><img data-src="https://i.loli.net/2021/07/08/5guURyQrqCnNdMI.jpg" width="350" height="500" alt="熊猫基地门口的人流"><br>门口有许多卖熊猫饰品和玩偶的小贩，我们也一人买了一个熊猫发箍，戴上更有看熊猫的氛围了。跟着人流进去，里面还是景区式的区域规划，进去好一段路都是类似于公园的布局，有树木、水池什么的：<br><img data-src="https://i.loli.net/2021/07/08/bG8HFlM16wWzEk9.jpg" alt="池上的花"><br>再进去植物更多，慢慢的可以看到熊猫的指示牌，还有充满节日气氛的装饰：<br><img data-src="https://i.loli.net/2021/07/08/3jFhQ7OuSfrpxqH.jpg" alt="人真的多"><br>整个基地供游人活动的区域很大，熊猫却很少，有一种我们不是来看熊猫，而是来找熊猫的感觉。这种情况下，游客中有人看到了熊猫就会很兴奋的指给大家看<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，后来跟着不同的指示牌，我们陆续看(zhao)到了不同形态的熊猫，还有红色的小熊猫(没拍照)：<br><img data-src="https://i.loli.net/2021/07/08/NECgVfckHrDR2A6.jpg" alt="躺着的熊猫"><br><img data-src="https://i.loli.net/2021/07/08/zkO5XH798bMYyso.jpg" alt="就是玩儿的熊猫"><br><img data-src="https://i.loli.net/2021/07/08/LOQBxnvRDrucXp4.jpg" width="350" height="500" alt="吃竹子的熊猫"><br>hummm…就挺无聊的。<br>唯一碰到有趣味的是看到两个熊猫打架，真的难得一见，没拍视频，但真的挺搞笑的。也没看到小熊猫，因为人太多，然后我们就走出了这个熊猫基地。<br>在外边歇了一会，讨论着下一个目的地，突然下起雨了，我们也匆忙离开了。</p>
<h3 id="网红打卡地"><a href="#网红打卡地" class="headerlink" title="网红打卡地"></a>网红打卡地</h3><h4 id="宽窄巷子"><a href="#宽窄巷子" class="headerlink" title="宽窄巷子"></a>宽窄巷子</h4><p>从熊猫基地离开后，我们坐公交去了离网红点「宽窄巷子」不远的一家火锅店吃饭，据朋友在成都上学的同学说，这也是一家网红店。到了之后雨渐渐小了，但吃饭的人也挺多，我们在外面的板凳上等了一会才进去。<br><img data-src="https://i.loli.net/2021/07/08/3P5vrZIJtpi7w1o.jpg" alt="火锅店"><br>吃完之后就走去不远的网红打卡地「宽窄巷子」，门口还是人挤人，有安保在门口搭了小帐篷，人们扫完健康码后从帐篷下的闸口进入。<br><img data-src="https://i.loli.net/2021/07/08/jzdFHKlhkW2xv5a.jpg" width="350" height="500" alt="窄巷子和后边络绎不绝的游客"><br>进入之后发现，这不还是传统的民俗商业街嘛，和西安的回民街、永兴坊一个样，卖的东西也是大同小异，看来来这里的人真的是纯粹为了打卡了。<br>不能免俗的买了一些小吃饮品，吃完之后又开始寻思下一个目的地。此时雨早已停了，但太阳也没出来，天只是阴着，偶有风吹过，不过夏末的天气这样是最舒适不过的了，总比毒日头好。<br>思索了一会，我们决定去武侯祠和锦里看看，离这里也不远，天气凉爽，我们扫了几辆共享单车就出发了，一路上清风拂面，也是自在。<br><img data-src="https://i.loli.net/2021/07/08/lzYqkDpotsMxNK6.jpg" alt="成都街头的建筑"></p>
<h4 id="锦里"><a href="#锦里" class="headerlink" title="锦里"></a>锦里</h4><p>下午四点，我们到达了武侯祠，发现武侯祠和锦里是连在一起的，是一个入口。武侯祠门票60元，锦里门票免费，天色渐晚，我们决定只去锦里看看。<br>进去之后首先映入眼帘的是刻着「锦里」两个字的石门：<br><img data-src="https://i.loli.net/2021/07/08/4lxp1XgYnaP796J.jpg" alt="锦里"><br>之后就是一些仿古的建筑：<br><img data-src="https://i.loli.net/2021/07/08/MQVp4nscbX3gB1P.jpg" alt="锦里的仿古建筑"><br>再进去，就是一条长长的街道，街道两侧都是商贩，然后我就明白了，这不还是一条民俗商业街嘛<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>，只是建筑风格比宽窄巷子更显古意而已。跟着人流转悠完了之后，我们决定回去春熙路。</p>
<h3 id="采耳"><a href="#采耳" class="headerlink" title="采耳"></a>采耳</h3><p>回到春熙路，昨天已经在这里转过了，而且折腾了一天，我们都有点累。这时H君提议我们去体验下成都的采耳，顺便做个马杀鸡，我深以为然，于是搜索附近的采耳店，去做了采耳，还做了背部和足部按摩，一天的疲惫立刻就舒缓了。<br>第一次做采耳的感觉很奇特，看着师傅拿出各种工具，一开始有点害怕，后来放松之后还挺舒服的，总之也是一种体验。</p>
<h2 id="Day-2-都江堰"><a href="#Day-2-都江堰" class="headerlink" title="Day 2: 都江堰"></a>Day 2: 都江堰</h2><h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><blockquote>
<p>门票：78元<br>交通 地铁(春熙路-犀浦) + 城际列车(犀浦-都江堰) </p>
</blockquote>
<p>前一天订票的时候，发现「犀浦-都江堰」已经没票了，于是只订了「犀浦-红光镇」一站路，后来再补票。犀浦车站设施陈旧，车站里人却很多，应该都是去都江堰的游客。<br>一路上看到有一个「郫县站」的站名，不知道是不是生产「郫县豆瓣酱」的地方，我做麻婆豆腐的时候老会用到这个酱，哈哈哈哈哈哈。<br><img data-src="https://i.loli.net/2021/07/08/NbGhpjs9MVkUiRw.jpg" alt="郫县站"></p>
<h3 id="到达"><a href="#到达" class="headerlink" title="到达"></a>到达</h3><p>到了都江堰，雨又下起来了，先是跟着人流走到了买景区大巴车票的地方，上车之后导游小姐姐就开始讲都江堰的历史由来之类，关于这个我来之前就已经百科过了，有了浅显的了解，下文摘自 <a href="https://www.baidu.com/link?url=XLGyZ1OsaR8POYphg9SnjLUxSPx7ZadjQOV0nA8F-YiLOhSZaqPJxkhmrmJsTawA30FM_RPZhzHje_wULpFvluXsy312TVxRswt8rK_qrF7HVK4eD94pUUIB-e8QVeuq&amp;wd=&amp;eqid=8612698700033a650000000360e7b8d4">百度百科</a> ：</p>
<div class="note primary"><p>都江堰是世界文化遗产，说白了就是一个大型「水利工程」。<br>始建于秦昭王末年，后由蜀郡太守 <strong>「李冰」</strong> 父子在前人基础上修建，工程主体由「分水鱼嘴」、「飞沙堰」、「宝瓶口」等部分组成，两千多年来一直发挥着防洪灌溉的作用，灌区面积近千万亩，使成都平原成为沃野千里的「天府之国」。<br>都江堰是全世界迄今为止，年代最久、唯一留存、而且仍在使用的宏大水利工程，古人的智慧到一直流传到现在，所以它是一种「文化遗产」。</p>
</div>

<p>讲完历史由来之后，按照通用的景区套路，她又给大家兜售景区门票、皮影戏门票、扶梯票之类。门票我已经提前网上买了，又说不坐扶梯得走俩小时才能到景区核心，所以我们决定再买一个扶梯票，可到了景区门口，又说因为下雨扶梯停运了，给我们退了票，所以我们只能自己走了。门口有不少卖伞的小贩，我们也打着伞，雨中游都江堰，也别有风味。<br><img data-src="https://i.loli.net/2021/07/09/sYaJfL6tAZgQ3BC.jpg" alt="都江堰风貌"></p>
<h3 id="都江堰风景区"><a href="#都江堰风景区" class="headerlink" title="都江堰风景区"></a>都江堰风景区</h3><p>由于都江堰是一种与水利工程有关的文化遗产，我们这些非相关专业的人来这里，完全就是门外汉，生生变成了「没文化的人」，所以我们只能看看景，然后结合景区介绍，尽力理解这个工程的伟大之处。<br>于是在专业人士眼里，都江堰是一个伟大的水利工程，在我们这些没文化的人眼里，都江堰就是一个适合打卡的风景区，我对自己的定位还是非常清晰的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<p>「都江堰风景区」有「伏龙观」、「二王庙」、「玉垒关」、「离堆公园」等游览地，跟着景区里的指示牌，我们也一一走过了这些地方。</p>
<p>首先就是 <a href="https://baike.baidu.com/item/%E4%BC%8F%E9%BE%99%E8%A7%82/985897">伏龙观</a> ，是纪念李冰的庙宇，里面供奉着李冰的塑像，传说李冰父子治水时曾制服岷江孽龙。<br>这个很好理解，古时为了纪念一些功德昭著的人，通用的做法就是把他们神化，把苦难妖魔化，然后立传立碑、建造庙宇，永世纪念传颂。这和现在的「都江堰风景区」有异曲同工之妙，不过现在人们的可没有古人虔诚，大多数人只是单纯为了打卡看风景而已，不知道古时去伏龙观祭拜要不要买「门票」。<br><img data-src="https://i.loli.net/2021/07/09/sTDkctgLS8iC6Zd.jpg" alt="伏龙观"></p>
<p>接下来是 <a href="https://baike.baidu.com/item/%E4%BA%8C%E7%8E%8B%E5%BA%99/514188">二王庙</a> ，顾名思义，又是一个纪念李冰父子的地方。不过这里就是单纯为了纪念，没有神话传说了。<br>还是摘自百度百科 ：庙内有李冰和其子二郎的塑像，石壁上嵌有李冰以及后人关于治水的格言，后殿右侧有画家张大千、徐悲鸿等人的碑刻。<br><img data-src="https://i.loli.net/2021/07/08/seSIlcihmCVrj2v.jpg" alt="二王庙内建筑"></p>
<p>然后是 <a href="https://baike.baidu.com/item/%E5%AE%89%E6%BE%9C%E7%B4%A2%E6%A1%A5/7083714">安澜索桥</a> ，位于二王庙前，横跨在岷江的内江和外江的分水处，是一所名播中外的古索桥。根据百度百科，这里也有一个传说，不过没有神人也没有妖魔，应该比较可信。<br><img data-src="https://i.loli.net/2021/07/09/yViCBRmb4sSQDaX.jpg" alt="安澜索桥"><br><img data-src="https://i.loli.net/2021/07/08/byRNifdplAs3GqZ.jpg" alt="索桥与后面的二王庙"></p>
<p>最后是 <a href="https://baike.baidu.com/item/%E9%83%BD%E6%B1%9F%E5%A0%B0%E9%B1%BC%E5%98%B4">都江堰鱼嘴</a> ，上文也提到过，这是都江堰工程三大主体之一，是一个修建在江心的分水堤坝，作用是把汹涌的岷江分隔成外江和内江，外江排洪，内江引水灌溉。当时我们就站在下图前边的圆形看台上，看着下边的鱼嘴和远处的内江和外江：<br><img data-src="https://i.loli.net/2021/07/09/cAVJXLiBZIhP8uS.jpg" alt="鱼嘴看台百科图"><br><img data-src="https://i.loli.net/2021/07/09/1wzdpuBIHVvKn8h.jpg" alt="都江堰鱼嘴和远处的内外江"></p>
<p>看完鱼嘴后，这里已经是景区最深处了，我们也走了好长的路，脚都酸了，在看台周围坐了一会，我们就开始返程。<br>返程中还参观了都江堰工程的详细介绍图纸(似懂非懂)，也看到了一些竹笼装卵石的模型，这些模型就是用来堆筑都江堰三大主体之一「飞沙堰」的。<br><img data-src="https://i.loli.net/2021/07/09/G2EFTMZXuitkKrU.jpg" alt="都江堰随处可见的竹笼装卵石模型"></p>
<p>景区内有餐厅，人很多，价格当然也很贵，但还是得吃呀。之后我们又在都江堰游玩了很久，在景区里的公园转了转，喂喂鲤鱼什么的，景区里很大，我们一直转到下午4点多才开始返程。</p>
<h3 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h3><p>坐上景区门口的公交，到了都江堰站坐城际列车，买票的时候「都江堰-犀浦」还是没票，所以只订了「都江堰-郫县」二站路，想着后来再补票。<br>然而，车上一直没有工作人员来查票补票，我们就想着到了犀浦再去窗口补票。结果到了犀浦站，我们没有找到可以补票的窗口，出站口也是简单用围栏做的人工通道，根本没人查票，就这样发生了我人生中第一次「被动逃票」。。。<br>随后我们从犀浦坐地铁回到了春熙路，此时已是晚上7点多，春熙路已是人声鼎沸，在朋友的朋友推荐下去周围的商场吃了串串，然后结束了一天的旅程。</p>
<h2 id="Day-3-杜甫草堂-amp-人民公园-amp-小酒馆"><a href="#Day-3-杜甫草堂-amp-人民公园-amp-小酒馆" class="headerlink" title="Day 3: 杜甫草堂&amp;人民公园&amp;小酒馆"></a>Day 3: 杜甫草堂&amp;人民公园&amp;小酒馆</h2><p>昨天旅程结束后，并没有想好今天要去哪，所以搜了下成都其他的热门景点和打卡地，还准备在成都街头随便逛逛。</p>
<h3 id="杜甫草堂"><a href="#杜甫草堂" class="headerlink" title="杜甫草堂"></a>杜甫草堂</h3><p>一个人去的，因为朋友。。。起不来。<br>杜甫草堂在热门景点之列，所以想去转转，顺便沾染点文艺气息。<br>起床搜索好路线，决定坐公交去，因为前几天都是坐地铁，还没在成都坐过公交，想体验一下。<br>作为热门景点，草堂门口人也很多：<br><img data-src="https://i.loli.net/2021/07/09/gQkM6zyrVaCvG1c.jpg" alt="杜甫草堂"></p>
<div class="note primary"><p><a href="https://baike.baidu.com/item/%E6%9D%9C%E7%94%AB%E8%8D%89%E5%A0%82/6012?fr=aladdin">杜甫草堂</a> 是中国唐代大诗人杜甫流寓成都时的故居，先后在此居住近四年，创作诗歌240余首。唐末诗人韦庄寻得草堂遗址，重结茅屋，使之得以保存，宋元明清历代都有修葺扩建，被誉为「中国文学史上的一块圣地」。</p>
</div>
<p>我对杜甫的了解仅限于小时候背的诗，所以买了导游语音包，边听边走过每一个景点：<br><img data-src="https://i.loli.net/2021/07/09/tuACqUsKXne9DaV.jpg" width="250" height="500" alt="杜甫草堂景点详解"><br>少陵碑亭是杜甫草堂最具代表性的建筑之一，它是一座以茅草作顶的亭子，内树有一石碑，镌刻“少陵草堂”四个大字，笔力浑厚，笔姿秀润，是果亲王允礼所书(《甄嬛传》里的十七爷！！！)。雍正十二年（公元1734年）果亲王送达赖进藏，经过成都，特拜谒草堂，留下此手迹。此景点是杜甫草堂最具代表性的景点之一，人们常常将其作为茅屋的象征：<br><img data-src="https://i.loli.net/2021/07/09/NCXYywEV4m8Qg1P.jpg" alt="少陵草堂"><br>「八月秋高风怒号，卷我屋上三重茅。」，杜甫草堂依据杜诗《茅屋为秋风所破歌》描写和明代格局于1997年恢复重建了“茅屋景区”，重现了诗人故居的田园风貌，营造出浓厚的诗意氛围：<br><img data-src="https://i.loli.net/2021/07/09/fc5OzWICHPidaR6.jpg" alt="茅屋"><br>盆景园里的盆景，这里还悬挂了很多诗歌石刻：<br><img data-src="https://i.loli.net/2021/07/09/bws7JzVHnEa8xCe.jpg" alt="盆景"><br>其他景点没拍照，不过这里诗歌文化氛围确实很浓厚。</p>
<h3 id="人民公园"><a href="#人民公园" class="headerlink" title="人民公园"></a>人民公园</h3><p>中午又坐公交和朋友一起去成都人民公园转了转，在这里划了船，还玩了碰碰车<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>，国庆期间公园人也很多，划船的时候等了好一阵。<br><img data-src="https://i.loli.net/2021/07/09/yPibaHFBwZoWLcl.jpg" width="350" height="500" alt="公园里的石碑"></p>
<h3 id="小酒馆"><a href="#小酒馆" class="headerlink" title="小酒馆"></a>小酒馆</h3><p>赵雷的成都唱火了玉林路和小酒馆，我们也慕名过来打卡：<br><img data-src="https://i.loli.net/2021/07/09/JC61BK4WNmxfcF5.jpg" alt="玉林路"><br>沿着路边往前走，天色渐黑，人群也越来越密集，然后就走到了酒吧一条街，找到了传说中的小酒馆：<br><img data-src="https://i.loli.net/2021/07/09/CRTVHAvZ6IFxcls.jpg" alt="小酒馆"><br>酒馆门口满是来打卡的游客，外边还有很多排队等待进去的客人，我们无意进去，所以只在门口看了看就走了。<br>除了酒吧，这里还有很多卖东西的摊贩，和朋友随便转了转，逐渐意兴阑珊，肚子也饿了，往前走走找了家卖盖浇饭的连锁店，吃完就返程了。</p>
<h2 id="Day-4-再见成都"><a href="#Day-4-再见成都" class="headerlink" title="Day 4: 再见成都"></a>Day 4: 再见成都</h2><p>成都之行很快就结束了，逛了3天发现成都跟西安差不多<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，早上收拾行装后坐地铁去高铁站，很快就到了。回家后迫不及待的点了炸鸡，开着我的投影仪看电影，还是家里最舒服啊。<br><img data-src="https://i.loli.net/2021/07/11/tJKlMzWIk94HYyN.jpg"></p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>博客Pages服务升级</title>
    <url>/PageServiceUpdate/</url>
    <content><![CDATA[<img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1graz9zi8goj61qm15oah202.jpg">

<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>首先我的博客是同时部署在GithubPages和CodingPages上的，GithubPages提供国外访问，CodingPages加速国内访问。两个服务都加了我的自定义域名 <mark class="label info">jmyblog.top</mark>，且都开启了Https。</p>
<p>两个服务给我的自定义域名申请的Https证书都是由国外的Let’s Encrypt机构签发，一般这个证书有效期只有三个月。由于我的域名解析设置，在证书快到期时，GithubPages可以帮我自动续申请证书，而CodingPages却不能，这就导致证书到期后在国内不能通过Https的方式访问我的博客，所以每次证书快到期时，我都要登录CodingPages <a href="https://jmyblog.top/HttpsUpdate/">手动续申证书</a>。</p>
<p>去年的时候，CodingPages服务就一直给我发短信说是升级啥的，但我没有关注，我一直是个破罐子破摔的人，只要它没有停服，博客还能访问就懒的升级。<br>直到有一天我打开博客的时候出现异常，有时是直接访问不了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjgogovj624u10stbw02.jpg" alt="1622540423142.jpg"><br>有时是一些报错，好像是https证书过期之类：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjzp6g2j61xo1g8n5f02.jpg" alt="1622540733603.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazkajnejj61ww15ywjr02.jpg" alt="1622540555676.jpg"><br>所以想先手动更新一波证书，然而登录Coding之后发现并不是证书的问题，而是CodingPage旧版直接停服了，必须更新才行：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazp0008pj62l20wuk0u02.jpg" alt="1622532281585.jpg"><br>于是新的一波折腾又开始了，为了以后温故知新，我把折腾过程全程截图保存了下来，就有了这篇博客。</p>
<h2 id="CodingPages升级腾讯云服务"><a href="#CodingPages升级腾讯云服务" class="headerlink" title="CodingPages升级腾讯云服务"></a>CodingPages升级腾讯云服务</h2><h3 id="绑定腾讯云账号"><a href="#绑定腾讯云账号" class="headerlink" title="绑定腾讯云账号"></a>绑定腾讯云账号</h3><p>先按照升级提示绑定腾讯云账号，看来腾讯是和Coding有某种关系了(后来搜了下好像是CodingPages被腾讯收购了，以后底层全用腾讯云服务，Coding这边只是一个UI的壳子)，总之不管他们啥关系，先升级再说，账号绑定完成后又开启了新的关卡：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grb00pbdghj62e80wkq9s02.jpg" alt="1622538814928.jpg"><br>然后按照指示一顿操作，终于可以使用新版Coding Pages了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyc2uyn8j62g812ijz702.jpg" alt="1622539615813.jpg"></p>
<h3 id="旧版网站升级"><a href="#旧版网站升级" class="headerlink" title="旧版网站升级"></a>旧版网站升级</h3><p>由于我是要升级之前的网站，所以进入旧版网站列表，找到之前的静态网站，在右上角看到了「升级至新版」的入口：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydne1euj62780kstcx02.jpg" alt="1622539639577.jpg"><br>于是果断进入，选择相应的网站类型，最开始我选择了自己使用的Hexo，后来部署报错了，是因为我并没有把Hexo的配置文件上传到仓库(因为里面有许多我自己使用的插件私钥和密码，不能上传到public的仓库中)。所以后来又选择了静态网站，才部署成功：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyez5zm5j60qw0lhabu02.jpg" alt="1622539686983.jpg"><br>之后又按照提示，去阿里云更改域名的CNAME设置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd41p2dwuj61ac0g840o02.jpg" alt="1623303229231.jpg"><br>完成设置后(顺便改了下网站名字)，新版的网站就开始部署了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcygr10k3j61bs0mewha02.jpg" alt="1622539996713.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyh19l0uj613r07y74z02.jpg" alt="1622540194028.jpg"><br>部署成功后，看到基本信息，有两个网站地址，一个是我的自定义域名，一个是CodingPages提供的访问域名：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd4c4r47uj625210cq8e02.jpg" alt="1623303831826.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyhzt9osj624w0pudm002.jpg" alt="1622540298235.jpg"></p>
<h3 id="申请腾讯云证书"><a href="#申请腾讯云证书" class="headerlink" title="申请腾讯云证书"></a>申请腾讯云证书</h3><p>切换到自定义域名页面，发现Https证书还在审核中：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyk7l6l7j61620f2jtx02.jpg" alt="1622541431872.jpg"><br>点击「审核中」，就跳转到了腾讯云页面，新的关卡又增加了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcykxfwymj61ag0ic0v902.jpg" alt="1622541560047.jpg"><br>所以根据提示步骤申请证书，进行域名验证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyl51q8ej61610j0n0502.jpg" alt="1622541615687.jpg"><br>去阿里云添加一条TXT的记录进行验证(证书申请成功后就可以删掉这条验证了)：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyloweifj61040kuwg902.jpg" alt="1622541722382.jpg"><br>验证成功后，到了使用证书这一步，不过我们的证书其实已经签发成功了，并不需要自己手动安装，所以忽略掉后边的步骤：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcym15hk2j610y0p076f02.jpg" alt="1622541808007.jpg"><br>等到第二天再打开Coding页面，发现域名的证书审核已经通过了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcymo4m6lj61620fsdid02.jpg" alt="1622614304295.jpg"><br>之后再访问博客，可以看到证书已经更新了，到期日为明年6/1:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p>
<h3 id="探索腾讯云"><a href="#探索腾讯云" class="headerlink" title="探索腾讯云"></a>探索腾讯云</h3><p>在腾讯云工作台可以看到证书详情，可以看到它同时帮我们开启了www的subdomain访问方式：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6tw6dw3j60ni0kuwfn02.jpg" alt="1623308612737.jpg"><br>也可以进行管理:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6ueay7lj62ke0l0n2i02.jpg" alt="1623308652667.jpg"><br>域名管理：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>然而，世上没有免费的午餐，腾讯云的服务是要收费的，就在我刚开通一天后，它就给我发了欠费的信息：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd741nv9bj60bl0mwwgr02.jpg" height="400" width="200"><br>虽然不贵，但比起之前免费的CodingPages服务，还是有些差距。而且这里的证书期限是一年，一年以后又不知道有啥幺蛾子，先这样吧，就这样破罐子破摔的凑合着用，我已经充值了10块钱，看它能花多少。</p>
<h2 id="GithubPages问题解决"><a href="#GithubPages问题解决" class="headerlink" title="GithubPages问题解决"></a>GithubPages问题解决</h2><p>到这里，CodingPages的升级已经完成了，然而我的博客还部署在了GithubPages，所以要再看看GithubPages的服务是否正常。不看不知道，一看吓一跳，果然有问题 <mark class="label warning">Domain's DNS record could not be retrieved...</mark>：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydajfznj61mk17oqba02.jpg" alt="1622539358158.jpg"><br>说我的DNS配置不对，要加CNAME。但是我有CNAME呀，不知道为啥有这个报错，于是为了解决这个报错，我开始了漫长的旅途。</p>
<h3 id="百度-amp-Google"><a href="#百度-amp-Google" class="headerlink" title="百度&amp;Google"></a>百度&amp;Google</h3><p>首先，是在百度和谷歌寻找解决方案，找到了几种方案：<br><span id="inline-toc">1.</span> <a href="https://www.sawlove.com/github-custom-domain-use-https.html">重新绑定域名</a>：是说先把域名remove，然后再重新添加，但是没有解决我的问题。<br><span id="inline-toc">2.</span> 加上www域名前缀：是说在代码库的CNAME文件里给域名加上www前缀，然后在域名解析里也加上www，最后绑定www前缀的域名。但还是没有解决我的问题。<br><span id="inline-toc">3.</span> 让Github自己添加CNAME文件：是说绑定域名后Github会自动在代码库里加上CNAME文件，所以要先把CNAME文件删掉，再重新绑定域名等Github添加文件，然而我照做之后发现Github并没有自动给我添加CNAME文件，所以依然没有解决我的问题。</p>
<p>总之，折腾了半天，问题还是没有解决，瞧把我给折腾的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd8vxs7z9j60qs1ac0wv02.jpg" height="600" width="350"><br>而且遇到了更多的报错，比如<mark class="label danger">Domain does not resolve to the GitHub Pages server... ：</mark><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vkp1gaj61lu0lg43f02.jpg" alt="1622785367590.jpg"><br>再比如：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30evnlej61mc0fqadr02.jpg" alt="1623129057591.jpg"></p>
<p>真的累了，甚至想着就用github.io访问好了，GithubPages就不绑定域名了吧：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2tkvgn8j626o0gw78b02.jpg" alt="1622712116380.jpg"></p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>想归想，问题还是要解决的。<br>既然网上的办法解决不了，就乖乖去看官方文档吧，于是直接点击报错信息里的learn more，打开官方文档，开始通读全文：<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a><br>文档里提供了两种自定义域名的绑定配置方法，一种是subdomian，比如 <a href="http://www.example.com/">www.example.com</a> 或者 blog.example.com 这样的，显然我不是这种类型；另一种是apex domain，比如example.com这种的，那可不就是我的域名类型嘛，好，找到方向了。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="配置apex-domain"><a href="#配置apex-domain" class="headerlink" title="配置apex domain"></a>配置apex domain</h4><p>然后就按照文档里描述的apex domain的配置方法开始操作，直接跳到第五步：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda1c6edtj61bk0iatcw02.jpg" alt="1623315661401.jpg"><br>说让我添加A记录指向GithubPages提供的这些IP地址，好嘛，安排！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda3xez8lj61qg0a8jte02.jpg" alt="1623315810471.jpg"><br>然后又让我用命令验证配置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda6byoyhj61920h8gp102.jpg" alt="1623315955716.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/pmkCEzlanyQBiD5.png" alt="image.png"><br>接着让我加CNAME文件到我的代码库里：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdae57e55j618s05cgne02.jpg" alt="1623316383313.jpg"><br>这个本来就有，最后是可选项，开启强制Https，也打开了，但据说要等24小时：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdaihv34jj61a60d041302.jpg" alt="1623316394352.jpg"><br>好，所有的配置都没毛病，可以添加域名了，那你倒是说说，为毛这个错它还在？！！！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vvzu3nj62am18agvy02.jpg" alt="1622786325436.jpg"><br>唉，心态崩了。<br>后来问题解决之后，冷静下来想想，此时报错可能有两个原因，一个是我没等够24小时，等够时间后check again应该就没错了；或者我不开启https应该也不会有错，但我还是想有https的，所以没有采取这种做法。<br>但是，我的关注点在这个报错，为毛我绑定的是没有www的域名，报错里却有www的subdomain?<br>好吧，接着看官方文档。</p>
<h4 id="配置www-subdomain"><a href="#配置www-subdomain" class="headerlink" title="配置www subdomain"></a>配置www subdomain</h4><p>官方文档上说，如果用的是apex domain，推荐再给它配置www subdomain，好吧，就按你推荐的来：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb5pbocfj61a406stap02.jpg" alt="1623317938517.jpg"><br>上边还说，给apex domain配置www submain的前提是你已经按照上边的方法配置好了apex domain，虽然我的报错还在，但我认为自己还是配置好了apex domain的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb6kmrwgj619q05gjt502.jpg" alt="1623317950652.jpg"><br>所以按它说的接着来，第一步，域名解析里添加一个www的CNAME记录，指向 xxx.github.io：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb79fv7hj619y0as42e02.jpg" alt="1623317969868.jpg"><br>安排：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbb8h8q7j624805kt9v02.jpg" alt="1623318311090.jpg"><br>接着把代码库里的CNAME文件也加上www：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbct4avzj62640n042t02.jpg" alt="1623318380827.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbcyyp7nj624y0me42v02.jpg" alt="1623318402390.jpg"><br>第二步，命令验证配置是否正确：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb7f8we4j61ac0dgad002.jpg" alt="1623317982442.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/LeoMy5p6SKGX71O.png" alt="image.png"><br>到这里，配置就已经结束了，激动人心的时候到来了，绑定我的www域名，竟然。。。。。成功了！！！！！小绿勾也打上了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30nk1faj60s40ku77202.jpg" alt="1623130387731.jpg"><br>而且也开启了Https，由于我配置www subdomain是在配置apex domain 24小时之后，此时是已经等够24小时的，所以可以开启Https没有报错。<br>血的教训告诉我们，官方文档是真的有用。所以遇到问题，还是先看看人家让你看的官方文档，然后再搜其他的办法。</p>
<h2 id="为啥要用CodingPages"><a href="#为啥要用CodingPages" class="headerlink" title="为啥要用CodingPages"></a>为啥要用CodingPages</h2><h3 id="CodingPages在哪"><a href="#CodingPages在哪" class="headerlink" title="CodingPages在哪"></a>CodingPages在哪</h3><p>配置好了GithubPages，目前我的个人域名DNS设置是：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3eg62esj61620gkadb02.jpg" alt="1623301889628.jpg"><br>通过命令再次验证DNS设置：<br><img data-src="https://i.loli.net/2021/06/11/JXKaRVnq3iC7GkQ.png" alt="image.png"><br>有没有发现什么问题？<br>是呀，CodingPages的作用在哪呢？验证到的DNS设置只指向了GithubPages服务，而且无论是访问 <a href="https://jmyblog.top/">https://jmyblog.top</a> 还是 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ，显示的Https证书都是Let’s Encrypt签发的：<br><img data-src="https://i.loli.net/2021/06/11/k4UF5refWqgYNCz.png" alt="image.png"></p>
<h3 id="CodingPages部署节点"><a href="#CodingPages部署节点" class="headerlink" title="CodingPages部署节点"></a>CodingPages部署节点</h3><p>然后再次探索CodingPages，发现它部署的节点是香港：<br><img data-src="https://i.loli.net/2021/06/11/8TQYjyKRqkbOnhw.png" alt="image.png"><br>想部署到其他节点还得备案才行：<br><img data-src="https://i.loli.net/2021/06/11/ltPUcyOdvebphfB.png" alt="image.png"><br>于是连接一个香港区域的VPN，然后再通过命令再次验证DNS设置，终于看到了指向CodingPages的信息和腾讯云签发的证书：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2xyjpa7j616409ejtt02.jpg" alt="1623054662478.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p>
<h3 id="腾讯云CDN加速"><a href="#腾讯云CDN加速" class="headerlink" title="腾讯云CDN加速"></a>腾讯云CDN加速</h3><p>登录腾讯云，发现它对站点的加速和服务区域都是境外：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>想切换加速区域还是得备案才行，而且还得另付国内加速的费用：<br><img data-src="https://i.loli.net/2021/06/11/6N8ZSgoWrUtIQcb.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/06/11/n5TdHZtcaL7Azs6.png" alt="image.png"></p>
<p>但是备案太麻烦了，而且就我这个小破站估计也没多少人看，孤芳自赏罢了，也不至于搞这么多服务。所以在已经有了GithubPages之外，我需要CodingPages的理由是什么呢？</p>
<h3 id="使用CodingPages的理由"><a href="#使用CodingPages的理由" class="headerlink" title="使用CodingPages的理由"></a>使用CodingPages的理由</h3><p>从前用CodingPages是想用它免费的国内加速服务，现在虽然不备案就不能加速了，但仔细想了想，虽然我不想备案，也不想开启高端的CDN加速服务，还是有一些理由让我使用它的：</p>
<p><span id="inline-toc">1.</span> 博客内容推送到百度，理由如下：</p>
<p><img data-src="https://i.loli.net/2021/06/11/6p5iyxc4XZrM9Yo.png" alt="image.png"></p>
<p><span id="inline-toc">2.</span> 一个备胎，为了保险起见，同时使用两个服务还是不错的，虽然它们的功能有一些重复。<br><span id="inline-toc">3.</span> 虽然目前只有国外加速服务，好歹能给国外的朋友提高访问体验啊，而且万一以后又想备案呢，留条后路总没错。<br><span id="inline-toc">4.</span> 虽然用它的理由的确乏善可陈，但是配都配好了，我上边折腾这么久也不能白折腾。</p>
<h2 id="站点验证"><a href="#站点验证" class="headerlink" title="站点验证"></a>站点验证</h2><p>到这里，博客配置就已经结束了，但还是要通过第三方工具验证博客的可访问性和速度。</p>
<h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><p>之前做了百度SEO优化，所以使用百度站长工具验证站点，首先是Https认证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2zj0qnrj61qk0s6ae502.jpg" alt="1623056320673.jpg"><br>没毛病，这Https是真的，再看看URL抓取：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3hl9bjdj626i0wa0zl02.jpg" alt="1623302070854.jpg"><br>也没毛病，看来百度可以收录我网站的URL，访问抓取都可以，放心了。</p>
<h3 id="Google收录"><a href="#Google收录" class="headerlink" title="Google收录"></a>Google收录</h3><p>也做过Google的SEO优化，所以使用Google站点工具，先连上站点验证所有权：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2u22ec8j62l418kqah02.jpg" alt="1622714334036.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2ugu9a6j62la12ewit02.jpg" alt="1622714361935.jpg"><br>然后再上传一次sitemap，确保Google可以抓取网站的URL:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3012an4j62co0sagq802.jpg" alt="1623122594184.jpg"><br>没毛病，看来也ok:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre98vekm5j61j20xcjyc02.jpg" alt="1623388402076.jpg"></p>
<h3 id="访问速度"><a href="#访问速度" class="headerlink" title="访问速度"></a>访问速度</h3><p>通过 <a href="http://tool.chinaz.com/speedtest/">这个网站</a> 可以检测博客的访问速度，在国内测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> ，国际测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> 和 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ， 结果都还不错：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9o9veadj61n41b411r02.jpg" alt="1623389603223.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9omgv7sj61ne0suwjw02.jpg" alt="1623389638753.jpg"><br><img data-src="https://i.loli.net/2021/06/11/jIZwMAUEbsK4VPa.png" alt="image.png"><br>本来只是想记录自己是咋升级，咋解决问题的，结果却写了这么多<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，可能有一些自己的思考吧。先这样凑合着用吧，这样折腾完了，至少以后不用三个月再手动申请证书了。</p>
]]></content>
      <categories>
        <category>维护小破站</category>
      </categories>
      <tags>
        <tag>GithubPages</tag>
        <tag>CodingPages</tag>
        <tag>腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title>难忘的TWU之旅</title>
    <url>/TWUJourney/</url>
    <content><![CDATA[<div class="note info"><p><strong>TWU</strong> 即 <a href="https://www.thoughtworks.com/cn/careers/graduates"><strong>ThoughtWorks University</strong></a>，是指ThoughtWorks新入职的应届毕业生，将会在 <a href="https://baike.baidu.com/item/%E6%B5%A6%E9%82%A3/8746603?fr=aladdin">印度浦那</a> 或者中国西安参加一个为期5周的员工培训，充分了解到ThoughtWorks的公司文化、宗旨和做事方式。</p>
</div>

<p><img data-src="https://i.loli.net/2021/07/18/pJrxDV5EqydmKUh.png" alt="ThoughtWorks University官网介绍"></p>
<h2 id="出发之前"><a href="#出发之前" class="headerlink" title="出发之前"></a>出发之前</h2><h3 id="西安-or-印度？"><a href="#西安-or-印度？" class="headerlink" title="西安 or 印度？"></a>西安 or 印度？</h3><p>毕业之前我就收到了要去TWU的通知，当时HR告诉我也可以先不参加，入职之后会陆续安排的。我想着早去晚去都要去，反正也还没上班，先培训一下挺好的。<br>于是选择参加的目的地，去印度还是呆在西安呢？虽说去哪都是全英文的教学和工作环境，但如果去印度，不仅要面对全英文的工作环境，还要面对全英文的生活环境，这对我来说挑战太大了，所以一开始我选择了西安。<br>后来HR又给我打电话，说去印度的人数不够，劝我再挑战一下自己，这也是一次出国旅行的机会，我觉得也有道理，最后还是决定去印度。</p>
<h3 id="行李箱准备"><a href="#行李箱准备" class="headerlink" title="行李箱准备"></a>行李箱准备</h3><p>第一次要在国外呆1个多月，要准备的东西是很多的，衣食住行各方面都得考虑。</p>
<p>首先提交资料给公司办理签证，申请的签证有效期是半年。<br>之后就开始准备行李箱，公司分享了很多去印度生活的小贴士，七八月份的印度浦那也是夏天，但没有西安这么热，所以衣物不必太费心准备了；然后就是食物方面，根据好多去过印度TWU的同事建议，那边的食物很可能不符合国人的胃口，所以最好多带一些自己喜欢的零食还有老干妈过去。</p>
<p>住所是公司提供的，出行也有公司的大巴接送，除了出去玩的费用自己承担外，这两项也不用操心。除此之外，还是有很多生活用品需要准备。<br>首先就是钱了，自己去银行换了200美元的外币，到了印度可以继续换卢比使用。为什么不直接换卢比？因为当时银行只能换美元，据说美元在那边也可以流通，再换卢比也行。然后又在淘宝上买了很多东西，比如印度上网卡、电源转换头之类。</p>
<p>所有的东西加起来，一个24寸的行李箱就搞定了，也不能什么都考虑到，其它的等到印度熟悉之后再购置也可以。</p>
<h2 id="入职-amp-出发"><a href="#入职-amp-出发" class="headerlink" title="入职 &amp; 出发"></a>入职 &amp; 出发</h2><h3 id="行程单"><a href="#行程单" class="headerlink" title="行程单"></a>行程单</h3><p>7.24号，去公司办理入职，领取电脑，由于新电脑还没有到，所以暂时领了旧电脑先用着。和一起去印度的小伙伴面了基，然后一块儿走入职流程。还签了公司的TWU培训协议，这次去印度培训一个月，各种费用加起来至少得4万，公司为了培训新员工成本也不低呀。<br>然后就拿到了行程单，大概是这样的：</p>
<img data-src="https://i.loli.net/2021/07/18/8WP2OFT6A13hGpY.jpg" width="400" height="400" alt="行程单">

<h3 id="去北京"><a href="#去北京" class="headerlink" title="去北京"></a>去北京</h3><p>入职第二天，先坐早上10点的高铁去北京，看到小伙伴们的行李才发现自己有多么克制。到了北京站已是下午3点，稍作休整后又打了企业滴滴去首都机场，一路上和司机师傅聊天，听他讲北京城的繁华也十分有趣。<br>机场值机托运后，我们遇到了同样去TWU的小伙伴，是从成都过来的。一顿寒暄后在机场吃了碗面，就往登机口走去。</p>
<p><img data-src="https://i.loli.net/2021/07/18/OUCGcbAnmdyrvgp.jpg" alt="北京首都机场"></p>
<p>飞机有点延误，晚上9点20，我们才登机。看着飞机外渐行渐远的城市灯光，对即将开启的旅程也越发期待起来。</p>
<img data-src="https://i.loli.net/2021/07/18/VHPOgxD31Es6hAc.jpg" width="350" height="500" alt="机窗外的城市灯光">

<h2 id="到达浦那"><a href="#到达浦那" class="headerlink" title="到达浦那"></a>到达浦那</h2><h3 id="入境登记"><a href="#入境登记" class="headerlink" title="入境登记"></a>入境登记</h3><p>航班虽然延误了，但却比预计时间提前半小时，在凌晨1点到达了德里机场，让我觉得有点玄幻。德里机场的佛手给我的印象很深刻：</p>
<p><img data-src="https://i.loli.net/2021/07/18/VXgGlZCLm5AUTic.png" alt="德里机场"><br>跟着人流走到机场入境登记口，做入境检查和登记，按照提示填写表格，拿上护照排队，窗口的印度小哥边对照我的表格和护照的照片，边上下打量我，感觉有点怪，不过最后他还是拿着印章在护照上按了戳。</p>
<h3 id="到达浦那-1"><a href="#到达浦那-1" class="headerlink" title="到达浦那"></a>到达浦那</h3><p>登记完成后，我们还要坐去浦那的飞机，因为环境太陌生，费了好大劲才办好了值机托运，还在登机口碰到了去TWU的外国朋友，口语经验匮乏的我嘴仿佛被锁死，只能简单say hi然后微笑致意，嗯，毕竟微笑是人类共同的语言嘛。<br>印度时间26日凌晨5点，我们登上了去浦那的飞机，第一次坐国外的飞机，感觉很奇特。</p>
<img data-src="https://i.loli.net/2021/07/18/xTeLE1dmBlbhSQW.jpg" width="500" height="500" alt="印度航空登机牌">

<p>飞机餐是印度咖喱和偏黄色的细长米饭，还有白色的糊状物，看着就容易让人产生不好的联想，我没忍心吃，只用面包和黄瓜垫了下肚子。</p>
<p><img data-src="https://i.loli.net/2021/07/19/aKALFXpze3Z17PC.jpg" alt="印度航空飞机餐"><br>上午7点，我们到了浦那机场，在行李转盘旁边的卫生间洗手，我第一次体验了被外国人围观的感觉。</p>
<h3 id="前往住所"><a href="#前往住所" class="headerlink" title="前往住所"></a>前往住所</h3><p>取完行李在机场出口看到了公司接机的牌子，然后被安排坐上去住所的面包车，看着窗外浦那街头的人和车，才有种到了印度的真实感。<br>早上8点多，我们到了住处，公司给TWU学员提供的住处规格相当于国内的宾馆，两栋楼，都是6层，一栋叫 <a href="https://www.agoda.com/fabhotel-stay-home-viman-nagar_2/hotel/pune-in.html?cid=-142">STAY@HOME</a>，一栋叫<a href="https://www.agoda.com/oyo-16625-home-from-home/hotel/pune-in.html?cid=-142">Home From Home</a>，距离大概50米，离浦那机场比较近。</p>
<p><img data-src="https://i.loli.net/2021/07/19/JVFep1C6OP4BRwI.png" alt="STAY@HOME"><br><img data-src="https://i.loli.net/2021/07/19/ctpze3hHkjiaDYl.png" alt="Home From Home"><br>我和一起来的小伙伴们最后入住了STAY@HOME，在一楼休息区歇了会，前台的服务人员给我们发了房间钥匙和一张印度手机卡，然后我们就去各自的房间收拾了。</p>
<p><img data-src="https://i.loli.net/2021/07/19/2ZT5uSxJFjhIDkR.png" alt="旅馆一楼休息区"><br><img data-src="https://i.loli.net/2021/07/19/GOl6tjMuWqyZIai.png" alt="旅馆前台"><br><img data-src="https://i.loli.net/2021/07/18/Ud5bC9EX8ySRmGY.jpg" alt="房间内部"><br>房间基本上是一人一间，有的大房间是两个人一起的。从25号早上出发开始，整整一天，我一直在路上奔波，终于可以睡会了。</p>
<h3 id="熟悉环境"><a href="#熟悉环境" class="headerlink" title="熟悉环境"></a>熟悉环境</h3><p>下午3点，在旅馆休息了五六个小时后，终于缓过劲了。小伙伴们也约着一起出去转转，熟悉下周围的生活环境。第二天是周五，工作日，所以晚上打开电脑，准备明天的培训，在印度的第一天就这样结束了。<br>接下来就是连续5周的培训生活，全程都是纯英文环境。就不按照时间线来详细描述了，分几个方面分别概述这五周的经历。</p>
<h2 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h2><h3 id="trainer-amp-trainee"><a href="#trainer-amp-trainee" class="headerlink" title="trainer &amp; trainee"></a>trainer &amp; trainee</h3><p>在TWU，培训的学员也叫做trainee，来自不同的国家和地区，比如中国、印度、巴西、英国、美国、新加坡等。每一位trainee都会分配一个trainer，一个trainer也会分配2-3个trainee。<br>trainer会定期与trainee进行 1:1 catch up，至少每周一次，跟进trainee在培训中的学习情况和感受，为trainee答疑解惑，是一个亦师亦友的角色，trainer还负责评估trainee在培训中的表现。<br>为了达到文化交流和口语练习(主要是针对中国学生)的目的，trainer和trainee一般来自不同的国家。我的trainer叫Daniel，就是个英国人。</p>
<h3 id="Session-amp-WorkShop"><a href="#Session-amp-WorkShop" class="headerlink" title="Session &amp; WorkShop"></a>Session &amp; WorkShop</h3><p>既然是员工培训，当然要参加各种培训课，讲师都是Trainer。<br>课程分为两种，一种是Session，就是光听讲师讲，也有互动和问答环节，比如敏捷开发相关的理论知识，还有TW的文化和工作方式，这种课程还经常有group talk环节，让我蹩脚的口语无处可藏；一种是WorkShop，大多偏技术类，得提前准备工具和环境，比如代码实践、自动化测试等等。<br>由于trainee的人数较多，所以随机分为A/B两组分别参加这些课程，课表都是一样的，只是讲师不同。</p>
<p><img data-src="https://i.loli.net/2021/07/19/uYNsIkfGz9DFcqW.jpg" alt="某次session剪影"><br><img data-src="https://i.loli.net/2021/07/19/P8Sd4H7QsDmrM3T.jpg" alt="讲需求理解一致重要性的课程_鸟是我画的哈哈哈"></p>
<p>这些培训课有的是需要全体trainee参加的，有的只需要对应角色参加，比如针对BA的需求拆分课、针对Dev的TDD开发课、针对QA的自动化测试和测试理论等等。也有针对BQA角色的故事卡AC编写课，针对QA&amp;Dev的单元测试Pair编写课等等，简直就是知识的海洋。<br>第二天的站会还会有Trainer来提问昨天session讲的内容，很多课程也有课后作业，为忙碌的培训生活添砖加瓦。</p>
<p><img data-src="https://i.loli.net/2021/07/20/imMa5JgQeClHdzV.jpg" alt="站会上的提问环节"></p>
<h3 id="模拟项目"><a href="#模拟项目" class="headerlink" title="模拟项目"></a>模拟项目</h3><p>后来，A/B两组的trainee又被各自分成不同的小组，每个组大概15人，相当于一个模拟的敏捷开发小组。在接下来的5周内，每个组都要开发完成一个相同的模拟软件项目，然后以小组为单位，进行每日站会、retro、showcase等敏捷会议。</p>
<p><img data-src="https://i.loli.net/2021/07/19/antQGkh6KdmCiA2.jpg" alt="组内站会"><br>小组里的学员角色也不一样，有UX/BA/QA/Dev等，一个完整的敏捷开发项目组这些角色都应该有，但因为是随机分配，角色也就没那么均衡了，我所在的小组挺幸运的，因为啥也不缺，每个角色都有。<br>每个小组还会被分配一个模拟的客户，就是PO(Product Owner)，然后邀请PO参加showcase，和PO比对澄清业务需求等等。PO大多是由trainer客串，也会邀请当地办公室的同事来扮演，我们小组的PO就是一个trainer。更巧的是，她正好是我的trainer-Daniel的女朋友，果然八卦无处不在。</p>
<p><img data-src="https://i.loli.net/2021/07/20/yFoilNcUGMIfg7m.jpg" alt="日常工作(后面的信封上是每个trainer/trainee的名字，用来收集反馈，培训结束后发给每个人)"><br><img data-src="https://i.loli.net/2021/07/19/MwhdEQe4bgUSpZc.jpg" alt="最后一次showcase"></p>
<h3 id="Lunch-amp-Learn"><a href="#Lunch-amp-Learn" class="headerlink" title="Lunch &amp; Learn"></a>Lunch &amp; Learn</h3><p>Lunch &amp; Learn是指午饭过后，由trainee来讲session，主题不限，自发报名。<br>我这个菜鸡只能听大佬们讲，印象最深的两个session，一个是如何根据用户习惯、利用用户心理学来设计产品页面，是个来自深圳的UX小姐姐讲的，看着人家口语流利、游刃有余的表现，我真的太佩服了。<br>另一个session是来自日本的小哥哥讲的，主题是Yasukuni Shrine (靖国神社): The Dark Side of Japan，是个敏感话题，所以印象深刻。这个小哥哥虽然来自日本，但他却不是日裔，是个混血儿，据说他从小在国际学校长大，之后也是在不同的国家上学，经历十分丰富，总之也是个大佬。<br>其它有关于Node.js的，也有讲Docker、Bash基础的，还有文化类的session。学员中真是藏龙卧虎啊，在一堆大佬面前生存的我不禁瑟瑟发抖。</p>
<h3 id="正装日"><a href="#正装日" class="headerlink" title="正装日"></a>正装日</h3><p>每周周二是TWU的正装日，所有的trainer &amp; trainee都需要穿正装。<br>那时的我还不懂什么是通勤风，就直接提前在淘宝上买了一身正装，结果穿上之后，活脱脱一个房产中介。后来去周围的商场买了一个稍微好看点的衬衫，但也没好到哪去，所以衣品真的很重要。</p>
<h3 id="Pecha-Kucha"><a href="#Pecha-Kucha" class="headerlink" title="Pecha Kucha"></a>Pecha Kucha</h3><div class="note info"><p>Pecha Kucha是TWU的一个演讲活动，每个trainee要在TWU培训的五周内，给大家分享一个主题，时间大概20分钟，主题内容不限。<br>相比于分组做项目、分组做调研，这个可就是孤军奋战了。要在全体trainee和trainer的目光注视下，做一个至少20分钟的全英文演讲，对刚毕业的我来说，真的是一个巨大的挑战。由于这个是每个trainee都要做，所以每天下班前都会有人分享，培训开始的时候会让大家自己选择分享的日期，选好了把写有自己名字的便利贴放在表格里。<br>我最终选择在第三周的周四做分享，也就是8.16，第二天刚好是七夕节，所以就想着干脆讲中国的节日好了，就这么草率的决定了。<br>刚开始看别的trainee分享，每个人都很棒，游刃有余，真的都是大佬。还有印象的几个分享是古筝、移动支付，有一个印度的小姐姐也分享了印度的传统节日，跟我的主题撞了，不过不慌。<br>由于我是懒癌晚期+重度拖延症患者，15号才真正开始准备演讲的PPT，可偏偏那天电脑就突然开始死机了，后来在网上找到一种强制开机的办法，但电脑还是时不时就自动关机，就这样在心惊胆战中准备好了PPT。</p>
<img data-src="https://i.loli.net/2021/07/20/RazVb2EMsYxZqX1.jpg" width="350" height="500" alt="电脑死机了>.<">
8.16很快就到了，白天培训的时候我还在想文案，调整PPT的排版。但无论怎么调整，都控制不住紧张的心跳，晚上还是硬着头皮演讲完了。刚开始讲的时候真的是蜜汁冷场，观众都一脸冷漠，搞得我更紧张了，眼神总是看着PPT，后期靠着提问环节的freestyle才找回了点场子。
按照讲session的惯例，结束后收集了大家的反馈，大多数都是说我缺少eye contact，没有面向观众，还有说我准备不充分的。但更多的小伙伴还是鼓励我，都是善良的人啊。其实自己心里很有逼数，我的演讲打6分不能再多了。</div>

<h3 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h3><p>Case Study是TWU期间的一个社会调研活动，随机分组进行，每组6-7个人。<br>调研的目的是让trainee从不同的角度来思考社会和经济公正，每个小组会了解到一个具体的社会问题，作为调研的主题，了解TW是如何看待并影响这个问题的，以及TW针对这个问题做了什么。最后把调研结论在第五周的小组演讲中分享给大家，这个演讲还会邀请公司在参与这方面工作的人来听，总之也是一个了解多元文化的机会。<br>我的小组有6个人，有来自中国、印度、巴西、日本的trainee，主题是 <strong>Inequality in India</strong>，调研印度社会的不平等现象，包括经济、宗教、种姓、医疗四个方面。<br>最令我震惊的就是种姓制度了，在培训的第三周，我们有一次和印度同事交流的机会，沟通过程中得知，在印度，低种姓的印度人根本没有机会从事那些体面的工作，只能得到打扫厕所之类的又脏又累的工作，还要遭受别人的唾弃和蔑视，真的很可怕。</p>
<p><img data-src="https://i.loli.net/2021/07/19/aFnGl7KZj2yLNdf.png" alt="PPT上关于种姓制度的一页"><br>培训第五周，我们做了演讲分享，6个人每人讲一个部分，这次的演讲我的表现还不错，至少比Pecha Kucha好多了，所以还是有进步的。</p>
<h3 id="NGO-Activity"><a href="#NGO-Activity" class="headerlink" title="NGO Activity"></a>NGO Activity</h3><p>第三周的周末，TWU举办了NGO活动，邀请一些贫困地区的小学生来公司，体验代码技术带来的便利。我们和小朋友一起玩游戏，教他们使用电脑。此外，还邀请了一些卖手工艺品的小摊贩来公司售卖，我买了很多纪念品。</p>
<img data-src="https://i.loli.net/2021/07/19/bXoBk4EK2jszepg.jpg" width="350" height="500" alt="和小朋友玩游戏的trainer">

<h3 id="Graduation-ceremony"><a href="#Graduation-ceremony" class="headerlink" title="Graduation ceremony"></a>Graduation ceremony</h3><p>5周的时间过的很快，8.31号，在离开浦那前的最后一个工作日，就是我们的Graduation Day了，在酒店里进行。<br>主持人先是让trainer们播放自己制作的小视频，是我们这5周经历的剪影；然后还有印度小姐姐跳舞表演节目，气氛很happy；最后就是每个小组分享，还是首先播放小组制作的小视频，里面是每个小组在这5周的经历，我们组的视频是UX做的。</p>
<p><img data-src="https://i.loli.net/2021/07/20/rBjG4qsic6RoEvZ.png" alt="视频剪影"><br>然后就是把这五周做的模拟项目进行公开showcase，我们组是我来演示，然后BA小姐姐介绍，但是，演示过程中竟然500了，这个意外让整个会场气氛更high了，好像大家都在等这个彩蛋，我们也是所有小组唯一 showcase 500 的，特别逗。<br>整个Graduation ceremony就这样在欢笑声中结束了，5周的学习生活也告一段落了，虽然整个过程大部分时间我都很自闭，但整体来说收获也是巨大的。</p>
<p><img data-src="https://i.loli.net/2021/07/19/NrTUfJ1OqVQYoX8.jpg" alt="trainer&amp;trainee大合照"></p>
<h2 id="饮食篇"><a href="#饮食篇" class="headerlink" title="饮食篇"></a>饮食篇</h2><h3 id="便利店"><a href="#便利店" class="headerlink" title="便利店"></a>便利店</h3><p>STAY@HOME 旅馆前边的路口旁，有一个小便利店，平时会在那买一些饮用水，因为旅馆的水不太敢喝。也会买一些巧克力、饼干、薯片之类的零食，讲道理只要不是咖喱味的，味道和国内也差不多。<br>本来以为在印度买东西便宜些，结果也和国内差不多，只是面值大一些，比如在国内买瓶矿泉水2块，在这买瓶水也是20卢比。</p>
<h3 id="公司餐厅"><a href="#公司餐厅" class="headerlink" title="公司餐厅"></a>公司餐厅</h3><p>TWU所在的浦那办公室，有一个员工餐厅，早上可以去后厨找服务员要个煎蛋。中午提供的餐食是自助餐，但咖喱太多总是吃不惯，而且也是糊状，颜色和形状也非常容易让人产生联想，每次我都挑没有咖喱的东西吃。<br>每次提到印度的食物，好多人都会说spicy，但他们的辣真的就只是味觉上的辣，吃了不会让人有再吃的欲望，不像国内的辣味，都是香辣，吃了还想吃。<br>此外，公司也提供了零食，比如巧克力饼干、薯片之类，还会定期提供印度的小吃给大家(虽然真的不太符合我的胃口)。</p>
<h3 id="住处餐厅"><a href="#住处餐厅" class="headerlink" title="住处餐厅"></a>住处餐厅</h3><p>虽然我们住在STAY@HOME，但住处的餐厅是在Home From Home的顶楼，厨师全是印度小哥。</p>
<p><img data-src="https://i.loli.net/2021/07/19/gAyodqkEvG38SjI.png" alt="Home From Home餐厅"><br>早上可以在这吃早餐，晚上下班回来也可以在这吃饭，餐厅的账单每周一结算。我个人比较常吃的是鸡肉面条和煎蛋卷，有时候也有小伙伴叫外卖买披萨，我也可以蹭一波，除了刚开始的几天，后来这里就很少看到国外小伙伴的身影了，基本上都去外边吃了。</p>
<p><img data-src="https://i.loli.net/2021/07/19/iATXRQPJHhlM3wK.jpg" alt="在餐厅吃饭的小伙伴们"><br>某次空盘行动，两个吃货的盛宴：老干妈+Egg Sandwich+Chicken noodle+2 omelet+fried chicken，右边是我经常吃的Chicken noodle，配上老干妈还不错的。</p>
<p><img data-src="https://i.loli.net/2021/07/20/aCTmZ9cKnXkNO26.jpg" alt="空盘行动"></p>
<h3 id="出去吃"><a href="#出去吃" class="headerlink" title="出去吃"></a>出去吃</h3><p>住所前边的路口左转200米，有一家西餐厅，忘记名字了，有自助餐也可以点单。刚来印度的时候就发现了这家宝藏餐厅，之后就经常来这里吃，一顿差不多20-40。餐厅的服务很赞，甚至有时候我在吃饭，服务员就站在我旁边，看着我吃，主动帮我加水加米饭，到最后我说了不需要他才走开，和国内同等级的餐厅服务相比，差别巨大。<br>从住处往外走2公里左右，有个商场，叫Phoenix Marketcity，规格和万达广场差不多，里面有很多餐厅，还有肯德基，都可以去吃。<br>此外，TWU也组织了好几次聚餐，可以好好吃一顿。</p>
<img data-src="https://i.loli.net/2021/07/19/lF6BD1x52IPSRK4.jpg" width="450" height="800" alt="外面的美食">

<h3 id="自给自足"><a href="#自给自足" class="headerlink" title="自给自足"></a>自给自足</h3><p>时间长了，难免想念国内的美食，有小伙伴自带了螺蛳粉，我经常去蹭吃，第一次吃这个然后就被种草了，感觉人家带的螺蛳粉大部分都被我吃掉了，但这个是真的救命啊。<br>火锅是有几次和成都的小伙伴们一起吃的，锅底也是他们提供的，正好有两个小电锅，所以奇迹般地吃上了鸳鸯锅。食材是在 Phoenix Marketcity 里的超市买的，我在超市里发现了一种叫 Chinese Noodle 的速食面条，下在锅里竟然特别好吃，获得了大家的一致好评。</p>
<p><img data-src="https://i.loli.net/2021/07/19/FGuqYzRQkAJwpIt.jpg" alt="螺蛳粉和火锅"></p>
<h3 id="叫外卖"><a href="#叫外卖" class="headerlink" title="叫外卖"></a>叫外卖</h3><p>在印度也可以叫外卖，不过我没有尝试过，据说是用 <a href="https://baike.baidu.com/item/Zomato/19499991?fr=aladdin">Zomato</a> 这个软件点的。</p>
<h2 id="娱乐篇"><a href="#娱乐篇" class="headerlink" title="娱乐篇"></a>娱乐篇</h2><h3 id="Phoenix-Marketcity"><a href="#Phoenix-Marketcity" class="headerlink" title="Phoenix Marketcity"></a>Phoenix Marketcity</h3><p>首先就是离住所2公里左右的 Phoenix Marketcity 商场，大家习惯叫 Phoenix Mall，据说是印度最大的购物中心之一。我们经常会来这里逛逛，里边大概4/5层，结构和国内的万达很像。与国内商场不同的是，进这里边还需要做安检，和国内进地铁的流程差不多，有点奇怪。</p>
<p><img data-src="https://dynamic-media-cdn.tripadvisor.com/media/photo-o/13/78/28/0b/phoenix-market-city.jpg?w=1400&amp;h=-1&amp;s=1" alt="商场门口"><br>有时候是我们自己组团去，后来公司的通勤大巴在这里也会停，我们就经常下班后在这下车，然后进里边吃饭买东西。</p>
<h3 id="Team-Outing"><a href="#Team-Outing" class="headerlink" title="Team Outing"></a>Team Outing</h3><p>第三周我们的模拟项目小组进行了唯一一次团建，还是去Phoenix Mall，里面有一个玩乐场，可以打桌球，玩跳舞机，还可以打保龄球。</p>
<p><img data-src="https://i.loli.net/2021/07/20/R3WwcsB9yihkCt2.jpg" alt="大秀舞姿的trainer"><br><img data-src="https://i.loli.net/2021/07/20/4wmDLG5OWUuT3xX.jpg" alt="保龄球记分板(No1!)和我帅气的背影"></p>
<h3 id="办公室的欢乐时光"><a href="#办公室的欢乐时光" class="headerlink" title="办公室的欢乐时光"></a>办公室的欢乐时光</h3><p>浦那办公室有很多娱乐设施，比如桌球、台球、乒乓球之类。办公室装修也很有意思，里面还有一排火车车厢式的会议室。TWU的trainer们还会经常组织一些游戏，一群刚毕业的小伙伴聚在一起，也有无穷欢乐。</p>
<p><img data-src="https://i.loli.net/2021/07/20/bqLz5OE3Y86PmCR.jpg" alt="外国小姐姐秒变印度女杀手"></p>
<h3 id="自娱自乐"><a href="#自娱自乐" class="headerlink" title="自娱自乐"></a>自娱自乐</h3><p>有时候，国内的小伙伴们会聚在一起玩狼人杀，在这里我暴露了自己游戏黑洞的本质，最后只能看着大家玩。再最后我选择自己带着电脑去看电影，还被同行的小姐姐种草了一部韩剧。</p>
<h2 id="出行篇"><a href="#出行篇" class="headerlink" title="出行篇"></a>出行篇</h2><h3 id="日常通勤"><a href="#日常通勤" class="headerlink" title="日常通勤"></a>日常通勤</h3><p>首先就是日常通勤啦，上下班都有大巴来接，分不同的班次，大概十几分钟的路程。<br>上班路上看到的浦那街头壁画<a href="https://www.punebiennale.in/yerwada-mural-song-of-the-city.php">《河的故事》</a>：</p>
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE4MzA5OTg1Mg==" frameborder="0" 'allowfullscreen'=""></iframe>
这个视频是从浦那办公室出发，到我们住所的全程路线，别的小伙伴拍的：
<iframe height="498" width="510" src="https://player.youku.com/embed/XNTE4MzQxMDUwNA==" frameborder="0" 'allowfullscreen'=""></iframe>

<h3 id="组团出行"><a href="#组团出行" class="headerlink" title="组团出行"></a>组团出行</h3><p>日常培训和公司活动都有车接送，自己出去的话就得另想办法了，因为在异国他乡，为了安全起见，我们一般都是结伴出行的。<br>来印度第二天，我们和国外的小伙伴一起步行去Phoenix Mall，回程尝试用Uber打车，但因为交流问题，费了好大劲才找到司机。后来组团出行也多是用Uber打车。<br>Uber打到的车有普通轿车，也有印度的「突突车」。突突车就是下图这种三轮电动车，在浦那街头很常见，感觉像是出租车一样，价格忘记了，反正还可以接受；普通轿车的话，街头最常见的是一种S型车标的轿车，后来了解到这种车叫铃木，是印度最热销的汽车品牌，下图也有：</p>
<p><img data-src="https://i.loli.net/2021/07/20/JrByUkmCX6KQiV2.png" alt="浦那常见的交通车辆"><br>有一次中国的trainer们约我们出去吃饭，去了一家叫terttulia的餐厅，环境挺不错的：</p>
<p><img data-src="https://i.loli.net/2021/07/20/teumPcO1QFEqVH4.png" alt="pune terttulia"><br>这家店所在的位置好像也很好，因为店门口的街道上来往车辆都是豪车，不像上文中提到的满是铃木车的浦那街头，我在店门口看到了一只可以脑补一出偶像剧的狗子，自带忧郁气质：</p>
<img data-src="https://i.loli.net/2021/07/20/iAusQoYyVC3ZxR8.jpg" width="350" height="500" alt="自带忧郁气质的狗子">


<h3 id="Weekend-Trip"><a href="#Weekend-Trip" class="headerlink" title="Weekend Trip"></a>Weekend Trip</h3><p>在TWU，会有一次全体出游的机会，比如TWU西安的出游目的地是城墙。而在浦那，出游日定在第四周的周末，行程是这样的：<br><img data-src="https://i.loli.net/2021/07/20/YhcHPJ8sdjltS5T.png" alt="Weekend Trip行程单"></p>
<h4 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h4><p>周六早上按照计划出发，给大家发了纸质的行程单，里面有景点和住所介绍，当日的天气也是我喜欢的微雨天。</p>
<img data-src="https://i.loli.net/2021/07/20/mWVpy4MeZ9dFNT3.jpg" width="350" height="500" alt="坐大巴出发">

<h4 id="Aga-Khan-Palace"><a href="#Aga-Khan-Palace" class="headerlink" title="Aga Khan Palace"></a>Aga Khan Palace</h4><p><img data-src="https://i.loli.net/2021/07/20/vp2NohPVtwzbKCS.png" alt="Aga Khan Palace"><br>不一会，我们就到了Aga Khan Palace，中文名叫阿迦汗宫，是1940年囚禁莫罕达斯甘地的地方，因此成为印度重要的地标之一。附近还有他妻子和秘书的纪念碑，他们在囚禁期间不幸离世。进入宫内可以参观展示甘地一生特殊事件的照片廊，还有甘地当时的日常生活用品，如甘地的衣物和慷慨激昂的信件。</p>
<p><img data-src="https://i.loli.net/2021/07/20/iXfNkMSu8H4db79.jpg" alt="阿迦汗宫的甘地像"><br><img data-src="https://i.loli.net/2021/07/20/wiGv1mH95n3SKau.jpg" alt="宫内建筑"></p>
<h4 id="lonavala-amp-khandala"><a href="#lonavala-amp-khandala" class="headerlink" title="lonavala &amp; khandala"></a>lonavala &amp; khandala</h4><p>lonavala &amp; khandala是纸质行程单上的一个景点，上边说这里是是印度马哈拉施特拉邦西高止山脉上的一个避暑胜地，但因为下雨，所以就没有去。</p>
<h4 id="Lagoona-Resort"><a href="#Lagoona-Resort" class="headerlink" title="Lagoona Resort"></a>Lagoona Resort</h4><p><img data-src="https://i.loli.net/2021/07/20/raKT4xtElA5bvoy.png" alt="Lagoona Resort"><br>游览完阿迦汗宫，我们来到了晚上休息的酒店，酒店有三层，欧式风格，房间是提前安排好的，两人一间，我和同行的西安小姐姐住一间。吃完午餐，我们在周围转了转，这里还有桌球、台球、积木等等娱乐设施，玩了一会。</p>
<p><img data-src="https://i.loli.net/2021/07/20/fKtFhTJ6oCSu1O9.jpg" alt="酒店内部"><br>到了晚上，酒店一楼有DJ party，整个楼层瞬间变成了蹦迪现场，周围还提供了酒品、自助餐、甜品，我买了几瓶酒小酌，和大家一起融入了蹦迪的队伍。</p>
<p><img data-src="https://i.loli.net/2021/07/20/qvS7AKlyQWbcs5Y.jpg" alt="印度打碟小哥"><br><img data-src="https://i.loli.net/2021/07/20/HNDM7VY18cW2OFX.jpg" alt="蹦迪现场"><br>旁边还有个摄影棚可以和小伙伴们一起照相，戴上拍照的道具，一个人可以拿到三张照片。我们还和印度的小伙伴们打了手鼓，总之非常开心。到了晚上1点多，我已经玩不动了，回到楼上，国内的小伙伴约着一起在房间里畅聊，聊到深夜才散场。<br>第二天早上吃完早餐，退了房间，我们就离开了这里，Weekend Trip就这样愉快的结束了。</p>
<p><img data-src="https://i.loli.net/2021/07/20/vBZigRAMqulyWTK.jpg" alt="最后的大合照"></p>
<h2 id="其他篇"><a href="#其他篇" class="headerlink" title="其他篇"></a>其他篇</h2><h3 id="国内外trainee文化差异"><a href="#国内外trainee文化差异" class="headerlink" title="国内外trainee文化差异"></a>国内外trainee文化差异</h3><p>在整个TWU的培训过程中，国内的trainee除了英语是最大的挑战外，总会被说不积极，具体表现在听课时不积极提问，除了工作上的沟通外，大多数国内trainee也不积极和国外的trainee交流。<br>但对于我而言，这个是真的没办法避免，因为我是本来就不太会主动和别人交流的类型，更别说第一次在这种纯英文环境下，刚开始连课都听不大懂，更别说提问了，其他小伙伴不积极我就不知道啥原因了，也许和我一样吧；对比我们，国外的trainee确实是更open一点，他们经常晚上出去happy，有一次下班还在大巴里放音乐蹦迪，嗯，可能文化不一样吧。</p>
<h3 id="为「钱」发愁的那些事儿"><a href="#为「钱」发愁的那些事儿" class="headerlink" title="为「钱」发愁的那些事儿"></a>为「钱」发愁的那些事儿</h3><p>来浦那之前我就在国内银行换了200美金，到了之后多番打听，才和同行小伙伴一起在 Phoenix Mall 里换成了卢比，但还要收取手续费，拿到的钱折算成人民币大概1000块左右，钱花完之后我又开始发愁了。好在住处前边有一个ATM，可以取一些现金，但我没有银行卡，所以后来只能和取到钱的小伙伴兑换，然后微信给人家转帐。</p>
<h3 id="浦那市区环境差异"><a href="#浦那市区环境差异" class="headerlink" title="浦那市区环境差异"></a>浦那市区环境差异</h3><p>不同于国内的区域规划，印度的土地好像是部分私有的，这就导致同一片区域生活环境差距很大，比如上文提到的Phoenix Mall明明是个大商场，但商场外不远的地方竟然有个小树林，而且里面垃圾很多，还有污水流在路面；再比如我们住的旅馆，看着环境尚可，但旅馆100米外的路口对面，有一些棚户区，那里的人无论是穿着还是打扮，都感觉比较贫穷，旁边竟然还有一个健身房，但里面健身的人不像是住在这些棚户区里的，就感觉很离谱。</p>
<h3 id="手机开通国际漫游"><a href="#手机开通国际漫游" class="headerlink" title="手机开通国际漫游"></a>手机开通国际漫游</h3><p>来浦那工作的第一天，登录公司办公应用需要接收手机短信，然而我并没有办理手机卡的国际漫游，根本收不到短信。所以赶紧联系家人让他们帮我办理，才可以正常工作，来之前根本没想到这点，真是失策，以后再出国一定要记得开通国际漫游啊。</p>
<h3 id="一些奇怪的小插曲"><a href="#一些奇怪的小插曲" class="headerlink" title="一些奇怪的小插曲"></a>一些奇怪的小插曲</h3><ul>
<li>在上面的下班视频里可以看到，马路上除了车子，有时还有牛羊在上面行走。</li>
<li>有一次工作日，我们被通知放半天假，说是有示威游行。</li>
<li>在上下班的大巴上，有时看到下面有头顶很多东西的人走在路上，而且还走得很稳。</li>
<li>有次坐在上班大巴上，我竟然看到了摩拜单车！但并没有扫着试试看。</li>
</ul>
<img data-src="https://i.loli.net/2021/07/20/ERsOIDPkFarqod9.jpg" width="350" height="500" alt="浦那街头惊现摩拜单车">

<h2 id="再见印度"><a href="#再见印度" class="headerlink" title="再见印度"></a>再见印度</h2><h3 id="浦那出发"><a href="#浦那出发" class="headerlink" title="浦那出发"></a>浦那出发</h3><p>Graduation ceremony的第二天，我们就踏上了回国的旅程，是晚上的机票，所以早上和小伙伴去Phoenix Mall买了些纪念品，我主要是买了些印度的零食，其他的买不起也带不走。中午和武汉的小伙伴们，在离住处不远的西餐厅最后吃了一次自助餐。晚上又回去收拾行李。</p>
<img data-src="https://i.loli.net/2021/07/20/c79B8dbvOEezMAI.jpg" width="500" height="400" alt="TWU纪念品">
到了晚上，旅馆有送我们去浦那机场的面包车，和来时一样，晚上9点多，我们就到了浦那机场。

<img data-src="https://i.loli.net/2021/07/20/M3so7nd84fEYZRr.jpg" width="350" height="500" alt="浦那机场">

<h3 id="到达国内"><a href="#到达国内" class="headerlink" title="到达国内"></a>到达国内</h3><p>回程的路线和来时一样，但心境更淡定了，又在德里机场免税店买了点纪念品。9.2日中午12点多，终于到了北京，订了下午回西安的机票，在机场吃了顿包子，真的很香，一个多月的印度咖喱真的是够了<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<img data-src="https://i.loli.net/2021/07/20/cI13G8AivFj9JSr.jpg" width="500" height="400" alt="真香">

<h2 id="结束之后"><a href="#结束之后" class="headerlink" title="结束之后"></a>结束之后</h2><p>其实这篇TWU回忆，是21年7月份写的，此时距这趟旅程，已经过去了整整3年。那时的我绝对想不到，这会是我工作3年中唯一一次出差，而此后3年的TWU，已经变成了TWUC，再也没有机会去印度参加TWU了，我这届是最后一次，而去年更是因为疫情，TWU只能改成线上课程。</p>
<p>时光荏苒，我却还能如此详细的写出这些回忆，足可见这次旅程对我而言是多么难忘，在搜集整理资料的时候，我也仿佛掉进了时间的漩涡，好像又回到了3年前，一切未曾改变，我还是那个刚毕业，什么都不懂的社会小白菜(虽然现在也没有多老道)，如今的我已经可以完全适应全英文的工作环境，用英语讲session、做showcase也早就习以为常。</p>
<p>曾经一起参加TWU的trainee，有的已经离职，有的还和我在一个部门里工作，也经常见面，去年还碰到了几个来西安出差的小伙伴，而那些国外的trainee却被时光尘封在回忆里，再也没有见过面；我的trainer-Daniel也离职了，至于国内的trainer，曾经和其中的一位在两个项目里工作过，前段时间也离职了，还有一个和我在一个部门，但不在一个项目，偶尔见面，其它的trainer则再也没有见过面。</p>
<p>虽然很多的人和事都已经变了，但在TWU之旅结束后，我就把所有的东西收在了一个资料袋里，所以才能写出这篇博客。这样以后想回忆的时候，除了看这篇文章，也可以打开资料袋，就可以随时回到过去，看看记忆里的那些小伙伴。</p>
<img data-src="https://i.loli.net/2021/07/20/ImP9g5KtChEoUpV.jpg" width="400" height="300" alt="纪念印度之行">]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>工作</tag>
        <tag>ThoughtWorks University</tag>
      </tags>
  </entry>
  <entry>
    <title>WebUI自动化测试框架Demo(上)</title>
    <url>/WebUI-AutoTest-Demo-1/</url>
    <content><![CDATA[<img data-src="https://i.loli.net/2020/05/15/Fh1dMGlPyOWAKmI.png">

<div class="note info"><p>在前几篇博客中，博主分析了一个好的自动化测试框架应有的6大要素，也学习了Java的基础语法，这些都是为了准备Web UI 自动化测试框架Demo Project workshop产出的内容。<br>现在这个workshop已经结束了，所以想给大家分享一下全过程，概念加实操分为上中下三部分详细介绍。</p>
</div>

<h2 id="Maven-介绍"><a href="#Maven-介绍" class="headerlink" title="Maven 介绍"></a>Maven 介绍</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p><a href="http://maven.apache.org/">Maven</a>是一个使用POM来构建项目的项目管理工具，它固化了软件开发中的一些最佳实践和模式(比如项目的目录模式，项目的依赖管理，再到整个项目的构建模式)。<br>所以一旦熟悉了一个Maven项目，就知道所有Maven项目是如何构建的，这样可以节省浏览多个项目时的时间。虽然Maven主要用于管理Java项目，但它也可以用于构建和管理C#，Ruby，Scala和其他语言编写的项目。</p>
</blockquote>
<p><strong>POM(Project object model)</strong>: 项目对象模型，可以通过一小段描述信息来管理项目的构建，报告和文档。</p>
<h3 id="没有Maven之前"><a href="#没有Maven之前" class="headerlink" title="没有Maven之前"></a>没有Maven之前</h3><p>我们知道，Maven是一个项目管理工具。</p>
<p>但是项目管理是一个很抽象的概念，它既可以指技术上的管理手段，也可以指“以人为本”的非技术因素，那么Maven自然指的是前者了。为了更好的理解Maven的作用，就要知道没有Maven这类管理工具之前，开发团队是怎么做项目技术管理的。</p>
<div class="note primary"><p>以Java项目为例，在开发中，为了保证编译通过，我们会到处去寻找jar包。<br>有时当编译通过了，运行的时候，却发现”ClassNotFoundException”，我们想到的是，难道还差jar包？很难定位或避免jar包和依赖缺失的问题。<br>而且每个Java项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在哪里也没有一个权威的规范，项目构建过程无法准确定义，流程复杂。给项目的交接带来了困难。</p>
</div>

<p>基于这种种困难，我们希望有一种标准的方式来构建项目，清晰地定义项目的组成，简便的发布项目信息，以及实现在多个项目之间共享JAR。Maven这样的项目管理工具就应运而生了。</p>
<h3 id="有了Maven以后"><a href="#有了Maven以后" class="headerlink" title="有了Maven以后"></a>有了Maven以后</h3><pre><code>不用到处去找项目依赖的jar包了
</code></pre>
<p>在pom文件列出项目依赖：提供自动下载，方便引入项目所需依赖 Jar 包。<br>仓库管理(本地仓库/远程仓库)：提供统一管理所有 Jar 包的工具，想要什么jar包直接从仓库中去取，不必每个人去开源项目的站点去苦苦搜寻了。</p>
<blockquote>
<p><strong>举个例子</strong><br>比如做酸菜鱼，可以直接去超市买酸菜鱼调料包，就不用自己去买各种配料了，也不用操心配料怎么配。Maven就是这个超市，只是它卖的不是酸菜鱼调料包，而是一个jar包已经和它有依赖关系的其他jar包。这样，就不用在项目开始前，去各个网站下载各种不同的jar包了，也不用考虑它们之间的依赖关系。</p>
</blockquote>
<pre><code>目录结构标准化
</code></pre>
<p>Maven提供了一套标准的目录结构，下边是最基本的：<br><img data-src="https://i.loli.net/2020/05/20/qPQsLF6JdGVuOic.png" width="300" height="250"></p>
<pre><code>用配置文件描述项目信息
</code></pre>
<p>用配置文件的方式对项目的描述、名称、版本号、项目依赖等等信息进行描述。使项目描述结构清晰，任何人接手的成本比较低。</p>
<pre><code>用生命周期描述项目构建过程
</code></pre>
<p>用生命周期的概念进行项目构建，就是什么时候干什么事，下文中有详细介绍。</p>
<h3 id="同类常见技术"><a href="#同类常见技术" class="headerlink" title="同类常见技术"></a>同类常见技术</h3><ul>
<li>Ant+lvy: 用build.xml设置task，指定顺序，声明项目构建。使用Apache Ivy来处理Jar包的依赖(在ivy.xml中指定依赖)。</li>
<li>Gradle: 用build.gradle文件声明项目构建，使用Groovy代替xml声明设置项目。</li>
</ul>
<div class="note info"><p><strong>比较：</strong><br>Ant(2000)的主要优点在于对构建过程的控制上，可以自定义构建脚本。但除非是很小的项目，否则它的XML文件很快就大得无法管理。</p>
<p>Maven(2004)的主要优点是生命周期，而且提供自动下载jar包。但正因Maven“约定大于配置”的思想，很难写出复杂、定制化的构建脚本，牺牲了灵活性，甚至不如Ant。同样，用XML写的配置文件会变得越来越大。</p>
<p>Gradle(2012)结合了前两者的优点，它具有Ant的灵活，又有Maven的生命周期管理且易于使用，也提供自动下载jar包。而且它用一种基于Groovy的特定领域语言来声明项目设置，而不是传统的XML，语法更加短小精悍、易于理解。</p>
</div>

<h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><blockquote>
<p>常用的开发工具里面都集成了Maven，提供了图形化操作Maven项目的方式(可能有少许的Bug)，比较方便。下文Demo Project Set Up中会展示在IDEA中创建Maven项目。为了熟悉常用的Maven命令，这里我们就不用图形化操作这种方式，尝试使用本地maven创建一个简单的java工程,深入理解它的作用，体验一下Maven高度自动化构建项目的过程，并解释一些重要的概念。</p>
</blockquote>
<h4 id="Maven安装和环境变量配置"><a href="#Maven安装和环境变量配置" class="headerlink" title="Maven安装和环境变量配置"></a>Maven安装和环境变量配置</h4><img data-src="https://i.loli.net/2020/05/21/oZpv5dSm7J4yXgP.png">

<ul>
<li><a href="https://www.jianshu.com/p/191685a33786">MacOS</a></li>
<li><a href="https://www.jianshu.com/p/62a76daf5096">Windows</a></li>
</ul>
<h4 id="使用Maven项目模版快速创建java项目"><a href="#使用Maven项目模版快速创建java项目" class="headerlink" title="使用Maven项目模版快速创建java项目"></a>使用Maven项目模版快速创建java项目</h4><p>**archetype(原型)**，是一个 Maven 插件，准确说是一个项目模板，它的任务是根据模板创建一个项目结构。我们将使用 quickstart 原型插件的RELEASE版本创建一个简单的 java 应用程序。在你想要生成Maven项目的文件夹(我就直接在桌面创建了)输入命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=RELEASE</span><br></pre></td></tr></tbody></table></figure>

<p>Maven将开始处理， 询问项目细节并确认设置，选择默认设置直接按Enter继续：<br><img data-src="https://i.loli.net/2020/05/26/t7iC5AY8BeZdNuj.png"></p>
<div class="note primary"><p> 知识点来了</p>
<p>GroupId: 工件组名，顾名思义，这个应该是公司名或是组织名。一般由三个部分组成，每个部分之间以”.”分隔，第一部分是项目用途，比如用于商业的就是”com”，用于非营利性组织的就是”org”；第二部分是公司名，比如”tengxun”、”baidu”、”alibaba”；第三部分是你的项目名。</p>
<p>ArtifactId: 项目名</p>
<p>Version: 项目版本号，SNAPSHOT版本代表不稳定、尚处于开发中的版本。</p>
<p>package: 资源包名，默认为工件组名。</p>
<p>GroupId/ArtifactId/Version 合称为**Artifact coordinates(工件坐标)**：每一个 Jar包/插件/项目都需要定义一个唯一标识，方便管理维护，因此 Maven 使用 groupId, artifactId, versionId 三元素组成一个 Jar 的坐标。当我们依赖该 Jar 包时，同样需要指定该 Jar 包的坐标。</p>
</div>

<p>之后 Maven 就开始创建项目结构，显示如下:<br><img data-src="https://i.loli.net/2020/05/26/DeYf9bPKNWta71l.png"></p>
<p>现在桌面已经生成了Maven项目Hello, 它具有Maven标准的目录结构，还有Maven帮我们自动生成的App.java和AppTest.java文件：<br><img data-src="https://i.loli.net/2020/05/26/TYhkuHLzJgdvsfw.png"><br><img data-src="https://i.loli.net/2020/05/26/dRIEoeAKfUGsizF.png"></p>
<h4 id="m2文件夹"><a href="#m2文件夹" class="headerlink" title=".m2文件夹"></a>.m2文件夹</h4><p>上文提到，Maven通过仓库统一管理jar包，包括本地仓库和远程仓库。Maven工作时，首先会从本地仓库中获取jar包，当无法获取指定jar包时，本地仓库会从远程仓库中下载jar包，并放入本地仓库以备将来使用。</p>
<p>Maven本地仓库的配置文件和本地jar包存放在.m2文件夹中:<br><img data-src="https://i.loli.net/2020/05/18/hBRzedQJP3CK4yT.png"></p>
<ul>
<li><mark class="label info">.m2文件夹</mark>：当使用maven命令的时候，maven才会创建.m2文件夹，所以如果我们只是在电脑上下载安装了maven，你会发现在用户目录下不存在.m2文件夹，因为并没有让maven执行真正的任务。</li>
<li><mark class="label info">.m2/settings.xml</mark>: maven配置文件。默认情况下.m2文件夹是没有setting.xml的，所以我们可以看到上图中的.m2文件夹并没有setting.xml。我们一般把Maven全局仓库设置文件%MAVEN_HOME%/conf/settings.xml拷贝到这个文件夹下，修改成用户仓库设置，后者优先级更高：
<img data-src="https://i.loli.net/2020/05/18/UhTxj6nr7pcNe9V.png"></li>
<li><mark class="label info">.m2/repository</mark>: maven项目所有的jar包，下载后都会存放在此处。</li>
</ul>
<h4 id="pom-xml文件结构解释"><a href="#pom-xml文件结构解释" class="headerlink" title="pom.xml文件结构解释"></a>pom.xml文件结构解释</h4><p>pom.xml配置文件是Maven的核心，它包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。<br>Maven工作时，会在当前目录中查找pom.xml并读取内容，获取所需的配置信息，然后执行目标。<br>这里我们用默认生成的pom.xml为例详细解释下它的结构：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 当前Maven模型的版本号，对于Maven2和Maven3来说，它只能是4.0.0 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 项目信息：坐标、版本、名称、url等等 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;org.me.hello&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;Hello&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project's website --&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 定义项目的配置属性的，例如项目构建源码编码方，maven编译插件版本等等 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 项目依赖及其坐标，相关jar包存放在.m2/repository下 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 构建项目需要的信息，包括Mave生命周期中的插件目标列表等等。  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.7.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">    &lt;/pluginManagement&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>Maven生命周期</strong></p>
<p>Maven有三个标准的生命周期(clean/default/site)，每一个生命周期都有一个或多个插件目标，每个插件目标代表一个特定的任务/命令/生命周期阶段。所有的插件目标都在pom文件中保存。Maven的生命周期是为了对所有的构建过程进行抽象，便于统一。就是什么时候干什么事。</p>
<ul>
<li><mark class="label info">clean lifecycle</mark></li>
</ul>
<p>此生命周期是在给工程做清理工作，它包含以下阶段：pre-clean(执行项目清理前所需要的工作), clean(清理上一次build项目生成的文件), post-clean(执行完成项目清理所需的工作)等等。<br>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行“mvn clean”将运行pre-clean&amp;clean两个生命周期阶段。</p>
<ul>
<li><mark class="label info">default lifecycle</mark></li>
</ul>
<p>这是 Maven 的主要生命周期，被用于构建应用。它主要包括项目的compile(编译)，test(测试)，package(打包)，install(安装)，deploy(部署)等阶段。</p>
<ul>
<li><mark class="label info">site lifecycle</mark></li>
</ul>
<p>Site生命周期是用来创建新的报告文档、部署站点等。它主要包含pre-site(执行一些生成项目站点前的准备工作), site(生成项目站点的文档), post-site(执行需完成站点生成的工作，如站点部署的准备工作), site-deploy(向制定的web服务器部署站点生成文件)等阶段。</p>
<h4 id="使用Maven编译项目"><a href="#使用Maven编译项目" class="headerlink" title="使用Maven编译项目"></a>使用Maven编译项目</h4><p>将App.java代码改动如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.me.hello;</span><br><span class="line"></span><br><span class="line">public class App </span><br><span class="line">{</span><br><span class="line">    public String sayHello(String name){</span><br><span class="line">        return "Hello "+name+"!";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>将AppTest.java代码改动如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.me.hello;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class AppTest </span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testApp(){</span><br><span class="line">        App app = new App();</span><br><span class="line">        String results = app.sayHello("gacl");</span><br><span class="line">        assertEquals("Hello gacl!",results);        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p>进入Hello项目根目录执行 <strong>mvn compile</strong> 命令编译项目的java类:<br><img data-src="https://i.loli.net/2020/05/26/qdcOrMWeVPR1Z3G.png"><br>观察终端输出结果，可以看到：</p>
<ul>
<li>maven运行了default lifecycle的 resources&amp;compile 两个生命周期阶段。因为在我们的pom文件中resources阶段是在compile之前的，所以compile阶段运行的时候，在它之前的resources阶段也会被运行。</li>
<li>我们在pom文件里添加了junit的依赖，如果本地仓库中没有相关的jar包，终端输出结果会包含去远程仓库下载的信息。由于我本地已经有了相关的jar包，所以这里终端输出结果中并没有下载相关依赖的内容。</li>
</ul>
<p>这就是使用Maven自动编译项目的过程，可以看到Hello项目的根目录下多了一个 <strong>target</strong> 文件夹，这个文件夹就是编译成功之后Maven帮我们生成的目标文件夹，在target/classes路径下可以看到编译好的.class文件：<br><img data-src="https://i.loli.net/2020/05/26/EXtn39ymWNbzh7V.png"></p>
<h4 id="使用Maven清理项目"><a href="#使用Maven清理项目" class="headerlink" title="使用Maven清理项目"></a>使用Maven清理项目</h4><p>继续执行 <strong>mvn clean</strong> 命令清理项目，清理项目的过程就是把执行”mvn compile”命令编译项目时生成的target文件夹删掉：<br><img data-src="https://i.loli.net/2020/05/26/G4twiEaUZbCeNQR.png"></p>
<h4 id="使用Maven测试项目"><a href="#使用Maven测试项目" class="headerlink" title="使用Maven测试项目"></a>使用Maven测试项目</h4><p>执行 <strong>mvn test</strong> 命令测试项目，依次运行在它之前的resources、compile生命周期阶段，然后运行surefire插件，从中央仓库下载了一些相关的jar包，执行测试并输出报告：<br><img data-src="https://i.loli.net/2020/05/26/tp7dlvLCeBzJW9F.png"><br>在target文件夹下可以看到编译好的源代码和测试代码文件，和其他生命周期阶段运行后的一些目标文件夹：<br><img data-src="https://i.loli.net/2020/05/25/evEHVoR4xmQ3q2g.png"></p>
<h4 id="使用Maven打包项目"><a href="#使用Maven打包项目" class="headerlink" title="使用Maven打包项目"></a>使用Maven打包项目</h4><p>执行 <strong>mvn package</strong> 命令打包项目，依次执行在它之前的生命周期阶段，然后运行maven-jar-plugin插件打包项目：<br><img data-src="https://i.loli.net/2020/05/26/kJN8EGcFpSMavTR.png"><br>在target文件夹可以看到打包好的jar文件：<br><img data-src="https://i.loli.net/2020/05/26/E35Msda4onlvbP9.png"></p>
<h4 id="使用Maven安装项目"><a href="#使用Maven安装项目" class="headerlink" title="使用Maven安装项目"></a>使用Maven安装项目</h4><p>执行 <strong>mvn install</strong> 命令安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。依次执行在它之前的生命周期阶段，然后执行install生命周期阶段：<br><img data-src="https://i.loli.net/2020/05/26/uZDcXbNQ68KBe4C.png"><br>在本地仓库就可以看到Hello项目的jar包了，路径就是它的包名：<br><img data-src="https://i.loli.net/2020/05/26/5DRTF9OtZMoxXJ3.png"></p>
<h4 id="使用Maven部署项目"><a href="#使用Maven部署项目" class="headerlink" title="使用Maven部署项目"></a>使用Maven部署项目</h4><p>执行 <strong>mvn deploy</strong> 命令将最终的项目包复制到远程仓库中与其他开发者和项目共享。这里因为我们是一个练习项目，就不运行这个命令了。</p>
<h4 id="组合使用Maven命令"><a href="#组合使用Maven命令" class="headerlink" title="组合使用Maven命令"></a>组合使用Maven命令</h4><p>不同生命周期的命令也可以组合使用，比如:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mvn clean compile</span><br><span class="line">mvn clean test</span><br><span class="line">mvn clean package</span><br><span class="line">mvn clean install</span><br></pre></td></tr></tbody></table></figure>

<img data-src="https://i.loli.net/2020/05/26/YZhiaIcmGxTzVBF.png">

<h4 id="使用Maven生成的jar包"><a href="#使用Maven生成的jar包" class="headerlink" title="使用Maven生成的jar包"></a>使用Maven生成的jar包</h4><p>上面我们已经把Hello项目的jar包安装到了本地仓库，接下来我们练习下在别的项目中使用它，依然通过maven命令新建HelloFriend项目：<br><img data-src="https://i.loli.net/2020/05/26/nSkF6D4fm3CyAWQ.png"></p>
<p>将App.java改名为AppFriend.java，并添加如下代码：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.me.hellofriend;</span><br><span class="line"></span><br><span class="line">import org.me.hello.App; //引入hello项目的App.class</span><br><span class="line"></span><br><span class="line">public class AppFriend {</span><br><span class="line"></span><br><span class="line">    public String sayHelloToFriend(String name){</span><br><span class="line">        </span><br><span class="line">        App app = new App();</span><br><span class="line">        String str = app.sayHello(name)+" I am "+this.getMyName();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        return str;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    public String getMyName(){</span><br><span class="line">        return "John";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>将AppTest.java改名为AppFriendTest.java，并添加如下代码：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package org.me.hellofriend;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class AppFriendTest {</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void tesAppFriend(){</span><br><span class="line">        </span><br><span class="line">        AppFriend appFriend = new AppFriend();</span><br><span class="line">        String results = appFriend.sayHelloToFriend("gacl");</span><br><span class="line">        assertEquals("Hello gacl! I am John",results);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>因为要使用Hello项目的jar包，我们在pom.xml里添加依赖：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.me.hello&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>然后执行 <strong>mvn test</strong> 执行测试：<br><img data-src="https://i.loli.net/2020/05/26/UMrVpTFjC9vyoiS.png"><br>运行成功，说明Hello的jar包已经成功在HelloFriend项目里生效了。</p>
<h2 id="Demo-Project-Set-Up"><a href="#Demo-Project-Set-Up" class="headerlink" title="Demo Project Set Up"></a>Demo Project Set Up</h2><h3 id="创建Maven-Project"><a href="#创建Maven-Project" class="headerlink" title="创建Maven Project"></a>创建Maven Project</h3><p><span id="inline-toc">1.</span> 装好JDK之后，打开IDEA，点击<mark class="label info">File-&gt;New-&gt;Project-&gt;Maven</mark>，勾选“Create from archetype”，然后选择quick start：<br><img data-src="https://i.loli.net/2020/05/15/fk5CHuj3VSzcxsK.jpg"></p>
<p><span id="inline-toc">2.</span> 点击Next，命名项目：<br><img data-src="https://i.loli.net/2020/05/15/JzQ2vPyFL1tm7iA.jpg"></p>
<p><span id="inline-toc">3.</span> 命名为Automation，点击Next：<br><img data-src="https://i.loli.net/2020/05/15/nuy6grKl4vSMkEd.png"></p>
<p><span id="inline-toc">4.</span>点击Finish后, 项目就创建好了，控制台输出的内容和我们上文中用命令创建的时候终端输出内容是一样的：<br><img data-src="https://i.loli.net/2020/05/15/ejac3QP5tVzq6Ls.png"></p>
<h3 id="添加Selenium依赖"><a href="#添加Selenium依赖" class="headerlink" title="添加Selenium依赖"></a>添加Selenium依赖</h3><p>在IDEA点击<mark class="label info">code-&gt;generate-&gt;dependency</mark>(或者在pom.xml文件里Ctrl+N-&gt;Dependency)，打开Maven Artifact Search窗口，这里可以搜索并添加依赖，搜索selenium, 因为我们是用java写代码，所以要加入selenium.java依赖包，选择任一版本：<br><img data-src="https://i.loli.net/2020/05/15/N9yA8i1kGMqOJ6I.png"></p>
<blockquote>
<p>如果怎么都打不开Maven Artifact Search窗口，还可以打开maven <a href="https://mvnrepository.com/">中央仓库</a> 的网站，首页搜索selenium，选择selenium.java依赖包版本，然后将依赖包代码粘贴到pom文件中：<br><img data-src="https://i.loli.net/2020/06/02/2pWOkP4cG7TqfKA.png"><br><img data-src="https://i.loli.net/2020/06/02/CawP49RQxu3gUhL.png"></p>
</blockquote>
<p>之后在pom.xml文件里就可以看到Selenium依赖已经添加了。显示红色因为还没有下载，所以我们要点击页面右上角的Maven小图标下载依赖包:<br><img data-src="https://i.loli.net/2020/05/15/aYy6lZ4ML1UNdRS.png"><br>下载完成后就可以看到相应依赖已经添加到项目的Extenral Libraries中了：<br><img data-src="https://i.loli.net/2020/05/15/BAs3H5etboJ7Lxh.png"><br>下载的依赖文件也可以在创建项目时设置的<strong>Local repository</strong>路径里找到，默认是在<mark class="label info">.m2/repository/</mark>路径下。</p>
<h3 id="下载WebDriver"><a href="#下载WebDriver" class="headerlink" title="下载WebDriver"></a>下载WebDriver</h3><p>有了Selenium依赖，我们还需要下载WebDirver，因为我们是用WebDriver开启浏览器测试。这里我们下载<a href="https://github.com/mozilla/geckodriver/releases">Firefox</a>和<a href="https://chromedriver.chromium.org/downloads">Chrome</a>的WebDriver，下载完成后在项目新建drivers文件夹放置，便于管理：<br><img data-src="https://i.loli.net/2020/05/15/IisXJT1xD4q2yCG.png"></p>
<div class="note warning"><p>注意，下载WebDriver之前，需要确保电脑上已经下载了对应的浏览器，否则是不能使用的。</p>
</div>

<h3 id="编写并运行测试Case"><a href="#编写并运行测试Case" class="headerlink" title="编写并运行测试Case"></a>编写并运行测试Case</h3><p>到这里，我们所有的准备工作都做好了，在org.example包下新建<mark class="label info">SeleniumTest.java</mark>文件，首先编写一个简单的测试case：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//百度搜索Selenium</span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line">import org.openqa.selenium.WebDriver;</span><br><span class="line">import org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"></span><br><span class="line">public class SeleniumTest {</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void searchSelenium()</span><br><span class="line">    {</span><br><span class="line">        System.setProperty("webdriver.gecko.driver", "drivers/geckodriver");</span><br><span class="line">        //指定要调用的WebDriver,也可以用Chrome</span><br><span class="line">        //语法相应变为：System.setProperty("webdriver.chrome.driver", "drivers/chromedriver")</span><br><span class="line"></span><br><span class="line">        WebDriver driver = new FirefoxDriver();</span><br><span class="line"></span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        driver.get("https://www.baidu.com/");</span><br><span class="line">        driver.findElement(By.id("kw")).clear();</span><br><span class="line">        driver.findElement(By.id("kw")).sendKeys("selenium");</span><br><span class="line">        driver.findElement(By.id("su")).click();</span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行成功之后，我们的Demo Project Set Up就结束了:<br><img data-src="https://i.loli.net/2020/05/15/iDmgZtcjeTzqfEL.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/28b7ae892ed1">Maven + TestNG + Jenkins搭建自动化测试框架</a></li>
<li><a href="https://baike.baidu.com/item/Maven">Maven百度百科</a></li>
<li><a href="https://blog.csdn.net/napolunyishi/article/details/39345995">Java构建工具：Ant vs Maven vs Gradle</a></li>
<li><a href="http://www.codingwhy.com/view/718.html">maven .m2文件夹在哪？</a></li>
<li><a href="https://www.cnblogs.com/easonjim/p/6827058.html">.m2\setting.xml文件</a></li>
<li><a href="https://www.zhihu.com/question/20104186">maven是干嘛的？</a></li>
<li><a href="https://www.zhihu.com/question/30432152">如何通俗地理解 Gradle？</a></li>
<li><a href="https://www.runoob.com/maven/project-templates.html">Maven菜鸟教程</a></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/about/index.html</url>
    <content><![CDATA[<blockquote><p>人生惟一的不幸就是自己的无能。</p>
<footer><strong>王小波</strong><cite><a href="http://www.bwsk.com/xd/w/wangxiaobo/000/032.htm">关于幽闭型小说</a></cite></footer></blockquote>
<hr>
<!-- <img data-src="https://i.loli.net/2021/07/03/6XYkWHefnZ85hql.jpg" width="200" height="200"> -->
<img data-src="https://i.loli.net/2021/08/03/93kctmnIgVCifEb.jpg" width="200" height="200">
<blockquote class="blockquote-center">
<p>97年生人 <span class="emoji" alias="girl" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8">👧</span><br>一个不想努力的老阿姨<br>音乐 - 健身 - 美食 - 追剧<br>巨蟹座 &amp; 天生宅 &amp; 懒癌晚期 &amp; 重度拖延</p>

</blockquote>

<div class="note info"><p>本博客基于<strong>Hexo</strong>框架搭建，并部署在<strong>GithubPages</strong>和<strong>CodingPages</strong>上。如果你也想搭建，可以参考 <a href="http://jmyblog.top/Hexo-GithubPages-CodingPages%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more">我写的文章</a>。<br>博客搭建之前的文章都记录在 <a href="https://blog.csdn.net/summy_j">CSDN</a> 中，都是一些技术博客，但是里面的内容我现在已经看不懂了，因为工作中大多都没有用到<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span><br>这里主要更新一些学习笔记，一些工(ban)作(zhuan)总结，还有一些闲言碎语和生活感悟<span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
</div>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
