<meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta http-equiv="Permissions-Policy" content="accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=(), encrypted-media=()">
{%- if theme.darkmode %}
<meta name="theme-color" content="{{ theme.theme_color.light }}" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="{{ theme.theme_color.dark }}" media="(prefers-color-scheme: dark)">
{%- else %}
<meta name="theme-color" content="{{ theme.theme_color.light }}">
{%- endif %}
{%- if config.meta_generator %}
  {{- meta_generator() }}
{%- endif %}

{%- if theme.preconnect %}
  <link rel="preload" href="{{ url_for(theme.css) }}/main.css" as="style">
  <!-- 预连接到外部资源以提高加载速度 -->
  <link rel="preconnect" href="//fonts.loli.net" crossorigin>
  <link rel="preconnect" href="//music.163.com" crossorigin>
  <link rel="preconnect" href="//cdn.jsdelivr.net" crossorigin>
  <link rel="preconnect" href="//busuanzi.ibruce.info" crossorigin>
  <link rel="dns-prefetch" href="//fonts.loli.net">
  <link rel="dns-prefetch" href="//music.163.com">
  <link rel="dns-prefetch" href="//cdn.jsdelivr.net">
  <link rel="dns-prefetch" href="//busuanzi.ibruce.info">
{%- endif %}
{{ next_pre() }}

{%- if theme.favicon.apple_touch_icon %}
  <link rel="apple-touch-icon" sizes="180x180" href="{{ url_for(theme.favicon.apple_touch_icon) }}">
{%- endif %}
{%- if theme.favicon.medium %}
  <link rel="icon" type="image/png" sizes="32x32" href="{{ url_for(theme.favicon.medium) }}">
{%- endif %}
{%- if theme.favicon.small %}
  <link rel="icon" type="image/png" sizes="16x16" href="{{ url_for(theme.favicon.small) }}">
{%- endif %}
{%- if theme.favicon.safari_pinned_tab %}
  <link rel="mask-icon" href="{{ url_for(theme.favicon.safari_pinned_tab) }}" color="{{ theme.theme_color.light }}">
{%- endif %}
{%- if theme.favicon.android_manifest %}
  <link rel="manifest" href="{{ url_for(theme.favicon.android_manifest) }}">
{%- endif %}

{%- if theme.google_site_verification %}
  <meta name="google-site-verification" content="{{ theme.google_site_verification }}">
{%- endif %}
{%- if theme.bing_site_verification %}
  <meta name="msvalidate.01" content="{{ theme.bing_site_verification }}">
{%- endif %}
{%- if theme.yandex_site_verification %}
  <meta name="yandex-verification" content="{{ theme.yandex_site_verification }}">
{%- endif %}
{%- if theme.baidu_site_verification %}
  <meta name="baidu-site-verification" content="{{ theme.baidu_site_verification }}">
{%- endif %}

<link rel="stylesheet" href="{{ url_for(theme.css) }}/main.css">

{{ next_font() }}

{{ next_vendors('fontawesome') }}

{%- if theme.motion.enable %}
  {{ next_vendors('animate_css') }}
{%- endif %}

{%- if theme.fancybox %}
  {{ next_vendors('fancybox_css') }}
{%- endif %}

{%- if theme.pace.enable %}
  {{ next_vendors('pace_css') }}
  {{ next_vendors('pace_js') }}
{%- endif %}

{{ next_data('main', next_config()) }}
{{- next_js('config.js') }}
{{- next_js('theme-badge-toggle.js') }}

<!-- 自定义 Live Reload for Development -->
<script>
(function() {
  'use strict';
  
  // 仅在本地开发环境中启用
  if (typeof window !== 'undefined' && 
      (window.location.hostname === 'localhost' || 
       window.location.hostname === '127.0.0.1')) {
    
    console.log('🔄 Initializing Smart Live Reload for development...');
    
    let lastPageHash = null;
    let checkCount = 0;
    let isChecking = false;
    let stableCount = 0;
    let initialized = false;
    let currentUrl = window.location.href;
    let checkInterval = null;
    let urlChangeDetected = false;
    
    // 生成页面内容哈希（排除动态元素）
    function generatePageHash(htmlContent) {
      try {
        // 移除可能变化的动态内容
        let cleanHtml = htmlContent;
        
        // 移除时间戳、访问统计等动态内容的正则
        const dynamicPatterns = [
          /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/g,  // ISO时间戳
          /\d{4}\/\d{2}\/\d{2}/g,                   // 日期格式
          /\d{2}:\d{2}:\d{2}/g,                     // 时间格式
          /<script[^>]*>[\s\S]*?<\/script>/gi,      // 所有script标签
          /busuanzi_value_\w+/g,                    // 不蒜子统计
          /leancloud_visitors/g,                    // LeanCloud访问统计
          /live2d-widget/g,                         // Live2D
          /persistent-music-player/g,               // 音乐播放器
          /hexo-neat/g                              // hexo-neat 压缩标记
        ];
        
        dynamicPatterns.forEach(function(pattern) {
          cleanHtml = cleanHtml.replace(pattern, '');
        });
        
        // 简单哈希函数
        let hash = 0;
        for (let i = 0; i < cleanHtml.length; i++) {
          const char = cleanHtml.charCodeAt(i);
          hash = ((hash << 5) - hash) + char;
          hash = hash & hash; // 转换为32位整数
        }
        
        return hash.toString();
      } catch (error) {
        console.log('⚠️ Error generating page hash:', error);
        return Math.random().toString();
      }
    }
    
    // 检测URL变化
    function checkUrlChange() {
      const newUrl = window.location.href;
      if (newUrl !== currentUrl) {
        console.log('🔗 URL changed detected!');
        console.log('📍 From:', currentUrl);
        console.log('📍 To:', newUrl);
        
        // 重置状态以适应新页面
        currentUrl = newUrl;
        lastPageHash = null;
        initialized = false;
        stableCount = 0;
        urlChangeDetected = true;
        
        // URL变化后延迟重新初始化，避免误触发刷新
        setTimeout(function() {
          urlChangeDetected = false;
          console.log('🔄 Reinitializing Live Reload for new page...');
          checkForUpdates();
        }, 2000);
        
        return true;
      }
      return false;
    }
    
    function checkForUpdates() {
      // 检查URL是否变化
      if (checkUrlChange()) {
        return;
      }
      
      // 如果刚刚检测到URL变化，跳过这次检查
      if (urlChangeDetected) {
        console.log('⏭️ Skipping check due to recent URL change...');
        return;
      }
      
      if (isChecking) {
        return;
      }
      
      isChecking = true;
      checkCount++;
      
      fetch(window.location.href + '?_=' + Date.now(), {
        method: 'GET',
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      }).then(function(response) {
        return response.text();
      }).then(function(html) {
        const currentHash = generatePageHash(html);
        
        if (!initialized) {
          lastPageHash = currentHash;
          initialized = true;
          console.log('🏁 Page hash initialized:', currentHash.substring(0, 8) + '...', 'for', currentUrl);
          stableCount = 0;
        } else if (currentHash !== lastPageHash) {
          console.log('✨ Page content changed!');
          console.log('📊 Hash changed from', lastPageHash.substring(0, 8) + '...', 'to', currentHash.substring(0, 8) + '...');
          console.log('🔄 Reloading page in 300ms...');
          
          // 清理定时器
          if (checkInterval) {
            clearTimeout(checkInterval);
          }
          
          // 重置状态，准备重新加载
          initialized = false;
          lastPageHash = null;
          isChecking = false;
          
          // 减少重新加载延迟，提升响应速度
          setTimeout(function() {
            window.location.reload();
          }, 300);
          return;
        } else {
          stableCount++;
          
          // 动态调整检测间隔：没有变化时逐渐延长间隔
          if (stableCount < 3) {
            currentInterval = minInterval; // 前3次检测保持最快速度
          } else if (stableCount < 10) {
            currentInterval = 2000; // 4-10次检测每2秒一次
          } else if (stableCount < 20) {
            currentInterval = 3000; // 11-20次检测每3秒一次
          } else {
            currentInterval = maxInterval; // 20次后每5秒一次
          }
          
          if (stableCount <= 2 || stableCount % 8 === 0) {
            console.log('📋 Check #' + checkCount + ' - No changes detected (stable: ' + stableCount + ', interval: ' + currentInterval + 'ms)');
          }
        }
        
        isChecking = false;
      }).catch(function(error) {
        console.log('❌ Check #' + checkCount + ' failed:', error.message);
        isChecking = false;
      });
    }
    
    // Pjax/页面跳转监听
    function setupNavigationListeners() {
      // 监听 Pjax 事件
      document.addEventListener('pjax:success', function() {
        console.log('🚀 Pjax navigation detected');
        urlChangeDetected = true;
        setTimeout(function() {
          checkUrlChange();
        }, 500);
      });
      
      // 监听 History API 变化
      const originalPushState = history.pushState;
      const originalReplaceState = history.replaceState;
      
      history.pushState = function() {
        originalPushState.apply(history, arguments);
        setTimeout(checkUrlChange, 100);
      };
      
      history.replaceState = function() {
        originalReplaceState.apply(history, arguments);
        setTimeout(checkUrlChange, 100);
      };
      
      // 监听 popstate 事件（浏览器前进/后退）
      window.addEventListener('popstate', function() {
        console.log('⬅️ Browser navigation detected');
        setTimeout(checkUrlChange, 100);
      });
    }
    
    // 定义全局变量
    const maxInterval = 5000; // 最大间隔5秒
    const minInterval = 1000; // 最小间隔1秒
    let currentInterval = 2000; // 初始2秒检测一次
    
    // 初始化
    function initialize() {
      setupNavigationListeners();
      
      // 等待页面完全加载后开始检查
      setTimeout(function() {
        checkForUpdates();
        
        function scheduleNextCheck() {
          clearTimeout(checkInterval);
          checkInterval = setTimeout(() => {
            checkForUpdates();
            scheduleNextCheck();
          }, currentInterval);
        }
        
        scheduleNextCheck();
        
        // 页面卸载时清理
        window.addEventListener('beforeunload', function() {
          if (checkInterval) {
            clearTimeout(checkInterval);
          }
        });
      }, 3000);
      
      // 监听页面焦点，用户回到页面时立即检查
      window.addEventListener('focus', function() {
        if (initialized && !urlChangeDetected) {
          console.log('👁️ Page focused - checking for updates...');
          // 重置检测间隔为最快速度
          currentInterval = minInterval;
          setTimeout(checkForUpdates, 300);
        }
      });
      
      // 添加键盘快捷键 Ctrl+R / Cmd+R 快速刷新检测
      document.addEventListener('keydown', function(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'r' && !e.shiftKey) {
          if (initialized && !urlChangeDetected) {
            console.log('⚡ Manual refresh detected - quick check...');
            // 阻止默认刷新，先检查更新
            e.preventDefault();
            currentInterval = minInterval;
            setTimeout(() => {
              checkForUpdates();
              // 如果500ms内没有检测到更新，则正常刷新
              setTimeout(() => {
                if (!isChecking) {
                  window.location.reload();
                }
              }, 500);
            }, 100);
          }
        }
      });
      
      // 添加可见性变化监听，页面变为可见时快速检测
      if (typeof document.visibilityState !== 'undefined') {
        document.addEventListener('visibilitychange', function() {
          if (!document.hidden && initialized && !urlChangeDetected) {
            console.log('👀 Page became visible - quick check...');
            currentInterval = minInterval;
            setTimeout(checkForUpdates, 200);
          }
        });
      }
    }
    
    // 启动初始化
    initialize();
    
    console.log('✅ Enhanced Live Reload initialized');
    console.log('💡 Smart interval: 1s → 2s → 3s → 5s based on stability');
    console.log('🎯 Only real content changes will trigger reload');
    console.log('🔗 URL changes will be handled gracefully');
    console.log('⚡ Press Ctrl+R/Cmd+R for instant check');
    console.log('👀 Auto-detects when page becomes visible');
  }
})();
</script>

<script>
/* Service Worker 注册 - 提升缓存性能 */
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then(registration => {
        console.log('SW registered: ', registration);
      })
      .catch(registrationError => {
        console.log('SW registration failed: ', registrationError);
      });
  });
}

/* 持久化音乐播放器 - 避免Pjax重置 */
(function() {
    'use strict';
    
    let musicPlayer = null;
    const MUSIC_PLAYER_ID = 'persistent-music-player';
    
    // 创建音乐播放器HTML
    function createMusicPlayer() {
        const playerHtml = `
            <div id="${MUSIC_PLAYER_ID}" class="persistent-music-player minimized">
                <div class="music-controls">
                    <button class="music-toggle-btn" onclick="toggleMusicPlayer()" title="点击切换播放器显示/隐藏&#10;桌面端右键开启/关闭旋转&#10;手机端长按1秒开启/关闭旋转">♪</button>
                    <button class="music-minimize-btn" onclick="minimizeMusicPlayer()" title="最小化">−</button>
                </div>
                <div class="music-iframe-container">
                    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" 
                            width="330" height="450" loading="lazy"
                            sandbox="allow-scripts allow-same-origin allow-popups allow-forms allow-top-navigation"
                            referrerpolicy="no-referrer-when-downgrade"
                            allow="autoplay; encrypted-media; fullscreen"
                            src="https://music.163.com/outchain/player?type=0&id=6922474495&auto=0&height=430">
                    </iframe>
                    <div class="music-fallback" style="display: none;">
                        <p>音乐播放器加载失败？</p>
                        <a href="https://music.163.com/playlist?id=6922474495" target="_blank" rel="noopener">
                            点击前往网易云音乐播放
                        </a>
                    </div>
                </div>
            </div>
        `;
        return playerHtml;
    }
    
    // 初始化音乐播放器
    function initMusicPlayer() {
        // 如果已存在，不重复创建
        if (document.getElementById(MUSIC_PLAYER_ID)) {
            return;
        }
        
        // 创建播放器容器
        const playerContainer = document.createElement('div');
        playerContainer.innerHTML = createMusicPlayer();
        
        // 添加到body末尾，确保不被Pjax影响
        document.body.appendChild(playerContainer.firstElementChild);
        
        // 确保播放器不会被Pjax替换
        const player = document.getElementById(MUSIC_PLAYER_ID);
        if (player) {
            player.setAttribute('data-pjax-ignore', 'true');
            // 播放器默认为最小化状态
            player.classList.add('minimized');
            
            // 检测iframe是否加载成功
            setTimeout(() => {
                checkIframeLoad();
            }, 3000);
        }
    }
    
    // 检测iframe加载状态
    function checkIframeLoad() {
        const iframe = document.querySelector('.music-iframe-container iframe');
        const fallback = document.querySelector('.music-fallback');
        
        if (!iframe || !fallback) return;
        
        let loadTimeout;
        let hasLoaded = false;
        
        // 监听iframe加载成功事件
        iframe.addEventListener('load', function() {
            hasLoaded = true;
            clearTimeout(loadTimeout);
            console.log('Music player iframe loaded successfully');
        });
        
        // 监听iframe加载错误事件
        iframe.addEventListener('error', function() {
            console.warn('Music player iframe failed to load');
            showFallback();
        });
        
        // 设置超时检测 - 如果超时还没加载成功，显示备用方案
        loadTimeout = setTimeout(() => {
            if (!hasLoaded) {
                console.warn('Music player iframe loading timeout');
                showFallback();
            }
        }, 8000); // 增加超时时间到8秒，给iframe更多加载时间
        
        function showFallback() {
            clearTimeout(loadTimeout);
            if (fallback) {
                iframe.style.display = 'none';
                fallback.style.display = 'block';
            }
        }
    }
    
    // 音乐图标旋转控制
    let musicIconRotating = false;
    let longPressTimer = null;
    let rotationToggleTimeout = null;
    
    // 切换音乐图标旋转状态
    function toggleMusicRotation() {
        // 防抖：避免快速重复调用
        if (rotationToggleTimeout) {
            console.log('🎵 Toggle rotation debounced - ignoring repeated call');
            return;
        }
        
        const toggleBtn = document.querySelector('.music-toggle-btn');
        if (!toggleBtn) {
            console.warn('🎵 Toggle button not found');
            return;
        }
        
        musicIconRotating = !musicIconRotating;
        console.log('🎵 Toggling rotation state to:', musicIconRotating);
        
        if (musicIconRotating) {
            toggleBtn.classList.add('rotating');
            localStorage.setItem('musicIconRotating', 'true');
            console.log('🎵 Rotation enabled');
        } else {
            toggleBtn.classList.remove('rotating');
            localStorage.setItem('musicIconRotating', 'false');
            console.log('🎵 Rotation disabled');
        }
        
        // 设置防抖延迟，500ms内不允许再次调用
        rotationToggleTimeout = setTimeout(function() {
            rotationToggleTimeout = null;
        }, 500);
    }
    
    // 恢复音乐图标旋转状态
    function restoreMusicRotationState() {
        const toggleBtn = document.querySelector('.music-toggle-btn');
        if (!toggleBtn) return;
        
        const savedState = localStorage.getItem('musicIconRotating');
        if (savedState === 'true') {
            musicIconRotating = true;
            toggleBtn.classList.add('rotating');
        }
    }
    
    // 添加音乐图标交互事件
    function addMusicIconEvents() {
        const toggleBtn = document.querySelector('.music-toggle-btn');
        if (!toggleBtn) return;
        
        // 防止重复绑定事件
        if (toggleBtn.hasAttribute('data-events-bound')) {
            console.log('🎵 Events already bound, skipping...');
            return;
        }
        toggleBtn.setAttribute('data-events-bound', 'true');
        console.log('🎵 Binding events to music toggle button');
        
        // 桌面端右键事件（仅在非触摸设备上启用）
        if (!('ontouchstart' in window) && !navigator.maxTouchPoints) {
            toggleBtn.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                console.log('🎵 Right click detected - toggling rotation');
                toggleMusicRotation();
            });
        } else {
            console.log('🎵 Touch device detected - disabling right click rotation');
        }
        
        // 移动端长按事件
        let touchStartTime = 0;
        let touchStartX = 0;
        let touchStartY = 0;
        let isLongPressing = false;
        
        toggleBtn.addEventListener('touchstart', function(e) {
            touchStartTime = Date.now();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            isLongPressing = false;
            
            console.log('🎵 Touch start - starting long press timer (1s)');
            
            longPressTimer = setTimeout(function() {
                console.log('🎵 Long press triggered - toggling rotation');
                isLongPressing = true;
                // 标记为长按，避免触发点击
                toggleBtn.setAttribute('data-long-pressed', 'true');
                toggleMusicRotation();
                // 触觉反馈（如果支持）
                if (navigator.vibrate) {
                    navigator.vibrate(50);
                }
            }, 1000); // 改为1秒
        });
        
        toggleBtn.addEventListener('touchend', function(e) {
            const touchDuration = Date.now() - touchStartTime;
            console.log('🎵 Touch end - duration:', touchDuration + 'ms', 'isLongPressing:', isLongPressing);
            
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
            
            // 如果是长按，阻止后续的点击事件
            if (e.target.getAttribute('data-long-pressed') === 'true') {
                e.preventDefault();
                e.stopPropagation();
                e.target.removeAttribute('data-long-pressed');
            }
        });
        
        toggleBtn.addEventListener('touchmove', function(e) {
            // 计算移动距离，只有移动距离超过阈值才取消长按
            const moveX = Math.abs(e.touches[0].clientX - touchStartX);
            const moveY = Math.abs(e.touches[0].clientY - touchStartY);
            const moveDistance = Math.sqrt(moveX * moveX + moveY * moveY);
            
            // 允许10像素的移动误差，避免轻微手抖就取消长按
            if (moveDistance > 10) {
                console.log('🎵 Touch move too far - canceling long press. Distance:', moveDistance);
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
            }
        });
        
        // 添加额外的防选中事件
        toggleBtn.addEventListener('selectstart', function(e) {
            e.preventDefault();
            return false;
        });
        
        toggleBtn.addEventListener('dragstart', function(e) {
            e.preventDefault();
            return false;
        });
        
        // 页面不可见时清理长按计时器
        document.addEventListener('visibilitychange', function() {
            if (document.hidden && longPressTimer) {
                console.log('🎵 Page hidden - clearing long press timer');
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });
        
        // 页面失去焦点时清理长按计时器
        window.addEventListener('blur', function() {
            if (longPressTimer) {
                console.log('🎵 Window blur - clearing long press timer');
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });
        
        // 恢复旋转状态
        restoreMusicRotationState();
        
        // 为最小化按钮添加移动端优化
        const minimizeBtn = document.querySelector('.music-minimize-btn');
        if (minimizeBtn) {
            // 防止最小化按钮的文本选择
            minimizeBtn.addEventListener('selectstart', function(e) {
                e.preventDefault();
                return false;
            });
            
            minimizeBtn.addEventListener('dragstart', function(e) {
                e.preventDefault();
                return false;
            });
        }
    }
    
    // 切换播放器显示/隐藏
    window.toggleMusicPlayer = function() {
        const player = document.getElementById(MUSIC_PLAYER_ID);
        if (!player) return;
        
        if (player.classList.contains('minimized')) {
            player.classList.remove('minimized');
            localStorage.setItem('musicPlayerMinimized', 'false');
        } else {
            player.classList.add('minimized');
            localStorage.setItem('musicPlayerMinimized', 'true');
        }
    };
    

    
    // 最小化播放器
    window.minimizeMusicPlayer = function() {
        const player = document.getElementById(MUSIC_PLAYER_ID);
        if (!player) return;
        
        player.classList.add('minimized');
        localStorage.setItem('musicPlayerMinimized', 'true');
    };
    

    
    // 页面加载时初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            initMusicPlayer();
            setTimeout(addMusicIconEvents, 100);
        });
    } else {
        initMusicPlayer();
        setTimeout(addMusicIconEvents, 100);
    }
    
    // Pjax页面切换后重新初始化（如果播放器被意外移除）
    document.addEventListener('pjax:complete', function() {
        setTimeout(function() {
            const existingPlayer = document.getElementById(MUSIC_PLAYER_ID);
            if (!existingPlayer) {
                initMusicPlayer();
                setTimeout(addMusicIconEvents, 100);
            } else {
                // 如果播放器存在但事件可能丢失，重新绑定
                const toggleBtn = existingPlayer.querySelector('.music-toggle-btn');
                if (toggleBtn && !toggleBtn.hasAttribute('data-events-bound')) {
                    console.log('🎵 Re-binding events after Pjax navigation');
                    setTimeout(addMusicIconEvents, 100);
                }
            }
        }, 100);
    });
    
})();


</script>

<script>
/* Taboola 广告过滤脚本 - 动态移除广告元素 */
(function() {
  'use strict';
  
  console.log('🚫 启动 Taboola 广告过滤器...');
  
  // 需要过滤的选择器
  const adSelectors = [
    '#taboola-livere',
    'div[id*="taboola"]',
    'div[class*="trc_related_container"]',
    'div[class*="tbl-trecs-container"]',
    'div[class*="trc_spotlight_widget"]',
    'div[data-placement-name*="1020_29982"]',
    'div[class*="trc_rbox_container"]',
    'div[class*="trc_rbox"]',
    'div[class*="thumbnails-b"]',
    'div[class*="trc-content-sponsored"]',
    'a[href*="taboola.com"]',
    'a[href*="popup.taboola.com"]',
    'figure[id*="taboola"]',
    'div[class*="videoCube"]',
    'div[class*="trc_spotlight_item"]',
    'div[data-item-syndicated="true"]',
    '[class*="taboola"]',
    '[id*="taboola"]',
    '[data-placement-name]',
    '.trc_related_container',
    '.tbl-trecs-container',
    '.trc_spotlight_widget',
    '.trc_elastic',
    '.trc_elastic_thumbnails-b'
  ];
  
  // 移除广告元素的函数
  function removeAds() {
    let removedCount = 0;
    
    adSelectors.forEach(function(selector) {
      try {
        const elements = document.querySelectorAll(selector);
        elements.forEach(function(element) {
          if (element && element.parentNode) {
            element.parentNode.removeChild(element);
            removedCount++;
          }
        });
      } catch (error) {
        // 忽略选择器错误
      }
    });
    
    // 额外检查包含特定文本的元素
    const textPatterns = ['您可能喜歡的內容', 'by Taboola', 'Taboola'];
    textPatterns.forEach(function(pattern) {
      try {
        const walker = document.createTreeWalker(
          document.body || document.documentElement,
          NodeFilter.SHOW_TEXT,
          null,
          false
        );
        
        const textNodes = [];
        let node;
        while (node = walker.nextNode()) {
          if (node.textContent && node.textContent.includes(pattern)) {
            textNodes.push(node);
          }
        }
        
        textNodes.forEach(function(textNode) {
          let parentElement = textNode.parentElement;
          // 向上查找可能的广告容器
          while (parentElement && parentElement !== document.body) {
            if (parentElement.className && 
                (parentElement.className.includes('trc_') || 
                 parentElement.className.includes('taboola') ||
                 (parentElement.id && parentElement.id.includes('taboola')))) {
              if (parentElement.parentNode) {
                parentElement.parentNode.removeChild(parentElement);
                removedCount++;
                break;
              }
            }
            parentElement = parentElement.parentElement;
          }
        });
      } catch (error) {
        // 忽略错误，继续处理其他模式
      }
    });
    
    if (removedCount > 0) {
      console.log('🗑️  成功移除', removedCount, '个广告元素');
    }
    
    return removedCount;
  }
  
  // 立即执行一次
  setTimeout(removeAds, 1000);
  
  // 页面加载完成后执行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      setTimeout(removeAds, 500);
    });
  } else {
    setTimeout(removeAds, 500);
  }
  
  // 窗口加载完成后执行
  window.addEventListener('load', function() {
    setTimeout(removeAds, 1000);
  });
  
  // 使用 MutationObserver 监控 DOM 变化
  if (typeof MutationObserver !== 'undefined') {
    const observer = new MutationObserver(function(mutations) {
      let shouldCheck = false;
      
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          // 检查是否有新添加的节点包含广告相关的类名或ID
          for (let i = 0; i < mutation.addedNodes.length; i++) {
            const node = mutation.addedNodes[i];
            if (node.nodeType === Node.ELEMENT_NODE) {
              const nodeStr = node.outerHTML || '';
              if (nodeStr.includes('taboola') || 
                  nodeStr.includes('trc_') || 
                  nodeStr.includes('您可能喜歡的內容')) {
                shouldCheck = true;
                break;
              }
            }
          }
        }
      });
      
      if (shouldCheck) {
        setTimeout(removeAds, 100);
      }
    });
    
    // 开始观察
    if (document.body) {
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      // 如果 body 还没有准备好，等待一下
      setTimeout(function() {
        if (document.body) {
          observer.observe(document.body, {
            childList: true,
            subtree: true
          });
        }
      }, 100);
    }
    
    console.log('👁️  DOM 变化监控器已启动');
  }
  
  // 定期检查（每5秒）
  setInterval(function() {
    removeAds();
  }, 5000);
  
  // Pjax 页面切换后也执行广告过滤
  document.addEventListener('pjax:success', function() {
    setTimeout(removeAds, 500);
  });
  
  console.log('✅ Taboola 广告过滤器初始化完成');
})();
</script>
