<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谁把钱丢了</title>
  
  <subtitle>Everyday struggle</subtitle>
  <link href="https://jmyblog.top/atom.xml" rel="self"/>
  
  <link href="https://jmyblog.top/"/>
  <updated>2022-01-24T11:50:16.323Z</updated>
  <id>https://jmyblog.top/</id>
  
  <author>
    <name>谁把钱丢了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我注册了两个交友小程序(下)</title>
    <link href="https://jmyblog.top/looking-for-the-one-er-gou/"/>
    <id>https://jmyblog.top/looking-for-the-one-er-gou/</id>
    <published>2021-12-10T08:42:30.000Z</published>
    <updated>2022-01-24T11:50:16.323Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/i-want-u.jpeg"><h2 id="初印象"><a href="#初印象" class="headerlink" title="初印象"></a>初印象</h2><div class="note info"><p>二狗平台的全称是「二狗单身青年自救」平台，logo是一只狗子。<br>在朋友推荐之前，我并没有听说过，也没见过广告之类，不过这个名字非常接地气了，单身青年不就是单身狗吗？而且「自救」用在这里简直精准，所以这个小程序听起来像社恐青年找对象的福音。</p></div><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><p>还是填好个人信息之后，进入小程序。<br>二狗的4个菜单栏和青藤之恋差不多，但界面设计多了一丝萌感，而且看到的功能点很多，不过一下子推给用户，反而让人有一种眼花缭乱的感觉。</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>滑动分页，这个菜单目的只有一个，用各种方式认识男嘉宾。</p><h4 id="系统推送"><a href="#系统推送" class="headerlink" title="系统推送"></a>系统推送</h4><p>系统每天推荐5个男嘉宾，觉得合适可以加好友、关注，或者感觉自己配不上的话还可以推荐他上墙(下文介绍)：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou4.jpg" alt="系统推送"><h4 id="单身广场"><a href="#单身广场" class="headerlink" title="单身广场"></a>单身广场</h4><p>此外还有进入「单身广场」的入口，方便寻找心仪的男嘉宾，是我的吃瓜场地1：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou2.jpg" alt="单身广场"><p>可以筛选地区和性别，这里我就要吐槽一下，地区选项很少，很多城市都归类在其它里面，看起来很不方便，希望未来可以提供更多的城市筛选。</p><h4 id="推荐上墙"><a href="#推荐上墙" class="headerlink" title="推荐上墙"></a>推荐上墙</h4><p>这里展示用户所在地区，每天被推荐次数最多的10个男嘉宾，是我的吃瓜场地2:</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou5.jpg" height="400" width="200" alt="推荐上墙"><h4 id="纸飞机"><a href="#纸飞机" class="headerlink" title="纸飞机"></a>纸飞机</h4><p>也可以通过发纸飞机的方式认识男嘉宾，不过这个是匿名的，收到纸飞机的人只能看到大概的信息，如果聊的投缘可以解锁看资料加好友什么的：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou6.jpg" alt="纸飞机"><p>有次想加一个小哥哥，但是狗粮(下文介绍)不够了，我想问大家有什么方式可以拿到狗粮，所以发了一个纸飞机，结果发现了新大陆，原来不加好友也能这样聊起来(上图右)。</p><h4 id="星球聊天室"><a href="#星球聊天室" class="headerlink" title="星球聊天室"></a>星球聊天室</h4><p>这里是一些情感话题的讨论直播间，没去过。</p><h3 id="星球"><a href="#星球" class="headerlink" title="星球"></a>星球</h3><p>这里和青藤之恋的「村口」页面差不多，展示嘉宾们发的动态，简单来说就是大型吃瓜现场：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou7.jpg" height="400" width="200" alt="星球"><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>可以看到好友申请、聊天列表，和一些系统消息，是故事开始的地方，尤其是聊天页面，有已读功能，聊天文本框的place holder也很耐人寻味「主动一点，让故事发生」哈哈哈哈，可谓是用心良苦了：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou10.jpg" alt="消息"><p>不过这个文本输入框有一些可以优化的点，它不能换行，而且文本多的时候也不能滑动编辑，就很不好用。</p><h3 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h3><p>个人信息和系统设置页，能看到最近来访和关注自己的嘉宾，啊，这里叫粉丝，也可以在匹配设置里指定系统推送男嘉宾的偏好(不用充会员！！！)，还有一个三观问答，男嘉宾申请加好友的时候需要回答问题：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou9.jpg" height="400" width="200" alt="我的"><p>在消息页面通过男嘉宾的交友申请后，我们就会互关，所以刚开始我只关注了跟我聊天的男嘉宾。后来我又去单身广场和上墙的男嘉宾里关注了好多小哥哥，他们有的会回关，有的也会加我好友，因为就算互关了也不能直接聊起来，还是得先发起交友申请。</p><p>再后来，通过吃瓜，我关注的小哥哥越来越多，我开始发现这个关注也不一定是喜欢人家，感觉跟关注明星的粉丝心理差不多，就是赞一个的意思。</p><p>这里也可以设置自己的情感状态，非常细节了：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou11.jpg" alt="情感状态"><p>最后就是个人信息，还是和青藤之恋差不多，需要传照骗，做学历和身份认证，比青藤多了一个工作认证，非常靠谱了；还有个人基本信息(昵称/年龄/星座/身高/职业)，二狗这里不需要展示收入，可能还是想少一些物质吧，很赞！</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou12.jpg" alt="个人信息"><p>再然后就是一些自我介绍、兴趣爱好、家庭背景之类的描述，以上也都需要系统审核，不过和青藤之恋的打分评价不同，这里是分青铜、白银、黄金三个等级来评价用户信息真实性和完整度，有种打游戏冲关的感觉，所以我很快就到了黄金哈哈哈<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><h2 id="狗粮"><a href="#狗粮" class="headerlink" title="狗粮"></a>狗粮</h2><p>青藤之恋有「青藤币」，二狗平台也有「狗粮」，先从名字上来看就很接地气了，对比不适合穷逼的青藤币，狗粮的获取则非常容易：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/ergou13.jpg" alt="狗粮"><ul><li>先说获取：首先注册的时候就会送狗粮红包200+，然后之后填个人信息、关注公众号也会送狗粮200+，再加上每日签到，其实就已经够用了。</li><li>然后花费：解锁粉丝和访客都只需要20狗粮，解锁匿名动态也只需要10狗粮，加好友是花费狗粮最多的操作(非常感谢加我的男嘉宾了)，但也就100狗粮，所以完全可以满足我找对象和吃瓜的需求。</li></ul><p>而且就我发纸飞机调研得到的结果来看，大家都觉得狗粮够用，部分用户还说自己狗粮都用不完。。。，然后我尝试购买狗粮，结果人家直接给我一个弹窗(上图2)提示买不了，太实诚了。</p><hr><div class="note primary"><p>以上就是我在「青藤之恋」和「二狗」平台小程序的体验，hummm，还有一些职业病，因为感觉写成了软件测评的样子🙈，总体来看，我是比较看好狗子这个平台的(写这么多是不是得要点广告费哈哈哈哈)，所以我遇到的男嘉宾基本上都来自这个平台，接下来的博客会讲我和他们的故事。</p></div><p>祝我脱单成功。</p><hr><p>一个多月过去了，由于西安的疫情，寻找男嘉宾大计进展缓慢，没有太多故事可以更新，所以暂时搁置这个系列，等我找到了男嘉宾，或者像那个小红书的博主一样放弃了，再来回顾我和他们的故事吧，我希望我的结局是前者🙈</p>]]></content>
    
    
    <summary type="html">二狗单身青年自救平台，真.单身狗福音。</summary>
    
    
    
    <category term="寻找男嘉宾" scheme="https://jmyblog.top/categories/%E5%AF%BB%E6%89%BE%E7%94%B7%E5%98%89%E5%AE%BE/"/>
    
    
    <category term="二狗单身青年自救平台" scheme="https://jmyblog.top/tags/%E4%BA%8C%E7%8B%97%E5%8D%95%E8%BA%AB%E9%9D%92%E5%B9%B4%E8%87%AA%E6%95%91%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="相亲" scheme="https://jmyblog.top/tags/%E7%9B%B8%E4%BA%B2/"/>
    
  </entry>
  
  <entry>
    <title>我注册了两个交友小程序(上)</title>
    <link href="https://jmyblog.top/looking-for-the-one-qing-teng/"/>
    <id>https://jmyblog.top/looking-for-the-one-qing-teng/</id>
    <published>2021-12-02T08:42:30.000Z</published>
    <updated>2022-01-24T11:50:16.324Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/i-want-u.jpeg"><h2 id="一些缘起"><a href="#一些缘起" class="headerlink" title="一些缘起"></a>一些缘起</h2><h3 id="来自老母亲的担忧"><a href="#来自老母亲的担忧" class="headerlink" title="来自老母亲的担忧"></a>来自老母亲的担忧</h3><p>前段时间，老母亲又给我发了一个她中意的男嘉宾让我去认识认识。<br>换作从前，我一定拒绝，因为我一直不喜欢这种目的性很强的相亲活动，但最近几年经过同事和朋友的劝(xi)说(nao)，感觉这也是认识别人的一种方式，所以也没那么抗拒了。<br>由于老母亲和我一直都互相嫌弃彼此的品味，所以每次她推荐的男嘉宾看起来总有一些跟我不太搭调，这次也不例外。<br>在我的追问下，她交代了自己在用的一个相亲小程序:</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/xun-yuan-xiao-cheng-xu.jpg" width="200" height="400" alt="寻缘"><p>看到这充满土味的「寻缘」页面，我突然觉得把找对象这件事交给老母亲，是一个不太明智的选择，为了证明自己更专业，我决定亲自寻找男嘉宾🙈</p><h3 id="朋友的推荐"><a href="#朋友的推荐" class="headerlink" title="朋友的推荐"></a>朋友的推荐</h3><p>但是找对象这事，我总不能出门随便抓一个小哥哥问人家需不需要女朋友吧，所以还是首选线上平台，于是我打开了两个鼎鼎大名的小程序：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/others.jpg" width="400" height="440" alt="世纪佳缘&amp;珍爱网"><p>果然没有最土味，只有更土味，甚至世纪佳缘还给我报了一个亲切的后端错误QAQ。<br>连最有名的两个交友平台都这样，让我有些emo，正在我一筹莫展的时候，一个非常靠谱的朋友推荐给我两个交友小程序，「青藤之恋」和「二狗」平台，她说已经面基了几个小哥哥，感觉还不错，于是正在搬砖的我连忙摸鱼注册好了这俩小程序，故事就这样开始了。</p><h3 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h3><p>我在找对象的时候，朋友分享了一个小红书的视频，里面的博主(173的林铁柱)复盘了自己相亲多年，和二十几号男嘉宾的故事，视频中博主真情流露，字字珠玑，多少让我有一些共鸣。<br>所以我也想把自己寻找男嘉宾的过程复盘一下，但我没勇气录视频，还是用文字描述吧，然后就有了这个系列。</p><h2 id="青藤之恋"><a href="#青藤之恋" class="headerlink" title="青藤之恋"></a>青藤之恋</h2><p>啊，这个字体怎么有bug，人家叫「青藤之恋」。。。<br>ok anyway，对青藤之恋的第一印象，来自它在知乎投放的广告，上边说「老实忠厚的程序员」，我一整个大离谱，都2021年了，还在宣传程序员老实忠厚吗<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，但是朋友推荐的，我还是去看看，所以搜索添加了小程序。</p><h3 id="初印象"><a href="#初印象" class="headerlink" title="初印象"></a>初印象</h3><p>首先，青藤之恋的页面设计非常简约，小清新的感觉，终于没有土气了，再然后，我开始注册，选择性别，年龄什么的，让我印象深刻的是注册的时候，它默认选中的出生年份是95年，而且是12.1：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/qingteng2.jpg" width="200" height="440" alt="默认95年"><p>我大受震撼，现在找对象年龄已经这么卷了吗？直接默认95后可还行，害，老了老了。</p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>所有信息填好之后，就进入了小程序：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/qingtengmenus.jpg" alt="青藤菜单栏"><p>小程序有四个菜单栏：</p><ul><li>「寻觅」：系统每天中午12点会推荐10个男嘉宾，都分页展示在这，点 X 表示无感然后会切换到下一个男嘉宾，💗表示喜欢，左上角可以回看推荐过的男嘉宾</li><li>「消息」：互相喜欢的嘉宾会配对成功，然后可以在这里聊天发消息(注意这里是一个伏笔)</li><li>「村口」：展示嘉宾们发的唠唠(跟朋友圈差不多)，还有一些情感话题可以讨论</li><li>「我的」：个人信息和系统设置页，点击头像可以查看个人资料，也可以编辑自己的信息，还能看到最近来访和喜欢自己的嘉宾。</li></ul><h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><p>青藤之恋需要添加的个人信息如下图：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/qtInfo.jpg" alt="青藤个人信息"><p>主要是一些照骗，学历和身份认证(认证之后会在「我的」页面加上已认证标签)，还有个人基本信息(昵称/年龄/星座/身高/职业/收入等等)，以及一些自我介绍、兴趣爱好、感情观、理想型之类的描述。</p><p>系统会对这些信息进行审核，然后对其真实和充足性打分，之后在「我的」页面点击个人头像，就可以预览自己的信息页(上图最右图)。</p><p>因为我是真诚找对象，所以很积极的做了双重认证，也边抄作业边完善了这些描述信息，最后系统给我打出了95的高分，还给我提供了7日优先推荐：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/7days.jpg" width="200" height="440" alt="7日优先推荐"><p>hummm…大概这样，一切都是这么的顺利，所以开始的时候我是比较喜欢这个平台的，因为大道至简的功能展示和简约的界面设计比较合我的心意，刚开始推送的男嘉宾也还好。</p><h3 id="青藤币和青藤会员"><a href="#青藤币和青藤会员" class="headerlink" title="青藤币和青藤会员"></a>青藤币和青藤会员</h3><p>一段时间之后，事情开始微妙了起来。<br>比如我想解锁喜欢我的男嘉宾/来访者，或者查看更多男嘉宾，我都需要一个东西：<strong>青藤币</strong>。<br>再后来，系统给我推荐的男嘉宾越来越「优质」，甚至看这个成了我每天的快乐源泉，所以我想筛选一下推送偏好，这个时候，我又需要一个东西：<strong>青藤会员</strong>。</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/qtMoney.jpg" alt="青藤币和青藤会员"><p>作为一个穷逼，青藤会员我就不想了，重点关注青藤币。</p><p>可盘算了半天，上图免费获得青藤币的方式，我只能做到「签到」，但是每日签到只有3个青藤币，可光解锁一个男嘉宾就需要100个青藤币，差距如此悬殊，后来我又抖着手点了超级喜欢想赚点儿币，结果就连超级喜欢别人这个操作，本身也要60个青藤币。。。</p><p>所以系统贴心的提供了购买青藤币的入口，又把我这样的穷逼排除在外。我终于明白了，青藤之恋想表达的意思就7个字：<strong>没钱就别找对象</strong>。</p><p>在这里非常感谢目前为止「喜欢」我的100多个男嘉宾，不是我不「喜欢」你们，而是我没钱。</p><h3 id="终于聊起来的消息页面"><a href="#终于聊起来的消息页面" class="headerlink" title="终于聊起来的消息页面"></a>终于聊起来的消息页面</h3><p>情况一度十分尴尬，就这样过了几天，最后我想着注销账号吧，找不到对象也不能被别人当作赚钱的工具啊，那也太惨了。</p><p>所以我又打开了青藤之恋小程序，寻找注销账号的入口，顺便最后看看系统推给我的「优质」男嘉宾，没想到这次竟然有几个不错的，我寻思着自己反正要走了，最后点几个喜欢吧，然后：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/like1.jpg" width="200" height="440" alt="第一个相互喜欢"><p>原来这个男嘉宾之前也「喜欢」过我，相互「喜欢」，所以我们就能聊天了！！！这是啥？这就是缘分呐！爱情这不就来了吗？于是怀着十分激动的心情，我主动给男嘉宾发了一条消息，1分钟之后：</p><img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/looking-for-the-one/like3.jpg" width="200" height="440" alt="啊哈哈哈哈嗝"><p>男嘉宾取消了喜欢。<br>他取消了喜欢。<br>喜欢。<br>欢<span class="emoji" alias="broken_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8">💔</span><br>我也有今天<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，所以男嘉宾是觉得自己之前瞎了眼吗？到今天我都还在思考这个问题，但是无解。<br>后来我又通过这种方式成功添加了几个男嘉宾，而且没有被取消喜欢，他们的故事我会在后续的博客中讲到。</p><p>祝我脱单成功。</p>]]></content>
    
    
    <summary type="html">青藤之恋，没钱就别找对象。</summary>
    
    
    
    <category term="寻找男嘉宾" scheme="https://jmyblog.top/categories/%E5%AF%BB%E6%89%BE%E7%94%B7%E5%98%89%E5%AE%BE/"/>
    
    
    <category term="相亲" scheme="https://jmyblog.top/tags/%E7%9B%B8%E4%BA%B2/"/>
    
    <category term="青藤之恋" scheme="https://jmyblog.top/tags/%E9%9D%92%E8%97%A4%E4%B9%8B%E6%81%8B/"/>
    
  </entry>
  
  <entry>
    <title>Github+jsDelivr创建个人图床</title>
    <link href="https://jmyblog.top/blog-picture-service/"/>
    <id>https://jmyblog.top/blog-picture-service/</id>
    <published>2021-11-19T01:49:24.000Z</published>
    <updated>2022-01-24T11:50:16.321Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN@1.1/images/blog-picture-service/1.jpg"><h2 id="关于图床"><a href="#关于图床" class="headerlink" title="关于图床"></a>关于图床</h2><p>俗话说「无图言X」，图片就相当于博客的灵魂，非常重要。</p><p>在Hexo博客里插入图片，一般用html和markdown两种格式，指定图片路径之后才能展示在页面上，这里又有两种方式：</p><ul><li>图片保存在Github代码仓库，直接指定仓库里的图片路径来访问。</li><li>图片上传到「图床」，获取图片外链，用外链来展示图片。</li></ul><p>Github单个仓库的容量限制在1G左右，所以把图片保存在代码仓库，不但占用资源，而且由于GithubPages是国外服务，在国内访问加载慢，容易导致图片挂掉。</p><p>所以用图床服务，是明智的选择。一个好的图床，应该保证图片在国内外访问的稳定性，而且还能做一个图片仓库，保存博客的图片，起到文件备份的作用。</p><p>然而，同时满足这两个要求的图床，都是收费的，而且要做域名备案，比如七牛云等；作为一个怕麻烦的穷逼，这显然不是我的option，年少无知的时候用过七牛云，没想到用的只是一个测试外链，结果期限一到图片全挂了，真是血的教训。</p><p>之后我一直都用的免费图床，比如微博图床、PicGo等等，但各有各的槽点，写这篇文章之前我用的是 <a href="https://sm.ms/">SM.MS</a>，使用很方便，虽然加载速度尚可，可有时图片也会挂，而且它无法做文件备份，所以一直以来我的博客图片都像在裸奔，十分没有保障。</p><p>今天终于有闲暇再折腾图床了，然后我就发现了Github+jsDelivr的图床创建方式。</p><h2 id="Github-jsDelivr"><a href="#Github-jsDelivr" class="headerlink" title="Github+jsDelivr"></a>Github+jsDelivr</h2><ul><li>Github: 谁人不知</li><li><a href="https://www.jsdelivr.com/">jsDelivr</a>: 一个开源、免费的CDN工具</li></ul><div class="note info"><p>简而言之，就是说在Github上创建一个专门用来保存博客图片的仓库，把图片的github链接传给jsDelivr，生成一个CDN图片外链，然后再插入到博客里。<br>这样，就生成了自己的图床，图片上传到github，文件备份可以放心了；访问图片时有jsDelivr做CDN加速，速度也ok了，它不香吗？<br>虽然图片还是保存在github仓库，有1个G的容量限制，但且不说博客图片啥时候才能到1个G，就算1个G，还可以再新建一个github库来存。</p></div><p>具体做法请直接看参考文章第一篇，人说的挺清楚了，我就不啰嗦了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/76951130">免费CDN：jsDelivr+Github 使用方法</a></li><li><a href="https://www.jianshu.com/p/a200f116c3ce">一次艰难的图床选择经历(MWeb+PicGo+Github)</a></li></ul>]]></content>
    
    
    <summary type="html">啧，太香了。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="图床" scheme="https://jmyblog.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="Github" scheme="https://jmyblog.top/tags/Github/"/>
    
    <category term="jsDelivr" scheme="https://jmyblog.top/tags/jsDelivr/"/>
    
    <category term="CDN" scheme="https://jmyblog.top/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>转载：我在ThoughtWorks的头三年</title>
    <link href="https://jmyblog.top/threes-years-in-tw/"/>
    <id>https://jmyblog.top/threes-years-in-tw/</id>
    <published>2021-10-24T09:07:41.000Z</published>
    <updated>2022-01-24T11:50:16.326Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/Summyj/blogImageCDN/images/threes-years-in-tw/1.png"><div class="note info"><p>前段时间，博主 <a href="https://jmyblog.top/thoughts-about-qa-role/">深刻思考</a> 了QA角色，暗叹饭碗不稳之余，也设想了下一步的实践。突然发现之前看过的这篇文章与我的设想不谋而合，所以忍不住转载之，好时时自省。<br>作者是 <a href="https://github.com/JulyShi">七姑娘</a> ，同公司大佬，之前有收藏过她的博客来着，可是访问不了了，这里是 <a href="https://mp.weixin.qq.com/s/5SyFjxymvevAvX67TSjjsg">原文链接</a> 。</p></div><hr><p>几天前，同事小Y发来微信。</p><pre><code>“嗨，你参加过AWS考试吗？你说我要不要先考一下AWS从业者证书？” 小Y问道。“你对AWS证书了解吗？” 我说。“不是很了解。” 小Y回答。“建议你先做做功课再做决定哈，了解清楚在考这个证书的过程中你能学到什么？证书有什么作用？你为什么在当下选择考它而不是别的？”“不过，你为什么忽然想要考AWS证书呢？” 我问道。“我看到XX 和XX都在考，所以想一起考。” 小Y答。</code></pre><p>小Y是2019年加入公司的毕业生QA，和大多数新人一样好学上进，眼里充满对知识的渴望和对大神的敬仰，但缺乏目标、东奔西撞。这不禁让我想到了自己。</p><p>2016年底，我加入ThoughtWorks，仿佛一脚跨进了知识爆炸的时代。面对琳琅满目的学习素材、开放的网络、分享型的组织文化、一张张打满鸡血的脸庞，我浑身充满干劲，但同时饱尝着能力进阶的压力和焦虑。于是，学会“如何提升自己”就成了我这几年研究的重要课题。</p><div class="note info"><p>第一年</p></div><p>作为一名QA加入公司，我要足够专业！这是我的立身之本。</p><p>我相信，能够给人带来机会的是自己的“长板”，但限制自己发展的往往是“短板”。所以，我首先纵观全局，把QA需要具备的技能都理清楚了，然后不断寻找自己当前“最短”的一块板来提升。我将这个过程称为 <strong>“短板学习法”</strong> 。</p><p>这样做的好处是：能力发展会比较均衡、不偏科；其次，一旦有了全局意识，即使从最细小的事情开始，大方向也始终保持一致，有序而不乱。</p><p>我用“精益价值树”给自己画了一个愿景，并细分出成为一名专业QA的必备技能。</p><img data-src="https://i.loli.net/2021/11/01/zlRE7i6fNqTStu8.png"><p>树的“投注”层就是我为了达成目标所需要提升的能力。要识别“短板”，首先要对每一项“投注”进行打分：</p><ul><li>0 - 表示你不具备这种技能</li><li>1 - 表示你能在别人指导下完成</li><li>2 - 表示你能独立完成</li><li>3 - 表示你能指导他人完成</li><li>4 - 表示你是这方面的专家，能去创造新的方法</li></ul><p>其中，得分最小的项就是我一定要提升的“短板”。假如有好几项得分相等且最低，我就会选择当前最容易实践的那一项，制定详细的学习举措。</p><p>“举措”非常重要，这决定了我最终能不能将提升计划落地。“举措”就是我要采取的具体行动，我习惯将理论与实际相结合。制定“举措”一定要考虑时间的投入。经过实践我发现，尽量不要在同一时间同时做3个以上的举措，时间的最小单位设定在2-3天最适宜。下图是我在提升自己API自动化测试时的举措，实践证明，这个“短板式学习法”很奏效。</p><img data-src="https://i.loli.net/2021/11/01/jOt5oyPxYiAS2LR.png"><div class="note info"><p>第二年</p></div><p>工作的第二年，我陆续遇到一些思维的瓶颈。</p><ul><li>我们发现了很多Bug，但开发进度非常紧张，Bug如何才能更好地排进迭代（估算与计划）</li><li>与团队探讨问题时，我的想法是正确的，可却无法说服别人（沟通）</li><li>每天睁开眼睛，眼前都是堆积如山的工作，但我却无法让团队成员分担（团队协作与培养他人）</li><li>在项目上临时客串了几个月BA，一起出差到客户现场挖掘需求。客户有一堆想要做的东西，而时间和成本都有限，大家讨论地非常激烈，而我如鲠在喉。太少面对客户的机会，让我觉得客户仿佛有‘尖牙利爪’，不知如何应对（自信、领域知识、MVP、痛点挖掘、愿景分析、引导技术、谈判技术）</li></ul><img data-src="https://i.loli.net/2021/11/01/FZ4PrcHmUh7TCGi.png"><p>为了打破这些思维的困境，我从公司内部找到好多资料来学习。</p><ul><li>参加公司BA系列培训，阅读BA基础必读书籍《用户故事与敏捷方法》、《用户故事地图》、《实例化需求》等。重新回顾自己客串BA时的全过程，反复推敲不足与待改进点</li><li>听了公司在“meia美啊”平台上公开的PM系列课程(搜索”ThoughtWorks”)，并挑选一些关键课程撰写个人感悟</li><li>参加公司的Tech Lead培训，学习角色认知、冲突管理、风险管理、影响力等等。并梳理自己工作中的典型案例，通过博客的方式，来记录自己的灵感和想法，如《你引导过一个窘迫的会议吗？》</li></ul><p>在学习的过程中，我意识到自己的学习动机来自于偶尔听到、看到或思考的一些课题，都是些零零散散的点，不够系统。因此，我需要按照一定的方式进行归类，构造出一个新的体系来。我将这个学习过程称为 <strong>“散点式学习法”</strong> 。</p><img data-src="https://i.loli.net/2021/11/01/y85EOiPuCrRBJqc.png"><p>我通过社区培训、数据、文章、思考、与大师交流等形式获得知识，然后将这些散点按照产品、需求、领域知识、通用技能4个维度进行归类。在散点图中，我用不同的颜色标记当前对知识的掌握程度，用距离中心的位置表示学习的优先级。</p><p>如此一来，每当遇到一个思维瓶颈，我就将它作为一个新的课题来研究。通过散点式学习法，我碎片化地积累了很多知识。</p><div class="note info"><p>第三年</p></div><p>工作的第三年，除了继续以QA的角色做交付项目之外，我还做了很多事情。</p><ul><li>我参与了一些售前的工作，开始了解到一个交付项目是怎么来的、标书是什么东西、打标是怎么回事、Proposal该怎么写</li><li>我参与到一些咨询的工作，也终于明白为什么做咨询的人看起来睿智、自信又侃侃而谈</li><li>我参与到招聘，一起来设计招聘需求；参与面试，寻找适合我们的人才；我组织面试官培训，让大家都来掌握面试的技巧</li><li>我学习管理自己的团队，让大家有归属感、有成长、有贡献</li></ul><p>在这些工作中，我不断提升自己的文案功底、优秀的视觉化能力、精准地分析问题能力、敏锐的洞察力、精确的表达能力、良好的归纳能力、卓越的沟通技巧。</p><p>学到的知识越多，就越需要归纳总结。不然就很容易变成“这也会，那也会；但这也不熟，那也不精”。</p><img data-src="https://i.loli.net/2021/11/01/gqt9oHl6h2wZmSR.png"><p>我将自己的技能归纳为三层：</p><ul><li>最里面是“核心技能”层：核心技能是我当前的立身之本。我作为一名QA，专业QA需要的技能及优秀素质就是我需要持续深耕的。我要严格要求自己，切不可3分钟热度</li><li>中间是“拓展技能”层：拓展技能层是我在角色周边获取的技能，它能帮助我突破瓶颈，站在更广阔的视野去思考；也能帮助我寻找更多的发展途径</li><li>最外层是“战略技能”层：这里的技能不受角色限制，不管你是一名QA，还是未来有一天你会成为一位像马爸爸一样的人，你都需要具备这些技能。随着职位越高，做的事情越复杂，你对“战略技能”的掌握就要更深入。“战略技能”让我们充满无限可能</li></ul><p>这是我在ThoughtWorks的头三年关于个人提升的理解，未来的三年，又将会是怎样的呢？</p><hr><p>写在最后：</p><p>电影《一代宗师》里宫老爷子说，习武之人有三个阶段：见自己，见天地，见众生。</p><ul><li>见自己，就是认识自己、了解自己，知道自己擅长学习什么武功</li><li>见天地，就是见识各门各派武学高手，知道自己所处的位置，这样才能日益精进</li><li>见众生，就是“普度众生”，让更多人学习这门武学，这样才能将其传承下去</li></ul><p>其实这不仅仅是武术传承，个人技能提升又何尝不是如此。你品、你细品……</p>]]></content>
    
    
    <summary type="html">干货满满的QA打怪升级指南。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="职业规划" scheme="https://jmyblog.top/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>公司上市了</title>
    <link href="https://jmyblog.top/tw-nasdaq-listed/"/>
    <id>https://jmyblog.top/tw-nasdaq-listed/</id>
    <published>2021-09-16T07:23:30.000Z</published>
    <updated>2022-01-24T11:50:16.326Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/09/18/KhCfumNJxLsgXH8.jpg"><div class="note primary"><p>美国时间9月15日上午，thoughtworks在纽约纳斯达克股票交易所上市了。</p><p>今天早上，朋友圈也是一派锣鼓喧天、鞭炮齐鸣。除了作为公司员工，感觉与有荣焉之外，当然也为自己可以拿到一些「股权激励」而开心。</p><p>因此上市之后，我立马把公司的股票加成自选，每天看着股价起伏，计算着自己的「身价」，虽说还有两年才可以完全拿到所有的股票，但大家都期盼着股价暴涨，毕竟这是我们这些「新生代农民工」离「财富自由」最近的一次了。</p><p>按照惯例，今天开始还有几周的「静默期」，不能过度谈论这件事，也不能对公司的股票估值和未来发展业绩作评论，所以目前我只能默默欣慰于这笔「意外之财」。</p><p>为了上市，公司近年来做了不少的努力，比如换了logo：</p><p><img data-src="https://i.loli.net/2021/09/22/jnJpbLr57h8eVM4.png" alt="logo(左旧右新)"></p><p>又比如疯狂的招聘和扩招(至少中国区是这样)，重新装修办公室，增加工位，也完善了绩效考核的方式，至于上市之后还会有啥别的「花样」，拭目以待吧，但愿这些改变真的能让公司变得更好。</p><p>从现在起，我也是上市公司的员工了，不过心情并没有太大的起伏，只希望公司不要在股票套现之前炒掉我就好<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，也希望能在上市以后的公司待的开心。</p><p>啊，怎么感觉写成了朋友圈文案的样子，害，Whatever，谨以此博文来记录发生在我平淡人生中的，这一件大事。</p></div><hr><p>更新，上市之后的公司果然开始作妖了，具体就不说了，总之就是要让大家卷起来，而且是强制性的卷。</p><p>作为信奉「躺平」主义的新青年，不知道还能否撑到股票套现的时候，而且据说即使套现还要扣45%的税，所以对这笔意外之财的期待值也大大降低了，「财富自由」果然是个假命题，新一代农民工还是逃不过被剥削的命运。</p><p>且行且珍惜吧，发现了一个Github开源项目： <a href="https://github.com/phodal/tangping">躺平</a> ，深以为然，推荐给大家，共勉。</p>]]></content>
    
    
    <summary type="html">离「财富自由」最近的一次，哦不，是大佬们的财富自由。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="人生" scheme="https://jmyblog.top/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>雨天挤公交有感</title>
    <link href="https://jmyblog.top/bus-story/"/>
    <id>https://jmyblog.top/bus-story/</id>
    <published>2021-09-01T07:21:56.000Z</published>
    <updated>2022-01-24T11:50:16.322Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/09/13/CgLRPnaU5dDvuSx.jpg"><h2 id="极少数的公交通勤"><a href="#极少数的公交通勤" class="headerlink" title="极少数的公交通勤"></a>极少数的公交通勤</h2><p>又是雨天☔️。</p><p>6点钟，下班，外边的雨势未减。打车🚕，XX出行里已经排了100多人，只能坐公交🚌了。</p><p>其实我已经很少坐公交通勤了。因为之前住处并没有直达的公交去公司，所以天气晴好时多是骑着滑板车🛴，不能骑车的天气，也会提前打车回家，后来发现有了直达的公交，也没坐过。</p><p>极少数的时候，比如今天，下雨，又忘记提前打车，实在失策，只能选择坐公交，所以我公交通勤的频率大概是几个月一次吧。</p><p>为什么不在公司等雨停了再走？hummm… 实在不是我的习惯，对我而言，公司只能拥有我8小时，在8小时以外，无论我在公司干什么，总会让我有一种加班的错觉。</p><p>于是收拾行装出发去站牌。</p><h2 id="你喜欢哪一种雨天呢？"><a href="#你喜欢哪一种雨天呢？" class="headerlink" title="你喜欢哪一种雨天呢？"></a>你喜欢哪一种雨天呢？</h2><p>外面的雨不大，算是中雨，雨中行人匆匆。</p><p>其实我很喜欢雨天，尤其是微雨的天气，世界被朦胧的雨雾遮罩，沉静、新鲜，每个人都藏在伞下，像开在雨中的花，神秘的，甚至还有一种浪漫的氛围感，好像时间在这一刻慢了下来。</p><p>但如果是中雨，或是大雨，这种感觉就会被打破。雨滴加速落下，时间也像按了加速键，雨伞噼啪作响，思绪被打乱，地面积水渐深，身周也不可避免的被淋湿，让人只想逃离，无暇顾及其它，所以我加快了脚步。</p><h2 id="初始化：打工人和雨中的公交站"><a href="#初始化：打工人和雨中的公交站" class="headerlink" title="初始化：打工人和雨中的公交站"></a>初始化：打工人和雨中的公交站</h2><p>到了公交站，站牌下已经站满了人，路边和路沿上也全是翘首以盼的打工人。</p><p>双向马路本来就窄，等公交的人太多，又是雨天，所以车辆流动的很慢。站点的公交也多，一辆接着一辆进站，车间距很小，站在人堆里根本看不清后车的车号，只能走到后面去看。</p><p>还没到站牌下，就远远看到了两辆直达我住处的公交车，可车门口扎满了人，车也快要走了，赶不上，所以又等第三辆。</p><p>人群中打伞的人很多，但因为密度太大，我不时被别人伞上的积水浇到身上，防不胜防。因为公交很多，而且大都同时到站点，有的司机根本等不及到正确的位置就打开车门，这时在前面等车的人又辗转跑到后面上车，十分艰辛。</p><h2 id="注定无缘的第三趟公交"><a href="#注定无缘的第三趟公交" class="headerlink" title="注定无缘的第三趟公交"></a>注定无缘的第三趟公交</h2><p>第三辆车到了，停在了离站点还有30米的距离。</p><p>我随着人流跑到后面，又被夹杂着挤在车门口，身周扎满了人。因为是第二站，车上早已没了座位，能够站立的空间也并不充裕，所以每个人只能尽力往前挤，渴望车上能有自己的一席之地。</p><p>我知道，这是一场无声的Battle。<br>好久不坐公交的我有点被这种阵势吓到，反应过来的时候，已经被排在几圈之外，希望渺茫，但一时也无法脱身，只能被动向前挪。</p><p>雨还在下，但挤公交的人是没有资格打伞的，因为太拥挤，根本没有撑伞的空间，而且很不方便。我也收起了伞，幸亏穿了连帽外套，可以勉强遮雨，否则真要体会「冷冷的冰雨在脸上胡乱的拍」了。</p><p>人群继续向前挪动，我头顶是公交车的二维码。因为疫情，坐公交时要扫这个码，扫好之后向司机出示绿码才可以上车。而且现在坐公交，基本上都是用乘车码扫码付款，很少有人刷实体的公交卡或者投币，所以扫完公交车的二维码，还要再打开乘车码，扫码付款后才能成功上车。</p><p>这意味着，即使挤到了车前，却没有扫好公交的绿码；或者上车后，打不乘车码；又或者打开了乘车码，却一时半会对不准扫码口，都有可能被挤下去从头开始，十分致命。如果此时网路不畅或者手机死机，就更加让人绝望。</p><p>所以当我旁边女孩子的伞遮住了二维码后，我非常能理解那些外围人焦灼的目光，并善意提醒她把伞收起来。</p><p>然而第三趟公交注定与我无缘，在离车门还有几步之遥的地方，司机无奈地说「挤不上了，等下一辆吧」，人群散开，我又回到了原点。</p><h2 id="一步之遥的第四趟公交，我悟了"><a href="#一步之遥的第四趟公交，我悟了" class="headerlink" title="一步之遥的第四趟公交，我悟了"></a>一步之遥的第四趟公交，我悟了</h2><p>继续等第四趟，这次我很清醒的做了规划，我暗暗告诫自己，等车来的时候，一定要身轻如燕的挤到前排。</p><p>车来了，在看清车号的那一刻，我就开始了追逐。然而车速太快，停在了我的前面，车门立刻围满了人，即使我不甘其后的往前挣扎，也无法靠近车门，最后挤在了这个位置：</p><p><img data-src="https://i.loli.net/2021/09/15/Fjeo9SI5DCWb7mT.png" alt="卑微的我"></p><p>环顾四周，我发现自己并没有处于一个有利的竞争位置，以车门为中心，人流分成三组，车门右边、车门对面、以及车门左边，我所处的位置显然非常不利，但并不是没有希望。</p><p>人群向前挪动着，人太多，司机也站起来，指挥大家扫码、付款、然后上车，一波波的人扫好公交车的二维码，然后出示给司机，司机也一波波的确认绿码。<br>我对这个过程真的抱有疑问，这么多人，这么多绿码塞进司机的视野，如果有人没扫码，也可以混水摸鱼的上车吧，但是无解。</p><p>车门离我越来越近，终于，我前面的小伙伴踏上了车门，成功只有一步之遥！然后，司机又无奈地说「挤不上了，等下一辆吧」，人群散开，我又回到了原点。</p><h2 id="成功上车，第五趟公交"><a href="#成功上车，第五趟公交" class="headerlink" title="成功上车，第五趟公交"></a>成功上车，第五趟公交</h2><p>可能人生就是这样吧，不断地重启。所以又继续等第五辆车，这次我汲取了上次的教训，计划去车门对面那组，成功率应该更高。</p><p>第五趟公交终于来了，我又开始了追逐，但这次的司机似乎很有原则，不在后边停车，而是停在站牌旁边，正确的停车位置。</p><p>因为没有深谙司机的心理，所以我和大家一样，以为车会停在后面，所以都向后奔，车先是停了几秒，然后又开始向前开，就这样和我计算好的上车位置失之交臂。<br>人群又反应过来，众星捧月般追着车向前跑，队头和队尾奇妙的调换，所以我没有挤到前排。但我仍然坚持在车门对面的位置上车，所以挤在了这个位置：</p><p><img data-src="https://i.loli.net/2021/09/15/Ub2MvApmqaXRY6V.png" alt="转换策略"></p><p>我还是被人群推着向前挪动，扫好上车码之后像个守财奴一样，将手机护在怀里，生怕页面退出。<br>收起了伞，我的帽子也全湿了，每个人都死盯着车门口的位置，计算着自己上车的距离，像一场无声的角逐。</p><p>真狼狈啊，看着自己以及周围的人群，我突然有点想笑，然后也这么做了，旁边的男孩听见了我的笑声，疑惑看向我，于是我笑的更厉害了。这场面，既狼狈激烈，又荒诞有趣，难道不可笑吗？</p><p>在这样自嘲般的笑声中，我上车了，也许是我明白了下雨天挤公交的艺术，又或许只是侥幸，总之，我上车了，在6点45分，一个平时已经在家躺尸的时间。</p><h2 id="上车之后的煎熬"><a href="#上车之后的煎熬" class="headerlink" title="上车之后的煎熬"></a>上车之后的煎熬</h2><p>上车之后，成功的喜悦渐退，手机却响了起来，原来在我上车的那一刻，也打到了车。又自嘲的笑了笑，也许是命运的安排吧，原本可以体面的坐车回家，但还是历经万难挤上了公交站位，时也，命也？</p><p>雨中的公交车摇摇晃晃，车里挤满了人，不可避免的产生肢体碰撞。我的两只手，既要拿着手机、雨伞，还要牢牢抓住头顶的栏杆，像是个在做指定动作的杂技演员，一时间额头沁出了细汗。</p><p>车窗渐渐被雾气掩盖，看不清外面的景象。车里，雨水、汗水、汽油味，还有许多难以言喻的味道，充斥着我的鼻腔，只能尽力屏气噤声，十分煎熬。</p><p>这样的境况下，我还要不时给下车的乘客让出本就不多的空间，身体交错时，背包、外套也被蹂躏，和我的身体分离，惨不忍睹。</p><p>下车之后，我如释重负，恍若重生，深吸几口气，才从刚才的酷刑中缓过神来。看着一同下车的乘客背影渐行渐远，他们是否也和我有同样的感受呢，还是早已习以为常，毫无所觉？</p><h2 id="个人尊严"><a href="#个人尊严" class="headerlink" title="个人尊严"></a>个人尊严</h2><blockquote><p>人有无尊严，有一个简单的判据，是看他被当作一个人还是一个东西来对待。这件事有点两重性，其一是别人把你当做人还是东西，是你尊严之所在。其二是你把自己看成人还是东西，也是你的尊严所在。挤火车和上公共厕所时，人只被当身体来看待。这里既有其一的成份，也有其二的成份；而且归根结蒂，和我们的文化传统有关。<br>说来也奇怪，中华礼仪之邦，一切尊严，都从整体和人与人的关系上定义，就是没有个人的位置。一个人不在单位里、不在家里，不代表国家、民族，单独存在时，居然不算一个人，就算是一块肉。这种算法当然是有问题。我的算法是：一个人独处荒岛而且谁也不代表，就像鲁滨孙那样，也有尊严，可以很好的活着。这就是说，个人是尊严的基本单位。知道了这一点，火车上太挤了之后，我就不会再挤进去而且浑然无觉。</p><footer><strong>王小波</strong><cite><a href="http://www.bwsk.com/xd/w/wangxiaobo/qt/019.htm">个人尊严</a></cite></footer></blockquote><hr><div class="note primary"><p>这次的经历，让我想到了王小波的这篇文章，「挤火车和上公共厕所时，人只被当身体来看待。」，挤公交又何尝不是呢？当我一次次追逐公交车的时候、当我在人群中向前挪动的时候、当我挤上车忍受「酷刑」的时候，我，这个人，都只能被当作身体来看待。<br>但至少，我并不是「浑然无觉」的，这样，勉强还算得上是「有尊严的活着」吧。</p></div>]]></content>
    
    
    <summary type="html">下雨天挤公交，是门艺术。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="活着" scheme="https://jmyblog.top/tags/%E6%B4%BB%E7%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>关于QA角色</title>
    <link href="https://jmyblog.top/thoughts-about-qa-role/"/>
    <id>https://jmyblog.top/thoughts-about-qa-role/</id>
    <published>2021-08-28T07:22:22.000Z</published>
    <updated>2022-01-24T11:50:16.325Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/09/18/KteuPhzw7ngd5Rp.png"><h2 id="楚门的世界"><a href="#楚门的世界" class="headerlink" title="楚门的世界"></a>楚门的世界</h2><p>前两天，有个同事离职了，照常发了离职邮件。虽然不认识，但他邮件里描述的离职原因，却让我印象深刻。</p><p>大意是说，有天在下班的公交车上，突然想到自己的高考志愿是随意填的，专业是调剂的，工作是随大流找的，所以希望在60岁前，能找到一个领域或一个事物，是自己感兴趣的，那就不算是个失败者。<br>于是辞职。<br>邮件最后以《楚门的世界》经典独白「早安午安晚安」结尾，看完这封邮件，我感触颇深。</p><p>是啊，我也一样，大学、专业、工作都不是因为喜欢才选的，也没有什么感兴趣的事情，一切按部就班，只是为了谋生。就像一个自己人生的旁观者，和楚门一样，被无形禁锢着。</p><h2 id="做QA的这几年"><a href="#做QA的这几年" class="headerlink" title="做QA的这几年"></a>做QA的这几年</h2><p>大学、专业已经是过去式，无法改变。而工作，我的确开始迷惑了。</p><p>做QA三年，这个职业，一开始，虽然并不是因为喜欢或者感兴趣才做，但对于它在客观意义上的存在价值，还是认同的。我认同是需要这么一些人，专门利用测试方法论或工具，去「维护」软件质量。</p><p>后来，我逐渐发现，开发和测试是分不开的，不会开发的QA，在很多细节上插不上话，很难从代码角度给出建议，有时候还要向开发请教怎么测试，处境尴尬。所以，只通过纸上谈兵的方法论，和现学现卖的自动化测试工具来干活，已经不够看了。</p><p>而且近几年，开发人员对测试的关注也在不断提升，通过一些敏捷实践，比如TDD，或者一些代码检测工具，很多问题在早期就被识别和修复，纯粹的测试已经很难发现问题，不得不说，这是行业的进步。<br>自动化测试也逐渐为开发人员所重视，对比QA，他们可以更快的搭建自动化框架，写出更简练、稳定性更好的自动化测试代码。</p><p>至此，QA的处境就就更尴尬了。</p><h2 id="QA的行业现状"><a href="#QA的行业现状" class="headerlink" title="QA的行业现状"></a>QA的行业现状</h2><p>既然无法在测试阶段发现问题，自动化测试也没开发做得好，为了证明自身存在的价值，只能不断扩大影响范围，所以才会有「测试左移」、「测试右移」这种概念和方法论出现，让测试去搞需求、去写代码、去做数据分析，总之，什么都可以干。</p><p>这就是现在测试行业/QA角色的现状，通过拜读前公司大佬熊节的 <a href="https://mp.weixin.qq.com/s/4Ft7PXeygsrn-USjRxP9pQ">一篇文章</a> ，里面关于软件开发实际上就是个建模过程的描述，我深以为然，而下面的描述更让我深思：</p><div class="note primary"><p>编程的目标是建立与需求描述的模型一致的代码模型，所以写一堆代码不管对错丢给别人去测试这种行为，是编程的工作没有做完。<br>这就是现实。<br>人肉回归测试员的存在，仅仅是因为有很多程序员没有做好自己的本职工作，在人力资源便宜的时代，硬拉人来擦屁股，这是一种逆时代潮流的职业。<br>时代潮流的方向，一定是人力资源越来越贵，一定是自动化程度越来越高，所以人肉回归测试员的命运一定是被淘汰。</p></div><p>虽然说的是「人肉回归测试员」，但我觉得，整个测试行业都是这样。<br>测试本就是编程工作的一部分，是程序员的活，但很多公司为了赶进度，导致程序员只能赶工把代码写完，没时间搞测试，本末倒置。</p><p>说白了，测试这个职业的出现，只是因为国内的软件行业，并没有重视测试在编程过程中的重要性而导致的，而现在，随着行业的进步，测试已经被逐渐重视起来了。</p><p>所以我看到，很多项目已经不需要专职的QA了，而是直接由开发来做测试，其实这才是正确的做法，可能也是未来的行业方向，但这样一来，QA们该何去何从呢？</p><h2 id="寻求答案"><a href="#寻求答案" class="headerlink" title="寻求答案"></a>寻求答案</h2><p>为了找到这个问题的答案，我参考了很多大佬的文章，比如：</p><ul><li><a href="http://qualityfocus.club/career-development">也谈打工人的发展困境</a></li><li><a href="http://qualityfocus.club/qa4ever">像用户一样测试：QA永存</a></li><li><a href="http://qualityfocus.club/qa-value">测试人员价值的终极体现</a></li><li><a href="https://www.bylinzi.com/2021/08/10/how-to-improve-qa-performance/">AIMA：如何通过质量指标提高QA的绩效（译）</a></li><li><a href="https://www.bylinzi.com/2021/01/17/why-qa-change-role/">QA为什么转换角色</a></li><li><a href="https://www.bylinzi.com/2020/03/13/software-tester-career-path/">软件测试人员的职业发展之路</a></li><li><a href="https://www.bylinzi.com/2019/11/25/bqconf-software-tester-how-to-grow/">BQConf演讲：软件测试人员该何去何从？</a></li><li><a href="https://www.bylinzi.com/2019/09/30/software-tester-how-to-grow/">软件测试人员该何去何从？</a></li><li><a href="https://www.bylinzi.com/2019/06/05/software-testers-challenge-n-chance/">软件测试人员的挑战与机遇</a></li><li>……</li></ul><p>但还是没有解答我的困惑，这些文章依然在讲方法论、布道，并没有直面测试行业本身，还是在说测试要左移、右移，要去分析需求，要写代码，要从全程把控质量。。。<br>并给出了测试人员的职业方向，也是我曾以为的职业方向：</p><img data-src="https://i.loli.net/2021/09/22/pF7tW9ON4xCS8Um.png"><h2 id="下一步？"><a href="#下一步？" class="headerlink" title="下一步？"></a>下一步？</h2><p>没有答案，下一步该怎么办呢？</p><p>现在来看，QA角色的存在价值我已经不认同了，我现在认同的是熊节大佬在 <a href="https://mp.weixin.qq.com/s?__biz=MzU1MTkyNDU4MA==&amp;mid=2247484049&amp;idx=1&amp;sn=990dd055ca733da6ba6be04f36fcde4b&amp;chksm=fb88a49accff2d8c066b1c9e7b1fa8d02e52803fb8139df44cb0e74f240d3f06e9e018079638&amp;scene=178&amp;cur_album_id=1494586231572267009#rd">另一篇文章</a> 中讲到的：</p><div class="note info"><p>要写出好软件，很简单，你的人得编程，得会编程，得知道怎么写好代码。</p><p>想让不会编程的人把软件做出来，想让不知道怎么写好代码的人把软件做好，这个梦，我们这个行业已经做了三十年了。</p><p>软件质量要好，bug要少，很简单，两个词：测试驱动开发，持续集成。</p><p>核心就是一件事：<strong>写代码的人，要把代码写好，写高质量的、有单元测试覆盖的代码。</strong> 除此之外，一切想让不知道怎么写好代码的人把软件做好的梦想，都只是梦想。</p></div><p>总结：要做好软件质量，只能让写代码的人把代码写好。<br>而我，不是那个写代码的人，也不知道怎么把代码写好，又是以什么立场去保证软件质量呢？<br>这显然是不合理的。</p><p>所以，为了自己的饭碗，QA们得先开始写代码，做好测试自动化，然后学习怎么写好测试代码，脚踏实地的从「人肉回归测试员」过渡成「测试开发」。如果以后，已经不需要专职的测试来保证质量，那么想继续待在这个行业，除了转角色，没有别的办法，毕竟技术岗位，talk is cheap.</p>]]></content>
    
    
    <summary type="html">饭碗不稳啊。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="职业" scheme="https://jmyblog.top/tags/%E8%81%8C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>敏捷测试浅谈</title>
    <link href="https://jmyblog.top/agile-test/"/>
    <id>https://jmyblog.top/agile-test/</id>
    <published>2021-08-21T09:49:52.000Z</published>
    <updated>2022-01-24T11:50:16.321Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/09/16/XSmLbJgiMNPhHjA.png"><div class="note info"><p>下周要给同事分享关于敏捷测试的session，简单介绍敏捷测试的概念和实践，虽然没有多少人听<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，不过准备的过程中自己还是挺有收获的，所以先用这篇博客总结下。</p></div><h2 id="是什么：敏捷测试的道与术"><a href="#是什么：敏捷测试的道与术" class="headerlink" title="是什么：敏捷测试的道与术"></a>是什么：敏捷测试的道与术</h2><p>首先，我们知道，「敏捷测试」是一种项目实践，说白了就是方法，即「术」；那在谈论「术」之前，我们应当知道它所遵循的方法论和道理，即「道」，很明显，从字面上就可以看出，这个「道」就是「敏捷」。<br>所以我们得先搞清楚「敏捷」这个概念是怎么来的，又是怎么衍生出现在的敏捷开发和敏捷测试的。</p><h3 id="Scrum-amp-极限编程-80-90s"><a href="#Scrum-amp-极限编程-80-90s" class="headerlink" title="Scrum&amp;极限编程(80-90s)"></a>Scrum&amp;极限编程(80-90s)</h3><p>所谓「实践出真知」，「道」也是从「术」中来的，在敏捷这个概念出现之前，已经有一些早期的敏捷实践在流行，比如 <a href="https://www.scrumcn.com/agile/scrum-knowledge-library/scrum.html#tab-id-1">Scrum</a> 和 <a href="https://jmyblog.top/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E6%B5%8B%E8%AF%95/#XP%E7%BC%96%E7%A8%8B">极限编程</a> 。</p><ul><li><mark class="label primary">Scrum</mark> ：80s-90s诞生，一种敏捷项目的管理方法，提出了迭代、站会、IPM、Retro、User Story这些实践，并引入PO(Product Owner)、SM(Scrum Master)角色。</li><li><mark class="label primary">极限编程</mark>：全称为Extreme Programming，缩写为XP，80s后期诞生，一种软件开发方法，对测试高度重视，提出了测试驱动开发(TDD)、结对编程、重构、持续集成等实践。</li></ul><h3 id="Agile-2001"><a href="#Agile-2001" class="headerlink" title="Agile(2001)"></a>Agile(2001)</h3><p>因势所趋，基于以上实践，有17个志同道合的人聚在一起，开了一个研讨会，根据这些实践的共性，比如轻量级、快速迭代等等，决定使用「敏捷」(即Agile)作为这些共性的总称，并提出了部分 <a href="https://agilemanifesto.org/iso/zhchs/manifesto.html">敏捷宣言与原则</a> ，后来在Wiki上将其开发完善，「敏捷」这个概念及其代表的方法论就此诞生。<br>再然后，更多有相似想法的人又形成了 <a href="https://www.agilealliance.org/">敏捷联盟</a> ，是一个促进和研究敏捷方法的非营利组织。</p><h3 id="Scrum-amp-敏捷开发-amp-敏捷测试-Now"><a href="#Scrum-amp-敏捷开发-amp-敏捷测试-Now" class="headerlink" title="Scrum&amp;敏捷开发&amp;敏捷测试(Now)"></a>Scrum&amp;敏捷开发&amp;敏捷测试(Now)</h3><p>即然有了方法论，那更多的敏捷实践也就应运而生了，比如「敏捷开发」和「敏捷测试」。</p><ul><li><mark class="label info">敏捷开发</mark> ：事实上，上文中的「极限编程」就是现在「敏捷开发」的前身，「敏捷开发」在「极限编程」的基础上进行了完善和扩充，引入了更多开发实践，我并不是开发，所以具体又多了哪些实践就无法娓娓道来了。</li><li><mark class="label info">敏捷测试</mark>：在「极限编程」中，只提出了单元测试和验收测试的实践，不够满足测试需求，所以之后又根据Scrum的项目管理模式，尝试将测试深入到软件开发的每个步骤，进而提出了更多优秀的测试实践，具体是什么实践，下文中会详细介绍。</li></ul><div class="note primary"><p>到这里，敏捷测试的概念已经很明显了： <strong>敏捷测试就是遵循敏捷方法论的测试实践</strong> ，其实这个定义也可以通用到敏捷开发身上。</p><p>现在的敏捷项目，多是以Scrum作为项目管理方式，开启迭代、组织每日站会、迭代计划等会议，并以用户故事卡为交付单位进行日常开发工作，然后用「敏捷开发」和「敏捷测试」的实践保证项目交付效率和产品质量，需要注意的是，「敏捷开发」和「敏捷测试」并不能独立于彼此存在，两者是相互依赖、相辅相成的关系，所以脱离「敏捷开发」来谈「敏捷测试」，无异于纸上谈兵，是完全行不通的。</p></div><h2 id="为什么：敏捷测试与传统软件测试的区别"><a href="#为什么：敏捷测试与传统软件测试的区别" class="headerlink" title="为什么：敏捷测试与传统软件测试的区别"></a>为什么：敏捷测试与传统软件测试的区别</h2><p>之前「有幸」参加过几次传统软件项目，包括毕业前实习的时候也是，在我看来他们有以下区别：</p><p><img data-src="https://i.loli.net/2021/09/17/j2Rfx1wV4YAlmqt.png" alt="传统测试与敏捷测试"></p><p>不难看出，两者的核心不同，传统测试以「质量检测」为核心，目标是为了发现更多的bug；敏捷测试则以「质量内建」为核心，目标在于预防缺陷：</p><p><img data-src="https://i.loli.net/2021/09/17/KZCxYy51Smk2X79.png" alt="质量内建"></p><blockquote><p>软件的缺陷暴露的越晚，修复的成本就越高；前期对缺陷预防的少，后期发现的缺陷就会多；前期做好了缺陷预防，后面暴露的缺陷就会减少。因此，我们需要提前预防缺陷，而不是等开发完成了才发现很多的问题，这就是 <strong>「质量内建」</strong> 。</p></blockquote><h2 id="怎么做：敏捷测试策略"><a href="#怎么做：敏捷测试策略" class="headerlink" title="怎么做：敏捷测试策略"></a>怎么做：敏捷测试策略</h2><div class="note primary"><p>俗话说「先把事情做对，再把事情做好。」，怎样才能做好敏捷测试呢？答案是通过敏捷测试策略。<br><strong>敏捷测试策略</strong> 是一系列敏捷测试实(tao)践(lu)的集合，在项目刚开始的Inception阶段，由QA主导，团队成员一起讨论输出，输出结果可以用任意的方式记录，文档、脑图都行，关键是要在团队内达成共识。</p></div><p>之前也有写过 <a href="https://jmyblog.top/testStrategy/">一篇文章</a> 来介绍测试策略，里面列出了一些实践，但没有按照敏捷项目的流程进行分类，事实上，所有的敏捷测试实践都可以按照引入时间的不同分为三类：<strong>测试左移</strong>、<strong>持续测试</strong>、<strong>测试右移</strong>。</p><h3 id="测试左移"><a href="#测试左移" class="headerlink" title="测试左移"></a>测试左移</h3><mark class="label info">测试左移</mark> 是说测试在项目开始早期介入(其实做敏捷测试策略这个实践本身，就已经算是测试左移了)，可以是需求分析阶段，也可以是更早的inception阶段。<hr><blockquote><p>左移的测试人员可以做的事情有：和团队一起挖掘需求、分析需求、澄清需求、评审需求、参与技术方案讨论等，主要目的是利用测试人员独有的视角和对系统的了解，在各个环节进行必要的输入，确保团队对于需求理解的一致性，确保团队能够做正确的事情。</p></blockquote><p>以下是在此阶段可以引入的测试实践。</p><h4 id="环境策略"><a href="#环境策略" class="headerlink" title="环境策略"></a>环境策略</h4><pre><code>所谓「打工人欲善其事，必先利其器」。</code></pre><p>稳定的环境是高效开发和测试的先决条件，所以在项目开始开发之前就应该配置好各种环境以及流水线等基础设施，比如：</p><ul><li>DEV环境：Dev自测和联调使用。</li><li>QA环境：QA日常测试使用。</li><li>UAT环境：用户验收测试。</li><li>Staging环境：模拟的Prod环境，有时也用UAT环境代替。</li><li>其他环境：按照项目开发/测试需求准备安全环境、性能环境等等。</li><li>搭建CI：代码持续集成/部署，保证产品稳定交付。</li></ul><h4 id="测试四象限"><a href="#测试四象限" class="headerlink" title="测试四象限"></a>测试四象限</h4><p>利用测试四象限，可以在项目开始前期，帮我们确定做什么测试的问题，比如测功能、组件、性能、可靠性等等。</p><p><img data-src="https://i.loli.net/2021/09/18/XgT4iveAmUjVnd7.png" alt="测试四象限"></p><h4 id="测试金字塔"><a href="#测试金字塔" class="headerlink" title="测试金字塔"></a>测试金字塔</h4><p>利用测试金字塔原则，将上边确定好的测试方法，结合项目架构，进行测试分层，确保覆盖全面：</p><p><img data-src="https://i.loli.net/2021/09/18/awPHkol1BumJ28A.png" alt="测试金字塔"><br>之前有写过 <a href="https://jmyblog.top/Test-Pyramid/">一篇文章</a> 详细介绍。</p><h4 id="测试矩阵"><a href="#测试矩阵" class="headerlink" title="测试矩阵"></a>测试矩阵</h4><p>确定了测试方法和测试分层，我们还需要考虑一些细节，比如用什么工具来做这些测试、在哪个环境运行、还有需要集成到CI吗等等问题，这个时候，就可以利用测试矩阵来生成细化方案：</p><p><img data-src="https://i.loli.net/2021/09/18/xB46Nmb9aT1zvoA.png" alt="测试矩阵"><br>将确定要做的测试方法放在首行，纵向则陈列各种测试细节，这样清晰明了，更容易和团队达成一致。之前博主也写过 <a href="https://jmyblog.top/%E6%B5%8B%E8%AF%95%E7%9F%A9%E9%98%B5/">一篇文章</a> 介绍测试矩阵，但那时举的例子比较简单，现在就更加全面了。</p><h3 id="持续测试"><a href="#持续测试" class="headerlink" title="持续测试"></a>持续测试</h3><mark class="label info">持续测试</mark> 是指在项目开发过程中，进行持续的功能测试，也包括性能、安全等的内建；形式可以是静态分析、评审，也可以是动态的测试，包括手动执行的各种测试，以及集成流水线上持续执行的自动化测试。<p>事实上，也就是以用户故事为一个单位，敏捷团队日常进行的一些测试实践，比如KickOff、TDD、DeskCheck等等。</p><p><img data-src="https://i.loli.net/2020/11/30/TpxlCFQ4uYWa58s.png" alt="测试四象限"></p><p>详细可以看我 <a href="https://jmyblog.top/testStrategy/#%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E7%9A%84%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E7%AD%96%E7%95%A5">之前的文章</a>。</p><h3 id="测试右移"><a href="#测试右移" class="headerlink" title="测试右移"></a>测试右移</h3><p><strong>测试右移</strong> 是指在项目进行一段时间、或者上线后，进行的一些测试管理和测试总结的相关实践，比如 <a href="https://jmyblog.top/BugBash/">BugBash</a> 、Bug管理、BugReport、ShowCase等等，又比如根据项目风险随时调整测试策略、上线前的测试计划、以及自动化代码的重构、<a href="https://www.bylinzi.com/2020/11/30/testing-logging-monitoring/">数据分析</a>……每一个实践都可以拉出来细细讨论。</p><hr><div class="note info"><p>好了，以上就是所有关于敏捷测试的简单介绍，总之，全是套路，以后有什么新的套路我也会更新在这里，但是这个分类和规律是不变的。</p></div><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.zhihu.com/question/38168328">极限编程与敏捷开发？</a></li><li><a href="https://martinfowler.com/articles/newMethodology.html">martinfowler-新方法论</a></li><li><a href="https://insights.thoughtworks.cn/agile-testing-core/#comment-71291">Thoughtworks洞见-敏捷测试的核心</a></li><li><a href="https://insights.thoughtworks.cn/agile-testing-manifesto/">Thoughtworks洞见-敏捷测试宣言和原则</a></li></ul>]]></content>
    
    
    <summary type="html">全是套路。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="敏捷测试" scheme="https://jmyblog.top/tags/%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UiAutomator初体验(下)</title>
    <link href="https://jmyblog.top/ui-automator-test-3/"/>
    <id>https://jmyblog.top/ui-automator-test-3/</id>
    <published>2021-08-07T03:20:35.000Z</published>
    <updated>2022-01-24T11:50:16.327Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/08/07/XE59SbdlRZBJ7iW.png"><div class="note info"><p>上篇博客我们用UiAutomator编写了一个可以用命令行运行的测试，那它就肯定可以集成到CI上，没有完成的同学也不用担心，可以先fork <a href="https://github.com/Summyj/UiAutomatorDemo">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p></div><h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>这里直接复用 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E5%88%9B%E5%BB%BAAndroid%E5%BA%94%E7%94%A8">之前博客</a> 相同部分的内容，按照步骤做就可以了。</p><h2 id="添加UiAutomator-workflow"><a href="#添加UiAutomator-workflow" class="headerlink" title="添加UiAutomator workflow"></a>添加UiAutomator workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为UiAutomator的 workflow：</p><p><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="新建workflow(忽略这里的名字哈)"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：</p><p><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="添加执行步骤(忽略这里的名字哈)"><br>接下来请依次添加以下步骤。</p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步通常为每个workflow最开始的两个步骤，不需要做任何改动，保持默认的配置就好，意思是说用SSH的方式下载主代码库，这里是指上面fork的模拟的Android开发代码库：</p><p><img data-src="https://i.loli.net/2021/08/07/bqzS9O2DV1BgE6h.png" alt="下载主代码库"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>第三步是下载测试代码库，搜索并添加一个Script步骤，直接git clone即可，repo地址请换成自己的哦，Bitrise会把测试代码库下载到$BITRISE_SOURCE_DIR，也就是/bitrise/src/这个目录下：</p><p><img data-src="https://i.loli.net/2021/08/07/VG2rC7TZIXcsRMA.png" alt="下载测试代码库"></p><h3 id="添加安卓模拟器"><a href="#添加安卓模拟器" class="headerlink" title="添加安卓模拟器"></a>添加安卓模拟器</h3><p>然后是创建并启动模拟器，和在本地运行测试一样，运行之前得确保模拟器开启，这里我将默认的API Level改成了29，因为比较常用：</p><p><img data-src="https://i.loli.net/2021/08/07/JwTigPXExe2um97.png" alt="创建模拟器"></p><h3 id="等待模拟器启动"><a href="#等待模拟器启动" class="headerlink" title="等待模拟器启动"></a>等待模拟器启动</h3><p>接着等待模拟器启动，默认是等待5分钟，这里我增加到了10分钟：</p><p><img data-src="https://i.loli.net/2021/08/07/5QtKkLRU28N4jnY.png" alt="等待模拟器启动"></p><h3 id="安装测试App"><a href="#安装测试App" class="headerlink" title="安装测试App"></a>安装测试App</h3><p>接下来就是在模拟器里安装App了，我把测试App也保存到了代码库里，这里使用adb install命令来安装指定位置下的apk文件：</p><p><img data-src="https://i.loli.net/2021/08/07/JzEcfoVBwQGT4Yb.png" alt="安装Apk"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，上篇博客中提到可以用两种命令执行测试，一个是gradle，一个是adb，因为用gradle执行可以生成一个测试报告，为了方便接下来的步骤，这里选择用gardle：</p><p><img data-src="https://i.loli.net/2021/08/07/CYS2gtmpMWDaqw1.png" alt="执行测试"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，上篇博客同样提到gradle执行测试后，会生成html和xml两种格式的测试报告，由于Bitrise只能解析xml格式的测试报告，所以改路径为下图xml文件所在位置，接着添加depoly步骤后才能运行之后看到测试报告，不需要做任何改动，保持默认的配置就好：</p><p><img data-src="https://i.loli.net/2021/08/07/DhFivjswpXt5m8n.png" alt="导出测试报告"></p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>有时候为了安全考虑，代码里不能明文存储像账号密码之类的测试数据，所以这里我将账号密码保存成Bitrise的环境变量：</p><p><img data-src="https://i.loli.net/2021/08/07/mq2bJtDaAT9QGlu.png" alt="Bitrise添加环境变量"><br>接着在代码里用getenv()方法获取环境变量即可，本地运行的话再赋个值就可以了：</p><p><img data-src="https://i.loli.net/2021/08/07/Zqv796Dt3docrXP.png" alt="获取环境变量"></p><h2 id="运行workflow"><a href="#运行workflow" class="headerlink" title="运行workflow"></a>运行workflow</h2><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><p>万事皆备，就可以运行workflow了，点击右上角保存按钮，之后回到应用页面，选择开始build，选择UiAutomator workflow，然后开始Build：</p><p><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="首次运行workflow((这里是之前文章里的图))"><br>以后再运行，可以像上边一样设置Build，更方便的是进入上个build的详情页，直接点击rebuild就可以再次运行了：</p><p><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="Rebuild(这里是之前文章里的图)"><br>也可以选择“Rebuild with remote access”，Bitrise给安卓应用提供了远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="Rebuild with remote access(这里是之前文章里的图)"><br>可以按照Bitrise提供的地址和密码连接该机器(每次运行地址和密码都会变)。</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>如果上面的步骤都设置正确，应该是可以运行成功的，失败的话大概率应该是上边配置不对，自行解决哦：</p><p><img data-src="https://i.loli.net/2021/08/07/uIFs2vK5nBQTROf.png" alt="运行结果"><br><img data-src="https://i.loli.net/2021/08/07/UwucB8XYFqzDGLk.jpg" alt="测试报告"><br>一共10分钟，测试跑了3分半左右，但真正执行测试的时间应该只有几十秒，其他都是在下载依赖：</p><p><img data-src="https://i.loli.net/2021/08/07/WxzDIfAoq1N7bTU.png" alt="测试日志"><br>然后发现模拟器安装测试APP这一步花的时间很长，通常得5分钟左右：</p><p><img data-src="https://i.loli.net/2021/08/07/1dZblQcaHUkRDuI.png" alt="安装apk日志"><br>有时时间更长甚至会失败，没找到解决办法，但失败的情况比较少，重跑就行，所以先不管了：</p><p><img data-src="https://i.loli.net/2021/08/07/XmsRVoIEP8lzq4a.png" alt="安装失败"></p><h3 id="尝试用adb运行测试"><a href="#尝试用adb运行测试" class="headerlink" title="尝试用adb运行测试"></a>尝试用adb运行测试</h3><p>试过不导出测试报告，用adb在CI执行测试，但会报一个互斥锁的错误，感觉在CI上太难连到模拟器了，上边在模拟器安装apk的步骤也很费劲，所以最好不用adb命令吧。</p><p><img data-src="https://i.loli.net/2021/08/07/MTudktDJ41ZcO6G.png" alt="adb运行"></p><h2 id="UiAutomator-vs-Appium"><a href="#UiAutomator-vs-Appium" class="headerlink" title="UiAutomator vs Appium"></a>UiAutomator vs Appium</h2><p>UiAutomator初体验到这里就结束了，因为之前我也写过用Appium进行移动端UI自动化测试的系列文章，所以感受到了很多不同，具体在以下几个方面。</p><h3 id="上手方面"><a href="#上手方面" class="headerlink" title="上手方面"></a>上手方面</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test/#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a> ，UiAutomator是更快更简洁的，依赖更少；这是Appium创建的 <a href="https://jmyblog.top/AppUI-AutoTest/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，这是UiAutomator创建的 <a href="https://jmyblog.top/ui-automator-test/#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE">测试项目</a> ，还是UiAutomator更快更方便。</p><p>这是Appium用来定位元素的 <a href="https://jmyblog.top/AppUI-AutoTest-1/#Appium-Desktop">Appium Desktop</a> ，这是UiAutomator用来定位元素的 <a href="https://jmyblog.top/ui-automator-test-2/#%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0">uiautomatorviewer</a> ，还是UiAutomator更方便，不用设置Desired Capabilities，但界面其实没人家好看。</p><p>这是利用Appium <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这是用UiAutomator <a href="https://jmyblog.top/ui-automator-test-2/#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">写的代码</a> ，这里写的是同样的测试用例，其实是差不多的，只是语言不同而已。不过对于Webview，Appium还需要切换context，UiAutomator则可以直接操作Webview，不用手动切换context，这会大大减少测试运行的时间和出错率。</p><p>Appium适用于iOS和Android两个平台，UiAutomator是只针对Android的，其实Appium在Android平台底层用的也是UiAutomator作为自动化引擎，从Desired Capabilities的配置就可以发现：</p><p><img data-src="https://i.loli.net/2021/08/07/y9QTpiPKDWul81b.png" alt="android capabilities"><br>所以UiAutomator相当于是安卓原生的一个自动化测试框架，iOS也有自己原生的UI测试框架XCUITest，它也是Appium在iOS平台底层引用的自动化引擎：</p><p><img data-src="https://i.loli.net/2021/08/07/9GQvkLTlxMgU8Zt.png" alt="ios capabilities"></p><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>再来看看运行时间，还是贴出两个框架的运行视频，这里写的同样的测试用例，先来看UiAutomator用三种方式运行测试的视频，最长的时间是用gradle运行，大概25秒，最短只需要12秒：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe><p>再来看Appium运行视频，是用npm命令跑，大概23秒，看起来和UiAutomator差不多，但更复杂的场景还是UiAutomator更快的。</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe><h3 id="CI配置"><a href="#CI配置" class="headerlink" title="CI配置"></a>CI配置</h3><p>这是Appium的 <a href="https://jmyblog.top/AppUI-AutoTest-3/#%E6%B7%BB%E5%8A%A0e2e-workflow">CI配置过程</a> ，这是UiAutomator的 <a href="https://jmyblog.top/ui-automator-test-3/#%E6%B7%BB%E5%8A%A0UiAutomator-workflow">CI配置过程</a> ，看着虽然也差不多，但亲测其实Appium步骤更多，因为要切换Webview，后续还要加一步下载chrome webdriver，而UiAutomator则不用。</p><h3 id="个人体验"><a href="#个人体验" class="headerlink" title="个人体验"></a>个人体验</h3><div class="note info"><p>两个框架各有优劣，可以根据实际需求选择，我自己体验下来还是Ui Automator更方便一些，不过两个框架我都是初次使用，目前除了webview之外我也没遇到别的复杂场景，或许有的方面Appium会更胜一筹，继续学习吧，碰到之后我也会写博客分享的。</p></div>]]></content>
    
    
    <summary type="html">持续集成，将代码部署到Bitrise CI。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
  </entry>
  
  <entry>
    <title>UiAutomator初体验(中)</title>
    <link href="https://jmyblog.top/ui-automator-test-2/"/>
    <id>https://jmyblog.top/ui-automator-test-2/</id>
    <published>2021-08-05T03:20:35.000Z</published>
    <updated>2022-01-24T11:50:16.326Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/08/07/gVpdC1hMQHsrT64.png"><div class="note info"><p>事实上，如何上手编写最基本的UiAutomator测试，<a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing">官网</a> 上已经给出了设置步骤和简单的代码示例，只是没有从零开始介绍怎么创建一个完整的测试而已，所以我们可以基于官网文档，写一个可以在模拟器上运行的测试。</p></div><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>回到上篇博客创建好的测试项目，在app模块的build.gradle文件中，加上UiAutomator库的依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    ...</span><br><span class="line">    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加之后Android Studio可能不会立刻下载依赖，所以为了确保可以使用uiautomator，需要在下图手动Apply一下：</p><p><img data-src="https://i.loli.net/2021/08/06/ljXOiHw7F5KQZIu.png" alt="下载依赖"></p><h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><p>UI测试的第一步当然是定位元素，uiautomatorviewer工具可以做到这一点，它位于 <mark class="label primary">android-sdk/tools/bin/</mark> 目录，android-sdk就是下图中的sdk路径：</p><p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>打开终端，定位到上述目录中，然后运行uiautomatorviewer：</p><p><img data-src="https://i.loli.net/2021/08/06/1lOsYUNK7haAxnV.png" alt="运行uiautomatorviewer"><br>如果上篇博客的环境都准备好了，就能打开uiautomatorviewer窗口，如果有已启动的设备，这里我打开了一个 <a href="https://jmyblog.top/AppUI-AutoTest-1/#%E5%90%AF%E5%8A%A8Android-Emulator">安卓模拟器</a> ，点击窗口左上角第二个按钮，就能获取设备当前页面的screenshot，右侧是页面元素信息，通过这些信息，我们就可以定位元素了。<br>UiAutomator提供了findObject()方法定位UiObject元素，以定位上图页面底部Login按钮为例：</p><div class="tabs" id="定位元素写法"><ul class="nav-tabs"><li class="tab active"><a href="#定位元素写法-1">定位元素写法 1</a></li><li class="tab"><a href="#定位元素写法-2">定位元素写法 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="定位元素写法-1"><p>Kotlin：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val loginButton: UiObject = device.findObject(</span><br><span class="line">        UiSelector().text("Login").className("android.widget.TextView")</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="定位元素写法-2"><p>Java：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UiObject loginButton = device.findObject(new UiSelector()</span><br><span class="line">        .text("Login")</span><br><span class="line">        .className("android.widget.TextView"));</span><br></pre></td></tr></tbody></table></figure></div></div></div><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下来我们就可以编写代码测试App了，我还是用了 <a href="https://jmyblog.top/AppUI-AutoTest-1/">之前文章</a> 里的测试App，可以在 <a href="https://github.com/webdriverio/native-demo-app/releases">这里</a> 下载，然后把它安装到模拟器里。<br>我们来编写最简单的两个Case，登录和注册。</p><p><img data-src="https://i.loli.net/2021/08/06/6wSmbHJQcOIKTgz.png" alt="登录和注册页面"></p><div class="note info"><p>首先是登录，要实现登录操作，我们要切换到登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要先切换到登录页面，再切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p></div><p>这里我只贴出一个步骤，是去打开app的登录页面，就使用上面的元素定义，其它步骤都可以参考这个完成：</p><p><img data-src="https://i.loli.net/2021/08/06/9UVPvcLlJqCKRzD.png" alt="打开登录页面测试步骤"><br>其中，launchApp方法依然是 <a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing#accessing-ui-components">官网提供</a> 的，先定义了一个device对象，通过该对象连接设备，然后再利用PackageName打开对应的App，最后我们定位元素并点击进入登录页面。<br>设备当前打开App的PackageName可以通过以下命令得到：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window | grep -E 'mCurrentFocus'</span><br></pre></td></tr></tbody></table></figure><p>这就是我们使用Ui Automator编写的第一个可以运行的测试。</p><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>有三种方式可以运行Ui Automator测试，第一种是直接在编辑器里点击运行图标：</p><p><img data-src="https://i.loli.net/2021/08/06/LualXZYnq1R49Bv.png" alt="两个地方都可以点"><br>第二种方式是通过adb shell在命令行运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -w -m -e debug false -e class 'com.example.androidtest.ExampleInstrumentedTest#openLoginPage' com.example.androidtest.test/androidx.test.runner.AndroidJUnitRunner</span><br></pre></td></tr></tbody></table></figure><p>第三种方式也是在命令行运行，上篇博客提到，因为Ui Automator测试位于androidTest文件夹，是一种插桩测试，所以可以利用gradle直接运行，和mvn test执行测试的道理差不多：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew connectedAndroidTest</span><br></pre></td></tr></tbody></table></figure><p>后两种运行方式，官网上也给出了 <a href="https://developer.android.com/studio/test/command-line">详细介绍</a> ，并且提供了各个参数的含义。<br>值得一提的是，用第三种方式运行测试还会生成两个测试结果文件，一个是html格式，在 <mark class="label info">path_to_your_project/module_name/build/reports/androidTests/connected/</mark> 目录中：</p><p><img data-src="https://i.loli.net/2021/08/06/S7AfZ3yGMFXTRYo.png" alt="测试报告"><br>另一个是xml格式，在 <mark class="label info">path_to_your_project/module_name/build/outputs/androidTest-results/connected/</mark> 目录中。</p><h2 id="PageObject"><a href="#PageObject" class="headerlink" title="PageObject"></a>PageObject</h2><p>尽管我们已经写好了测试，但把所有的步骤都放在一个文件中显然不是good practice，所以我们可以按照Page Object模式将代码进行优化，把before方法、页面元素、操作步骤和测试分开，完成后的代码结构如下：</p><p><img data-src="https://i.loli.net/2021/08/07/piOLVbxPScuAw5t.png" alt="PageObject"><br>其中，selectors包里是各个页面的元素，pages包则用来存放各个页面的操作方法，公用的方法比如launchApp都放在BasePage里，真正的测试用例则统一放在tests包里，我已将 <a href="https://github.com/Summyj/UiAutomatorDemo">代码库</a> 上传到了github，不足之处还请大家批评指正。<br>以下是用三种方式执行测试的视频，直接点击编辑器图标运行大概12秒，用adb运行16秒，gradle运行也不过25秒：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE5MDYyMjk2OA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
    
    
    <summary type="html">利用uiautomatorviewer定位元素并编写代码。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="uiautomatorviewer" scheme="https://jmyblog.top/tags/uiautomatorviewer/"/>
    
  </entry>
  
  <entry>
    <title>UiAutomator初体验(上)</title>
    <link href="https://jmyblog.top/ui-automator-test/"/>
    <id>https://jmyblog.top/ui-automator-test/</id>
    <published>2021-08-03T03:20:35.000Z</published>
    <updated>2022-01-24T11:50:16.327Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/31/hT5tpAjqk2xZN8L.png"><blockquote><p>前段时间博主写了 <a href="https://jmyblog.top/AppUI-AutoTest/">系列文章</a> 来介绍移动端的UI自动化，主要工具是Appium。之后发现Appium还是存在一些问题，比如定位不到元素、运行时间长等等。<br>后来又针对Android平台spike了其它的工具，比如Espresso、UiAutomator，它们都是安卓官网推荐的测试工具，参考了网上诸多文章，如 <a href="https://medium.com/@phamngocson.l13cla/espresso-vs-ui-automator-66af8232259d">Espresso vs Ui Automator</a>。<br>结论是Espresso拥有更多高级的方法，但它对代码能力的要求比较高，所以对于一般QA来说难以使用，而UiAutomator更容易上手，所以我选择了UiAutomator，本来想用一篇博客介绍的，但篇幅太长，所以分了三篇博客分享。</p></blockquote><h2 id="UiAutomator介绍"><a href="#UiAutomator介绍" class="headerlink" title="UiAutomator介绍"></a>UiAutomator介绍</h2><p>UiAutomator是什么呢？参考 <a href="https://developer.android.com/training/testing/ui-automator">官网介绍</a> ：</p><div class="note info"><p>UI Automator 测试框架提供了一组 API，用于构建在用户应用和系统应用上执行交互的界面测试。通过 UI Automator API，您可以执行在测试设备中打开“设置”菜单或应用启动器等操作。UI Automator 测试框架非常适合编写黑盒式自动化测试，此类测试的测试代码不依赖于目标应用的内部实现细节。</p></div><p>hummm…官方介绍总是给人一种似懂非懂的感觉，不过问题不大，接下来我们通过实践来深入了解UiAutomator <span class="emoji" alias="wink" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.下载 <a href="https://developer.android.com/studio">Android Studio</a>，下载后打开以下设置确保sdk location正确：</p><p><img data-src="https://i.loli.net/2021/05/20/2eIfnzWbQY4VsNP.png" alt="sdk location"><br>2.下载 <a href="https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u292b10.pkg">JDK 8</a> ，这里版本一定要是8，否则打不开uiautomatorviewer工具。<br>3.下载 <a href="https://download.eclipse.org/eclipse/downloads/drops4/R-4.20-202106111600/">swt</a> ，滑到页面底部找到这里，按照对应平台下载即可：</p><p><img data-src="https://i.loli.net/2021/08/04/k28chb6SsBjpIwH.png" alt="下载swt"><br>这个也是为了打开uiautomatorviewer工具，因为uiautomatorviewer自带的swt包有一些问题，所以得自己下载一个，这个感觉是uiautomatorviewer的一个bug。<br>下载之后解压，然后把里面的swt.jar重命名为swt2.jar：</p><p><img data-src="https://i.loli.net/2021/08/04/WPT7VcmHapot1J5.png" alt="swt2.jar"><br>进入上文的sdk location目录，然后再依次打开<mark class="label primary">tools/lib/x86</mark> 目录，可以看到uiautomatorviewer自带的swt包，然后复制刚才的swt2.jar到这里(我也不知道为啥不干脆替换掉原有的swt包)，下面的x86_64目录也要做同一操作：</p><p><img data-src="https://i.loli.net/2021/08/04/r2IeHSdCPiasYbn.png" alt="添加swt2.jar"><br>4.所有依赖都已经下载完啦，然后我们来设置环境变量，打开你本地的 .bash_profile 或者 .zshrc 文件，没有就新建一个，之后输入下边的设置，直接粘贴改动即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export ANDROID_HOME=path/to/your/Android sdk (eg:/Users/usr/Library/Android/sdk)</span><br><span class="line">export PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">AAPT_HOME=/path/to/your Android sdk build-tools (eg:/Users/usr/Library/Android/sdk/build-tools/28.0，这里的28.0是我本地的版本，你需要打开对应目录查看自己的版本然后修改。)</span><br><span class="line">export AAPT_HOME</span><br><span class="line">export PATH=$PATH:$AAPT_HOME</span><br></pre></td></tr></tbody></table></figure><p>保存后执行 <strong>source .bash_profile</strong> 或者 <strong>source .zshrc</strong> 使配置生效，然后执行 <strong>java -version</strong>，确保java版本正确。</p><h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>打开Android Studio创建新项目，因为我们是要写测试，而不是开发App，所以选择No Activity后继续，这里我把项目名和包名改成了自定义的，你也可以改成别的；项目语言有Java和Kotlin，其实两者非常相像，语法略有不同，这里我选了Kotlin，你也可以用Java，影响不大：</p><p><img data-src="https://i.loli.net/2021/08/04/1Hz826lcKeNWPwV.png" alt="创建项目"><br>之后Android Studio会开始用Gradle构建你的项目，右下角可以看到进度，构建完成后，在页面左上角下拉框中切换到Project视图，可以看到项目结构：</p><p><img data-src="https://i.loli.net/2021/08/04/dgVfhKHEDsjRt95.png" alt="项目结构"></p><h2 id="熟悉项目结构"><a href="#熟悉项目结构" class="headerlink" title="熟悉项目结构"></a>熟悉项目结构</h2><p>这是一个最基本的安卓项目代码结构，根目录和app模块各有一个build.gradle文件，我们重点关注 <strong>app</strong> 模块，src里有三个目录，main目录里一般存放App的activity文件，这里没有是因为我们前边选择了No Activity，不过这个与测试无瓜。<br>其他两个目录 <strong>androidTest</strong> 和 <strong>test</strong> 分别用来存放app的插桩测试(Instrumented tests)和单元测试，单元测试我们都知道，那什么是插桩测试呢？<br>同样引用 <a href="https://developer.android.com/studio/test#test_types_and_location">官网介绍</a>：</p><div class="note info"><p>插桩测试，位于 module-name/src/androidTest/java/ 目录，这些测试在硬件设备或模拟器上运行。这些测试有权使用 Instrumentation API，可让您获取某些信息（例如您要测试的应用的 Context），并且可让您通过测试代码来控制受测应用。在编写集成和功能界面测试来自动执行用户交互时，或者当您的测试具有模拟对象无法满足的 Android 依赖项时，可以使用这些测试。</p></div><p>很明显，我们要写的就是这种测试，所以无论是UiAutomator测试，还是上文提到的Espresso测试，都应该写在各模块文件夹里的AndroidTest目录中。</p>]]></content>
    
    
    <summary type="html">UiAutomator介绍，环境准备和测试项目的创建。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Android" scheme="https://jmyblog.top/tags/Android/"/>
    
    <category term="UiAutomator" scheme="https://jmyblog.top/tags/UiAutomator/"/>
    
  </entry>
  
  <entry>
    <title>工作三年后</title>
    <link href="https://jmyblog.top/three-years-after-graduation/"/>
    <id>https://jmyblog.top/three-years-after-graduation/</id>
    <published>2021-07-24T04:47:29.000Z</published>
    <updated>2022-01-24T11:50:16.326Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/31/FoOkzjwaQncAq3l.png"><h2 id="2018：传说中的试用期"><a href="#2018：传说中的试用期" class="headerlink" title="2018：传说中的试用期"></a>2018：传说中的试用期</h2><p>三年前的今天「2018.7.24」，我入职了，正式成为了打工人，也开始了6个月的试用期。<br>入职第二天，我就去印度浦那参加了为期五周的 <a href="https://jmyblog.top/TWUJourney/">TWU培训</a> ，收获颇丰；培训结束之后，又无缝衔接去了一个国外的项目，TWU练的散装英语正好派上了用场。<br>领取了新的MacBook Pro电脑，18年有touch bar那款，当时的价格大概1.8w左右，给员工配新款Mac，公司真的很良心了。<br>按照公司试用期的安排，我有了一个buddy，她可以帮助我度过试用期。我的buddy也是毕业之后来公司的，刚入职时是开发，后来又做测试，是一个代码能力强的QA。<br>在她的帮助下，我逐渐融入了项目的节奏和公司文化，也开始了一系列学习，比如英语打卡、测试知识之类，总之这一年的关键字就是「学习」，然后试用期就这样无惊无险的过去了，也没加过班，一切都很顺利，我觉得自己找到了「钱多事少离家近」的工作。</p><h2 id="2019：开心搬砖，快乐生活"><a href="#2019：开心搬砖，快乐生活" class="headerlink" title="2019：开心搬砖，快乐生活"></a>2019：开心搬砖，快乐生活</h2><p>这一年，是三年中最开心的一年了。<br>因为试用期结束，工作也稳定下来了，每天干的活都差不多，逐渐明白了「搬砖」是什么意思。再后来，除了搬砖，还能腾出很多时间思考和学习。<br>由于一直在一个项目组，和周围的同事们以及客户都很熟悉，每天上班唠嗑也很欢乐，有时甚至一想到第二天要上班，还很期待，一年中项目里有人走，也有人进来，但我的快乐一直不变。<br>除此之外，公司经常会办一些节日活动，比如3.7女生节的微景观DIY，第二天还放了半天假；还有万圣节做南瓜灯、中秋节做月饼，平时的人文关怀也不少。</p><p><img data-src="https://i.loli.net/2021/08/01/t859kegJHNB6b7o.jpg" alt="公司的节日活动"></p><p>这一年我搬了两次家，第一次搬到了一个朝北的房子(住进去之前我一直以为这房子是朝东的<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)，装修很不错，没什么可以自己折腾的空间，而且朝北让人住着很压抑，所以住了一个月又搬了。搬到了同小区另一个朝南的房子，装修一般，但正合我意，一番折腾之后终于把房子改造成了自己喜欢的风格，而且从此后我终于分得请南北了<span class="emoji" alias="satisfied" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p><img data-src="https://i.loli.net/2021/08/01/B4PdgGpbyAROq3t.jpg" alt="第一次搬家(左)第二次搬家(右)"><br>后来还安排了投影仪和烤箱，看电影、研究厨艺也是一种享受。</p><p><img data-src="https://i.loli.net/2021/08/01/t2367xjFVWkTLrR.jpg" alt="投影仪真香"><br><img data-src="https://i.loli.net/2021/08/01/OmK46iCosyIgezG.jpg" alt="各种烤"><br>住处离公司大概5公里，但没有直达的公交，于是买了一个电动滑板车🛴，每天骑着滑板去上班，单程15-20分钟就能到公司，不能骑车的天气就打车，然后就很少坐公交了。</p><p><img data-src="https://i.loli.net/2021/08/01/XNd4KMO5ZcWsalL.jpg" alt="我的滑板车"><br>自从我用滑板出行后，发现通勤路上的滑板车越来越多了，公司里也有人买了，有次澳洲的客户来西安出差，还被我成功安利，回去后也买了一辆<span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span><br>一年中也有和同事一起去 <a href="https://jmyblog.top/5-1-travel/">青海</a>、<a href="https://jmyblog.top/6-6-travel/">色达</a> 旅行，和朋友去 <a href="https://jmyblog.top/HuaShanTravel/">爬山</a> 等 ，经常出去玩，这一年就这样快乐的结束了。</p><h2 id="2020：疫情下的打工人，活着"><a href="#2020：疫情下的打工人，活着" class="headerlink" title="2020：疫情下的打工人，活着"></a>2020：疫情下的打工人，活着</h2><p>2020，对大多数人来讲都是艰难的一年吧，我也不例外。<br>因为新冠疫情，过年后不能回公司上班，但后来又说要在家办公，我也没带电脑，幸亏有个同事帮我把电脑寄到了家，然后就开始在家办公，和家人一起待了1个多月，闲暇时互相切磋麻将技艺。毕业后能有这么多和家人相聚的时间真的难得，以后估计也很少有这样的机会了，所以我们都很珍惜。</p><p>2月底，我终于回到了西安，继续在家办公，期间一直潜心钻研厨艺，吃着美食、用投影仪看电影追剧，宅在家的日子倒也十分自在。<br>4月初，毕业后的第一个项目在疫情的影响下提前结束了，但下个项目还没有着落，所以被强制休假到月底，才去公司上班。然后开始了一个多月自我学习和培训的日子，也算充实。</p><p>6月初，我终于有了项目，此时国内的疫情已经基本控制住了，但国外却越愈发严重起来，这也是我第一个项目提前结束的原因，所以新项目自然是国内项目。<br>早听说过国内项目加班多节奏快，而我在公司近两年的时间里，都在国外项目，从来没加过班。经历过的国内软件项目，还是毕业前 <a href="https://jmyblog.top/%E6%9C%AA%E6%9D%A5%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7-Part2/">实习</a> 的时候，而那时的体验并不好，所以刚开始不太想去，但此时形势很严峻，我没有别的选择，只能硬着头皮上了。</p><p>刚开始的一个项目，虽有些不适，但也还能撑得住，有个同事听说我工作两年没加过班表示非常震惊，他是不久前来公司的，可能之前在别的公司经常加班吧，对比下来，我还真是挺「幸运」的。<br>同时，公司里也有一些微妙的变化，有人离职了，也有人「被」离职。人也越来越多了，办公室重新装修，原先的好多休闲区和休息区被拆掉，全部换成了工位，有的地方连会议室都摆上了工位，让人倍感压抑。</p><p>后来，这个项目终于结束了，但还是没有适合的国外项目可以去，所以又去了另一个国内项目，节奏更加紧张，这次我 <a href="https://jmyblog.top/Silent-protest/">没撑住</a> ，心态直接崩了，然后默默的下了项目。<br>此时已是11月底，剩下的一个月，是一段五味杂陈、胡思乱想的日子，2020就这样结束了。</p><h2 id="2021：优雅的躺平"><a href="#2021：优雅的躺平" class="headerlink" title="2021：优雅的躺平"></a>2021：优雅的躺平</h2><p>2021，我的本命年，目前没有什么奇怪的事情发生。<br>前四个月我是 <a href="https://jmyblog.top/my-1-3-part-of-2021/">这样度过</a> 的，总之就是拨云见日的一段时光，到今天，我已经在新项目上待了三个月，整体来说挺不错，因为熟人很多，也学了不少东西，不出意外今年会在这个项目上一直做下去，这样倒也不错，至于明年之后会如何，见招拆招吧。</p><p>到今天，我已经工作整整三年了。<br>三年以前，我想开心的工作，现在，我只想优雅地躺平<span class="emoji" alias="relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8">😌</span>，我是一个习惯被安排的人，习惯于被指点江山，被激扬文字，玩游戏喜欢玩辅助，所以工作也选择了辅助角色。<br>在公司我一直无争无为，默默搬砖，除了跟在一个项目工作过的人彼此认识之外，也没有什么大的影响力，可能我忽悠不了别人，也很难被人忽悠吧。搁娱乐圈，这就叫做「搬砖三年，归来仍是素人。」</p><p>记得刚入职的时候，有同事向我感慨「我要是21岁，就可劲儿造」，但我却一直心如止水，「造」不起来。后来，又有很多同事说我太佛系，不像个年轻人。<br>其实我一直都尽力搬砖，遵纪守法，不逃税不漏税，好好活着，不给别人找麻烦，作为社会人，我觉得已经很合格了，我是一个没有太多欲望的人，这就是我对自己的期望，如果这样就叫做「佛系」和「躺平」的话，那就是吧。</p><p>工作后感觉时间过的更快了，好像昨天才拿到公司的offer，转眼就已经三年了，这三年我一直一个人住，所以也练就了不错的 <a href="https://jmyblog.top/myCookingWay/">厨艺</a> ，偶尔请朋友和同事来家里小聚，生活倒也平淡自在。有人老想回到过去，但我还是喜欢现在的生活，因为过去太迷茫，对未来有太多恐惧，还是现在选择更多一些，更自由。<br>按照公司的制度，我又可以更换新的办公电脑了，这次应该是16寸的MacBook Pro，之前的电脑也打算按照员工优惠回购，收拾心情，重新出发。</p><h2 id="我眼里的车和房"><a href="#我眼里的车和房" class="headerlink" title="我眼里的车和房"></a>我眼里的车和房</h2><p>打工三年，我的月薪从税前四位数变成了税后五位数，这三年我每个月都攒钱，一直想买个二手的小房子，期望是用公积金就可以还贷款，这样不用降低生活质量。</p><p>五月份我开始实地看房，但一直找不到合适的，房价真的虚高，我的期望根本达不到，以我能拿出手的首付，只能用得上商贷，想用公积金贷款，只能掏更多的首付，凭我一人之力，目前根本做不到。<br>至于买新房，更难，虽然我有购房资格，但抛开价格不谈，现在买房必然摇号，我并不是刚需，所以希望渺茫。更别说现在无良开发商这么多，少有不维权的楼盘，所以买房这场游戏，我只能暂时被劝退。<br>最近，西安正在进行二手房价格调控，政府出台了指导价，虽不能指望对目前涨到最高点的房价有太多约束，但总归市场还是有一些震荡，买卖双方还在观望，且先看着吧。</p><p>至于买车？倒也不是不能买，但买了车，停哪呢，公司的车位已经排到了2023年，而且在西安开车太难了，除了限号，就是堵车，更别提车到手就贬值，还得买保险保养什么的，主要我一个人，买车的需求实在不强烈。<br>还是骑上我心爱的小滑板吧，它永远不会堵车。</p>]]></content>
    
    
    <summary type="html">搬砖三年，归来仍是素人。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jmyblog.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="工作" scheme="https://jmyblog.top/tags/%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="生活" scheme="https://jmyblog.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>安卓模拟器快速冷启动</title>
    <link href="https://jmyblog.top/emulator-cold-boot/"/>
    <id>https://jmyblog.top/emulator-cold-boot/</id>
    <published>2021-07-15T01:54:40.000Z</published>
    <updated>2022-01-24T11:50:16.322Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>问题</p></div><p>博主最近搬砖，发现安卓模拟器有一些小bug，最常见的是App打不开，得冷启动模拟器后，卸载App重新安装才可以。由于项目暂时用不了真机，只能在模拟器测试，所以经常遇到这个问题，每次都得重复这个步骤：<mark class="label primary">冷启动模拟器-&gt;卸载App-&gt;安装App</mark>。</p><div class="note info"><p>解决</p></div><p>首先冷启动模拟器：</p><p><img data-src="https://i.loli.net/2021/08/03/rTQ1wObeRgiEqya.png" alt="Cold Boot"><br>卸载测试App，之后点击模拟器右侧菜单栏 <strong>…</strong> 按钮进入高级设置，然后进入Snapshots选项，点击TAKE SNAPSHOT：</p><p><img data-src="https://i.loli.net/2021/08/03/JYDru2NTiqeoG8Q.png" alt="TAKE SNAPSHOT"><br>之后可以看到新的snapshot，这里我命名为quickboot：</p><p><img data-src="https://i.loli.net/2021/08/03/ZEwqUF9OSnTQaI6.png" alt="命名snapshot"><br>打开AVD Manager页面，编辑刚才的模拟器，在高级设置中选择通过snapshot启动模拟器，点击finish：</p><p><img data-src="https://i.loli.net/2021/08/03/dl2a1SJIHDR6knA.png" alt="编辑设置"><br>最后再打开编辑页面检查一遍，确保设置正确，我自己设置的时候，发现这里要选择两次才可以，感觉又是AVD Manager的一个bug。<br>设置完成后，以后再打开模拟器测试，就是一个干净的测试环境了，只需要再安装测试App就可以了，再也不用经常手动冷启动了。</p>]]></content>
    
    
    <summary type="html">通过保存snapshot快速冷启动安卓模拟器。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="emulator" scheme="https://jmyblog.top/tags/emulator/"/>
    
    <category term="coldBoot" scheme="https://jmyblog.top/tags/coldBoot/"/>
    
  </entry>
  
  <entry>
    <title>Charles连接iOS和Android设备</title>
    <link href="https://jmyblog.top/CharlesConnect/"/>
    <id>https://jmyblog.top/CharlesConnect/</id>
    <published>2021-07-05T07:12:00.000Z</published>
    <updated>2022-01-24T11:50:16.315Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这段时间工作时需要用到Charles来抓包移动端请求，配置的过程中踩了不少坑，所幸最后还是成功了，所以记录一下折腾的过程，非常详细，包括iOS和Android两个平台，免得以后又忘了。</p></div><h2 id="配置Charles"><a href="#配置Charles" class="headerlink" title="配置Charles"></a>配置Charles</h2><h3 id="下载Charles-CA"><a href="#下载Charles-CA" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h3><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate</mark>：<br><img data-src="https://i.loli.net/2021/07/06/6E3AXOaWcfgodDT.png" alt="下载CharlesCA到本地"></p><h3 id="信任Charles-CA"><a href="#信任Charles-CA" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h3><p>之后打开电脑的 Keychain Access，搜索 “Charles” 找到Charles CA，然后设置它为始终信任：<br><img data-src="https://i.loli.net/2021/07/06/SEqwaRA6sGPQ3zl.png" alt="设置信任证书"></p><p>Charles的基础配置就先这样，下边连接设备的过程中，还需要设置一些东西。</p><h2 id="iOS抓包"><a href="#iOS抓包" class="headerlink" title="iOS抓包"></a>iOS抓包</h2><h3 id="iOS-Simulator"><a href="#iOS-Simulator" class="headerlink" title="iOS Simulator"></a>iOS Simulator</h3><h4 id="下载Charles-CA-1"><a href="#下载Charles-CA-1" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开Charles，依次点击菜单栏 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate in iOS Simulators</mark>：<br><img data-src="https://i.loli.net/2021/07/07/kzsAhKJD8icNY5M.png" alt="下载CharlesCA到iOS Simulator"><br>之后Charles会弹出添加成功的提示：<br><img data-src="https://i.loli.net/2021/07/07/L1mPro8s7UZxARI.png" alt="添加成功提示"><br>打开iOS Simulator，进入<mark class="label primary">Settings - General</mark>，此时应该有一个 <strong>Profile</strong> 选项显示：<br><img data-src="https://i.loli.net/2021/07/07/c1x7tjPR8S9EI3Q.png" width="230" height="500" alt="CA Profile"><br>如果没有的话， 开启Charles的 <mark class="label primary">Proxy-macOS Proxy</mark>设置，再打开Simlator的Safari浏览器，输入 <strong>chls.pro/ssl</strong>，手动下载Charles，之后再去<mark class="label primary">Settings - General</mark>就可以看到Profile了，里面就是下载的Charles CA:<br><img data-src="https://i.loli.net/2021/07/07/9KhcPUoGeL7s3Vu.png" alt="手动下载CharlesCA到iOS Simulator"></p><h4 id="安装Charles-CA"><a href="#安装Charles-CA" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>点击上边下载好的Charles CA，一路点击安装即可，直到CA为Verified：<br><img data-src="https://i.loli.net/2021/07/07/U19N8bHGYKpifIc.png" alt="安装Charles CA到iOS Simulator"></p><h4 id="信任Charles-CA-1"><a href="#信任Charles-CA-1" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>去<mark class="label primary">Settings - General - About - Certificate Trust Settings</mark>，打开Charles CA的信任按钮就好了：<br><img data-src="https://i.loli.net/2021/07/07/6B19UTo7jVrYIia.png" width="230" height="500" alt="信任CA"></p><h4 id="抓取Simulator请求"><a href="#抓取Simulator请求" class="headerlink" title="抓取Simulator请求"></a>抓取Simulator请求</h4><p>打开Charles, 确保 <mark class="label primary">Proxy-macOS Proxy</mark>设置是开启的，这里还需要设置Charles的SSL Proxy，这样才能抓取到Https的请求，打开<mark class="label primary">Proxy-SSL Proxy Settings</mark>，添加你想要进行Https抓取的url地址，此后Charles只会抓取此地址的Https请求：<br><img data-src="https://i.loli.net/2021/07/07/fVdGbDXUhPlejHg.png" alt="SSL Proxy Settings"><br>然后就可以正常抓取Simulator里的Https请求了：<br><img data-src="https://i.loli.net/2021/07/07/7ihUkHImbWsKJfV.png" alt="Simulator请求"><br>其他请求则会提示需要开启SSL Proxy Settings：<br><img data-src="https://i.loli.net/2021/07/07/orQJheFv2mKna91.png" alt="需要开启SSL提示"></p><h3 id="iOS-真机"><a href="#iOS-真机" class="headerlink" title="iOS 真机"></a>iOS 真机</h3><p>此部分还没有尝试过，后续会更新。</p><h2 id="Android抓包"><a href="#Android抓包" class="headerlink" title="Android抓包"></a>Android抓包</h2><h3 id="Android-Emulator"><a href="#Android-Emulator" class="headerlink" title="Android Emulator"></a>Android Emulator</h3><h4 id="设置Wifi-Proxy"><a href="#设置Wifi-Proxy" class="headerlink" title="设置Wifi Proxy"></a>设置Wifi Proxy</h4><p>打开Charles，点击 <mark class="label primary">Help - SSL Proxying - Install Charles Root Certificate on a Mobile device or Remote Broswer</mark>:<br><img data-src="https://i.loli.net/2021/07/07/GLb9lJ2gQIWaUY1.png" alt="Charles Proxy"><br>之后会打开一个弹窗，上边是你的本地IP和Charles默认端口，先别关掉它：<br><img data-src="https://i.loli.net/2021/07/07/98VG6rC3EPwIx4n.png" alt="Proxy Detail"><br>先确保模拟器网络连接正常，之后去 <mark class="label primary">Settings-Network &amp; internet-WiFi</mark>，可以看到连接到了<strong>AndroidWifi</strong>，然后按照下图设置此Wifi的Proxy，点击Wifi后的设置按钮，点击铅笔图标，将Proxy设置为Manual，Hostname和Port就是上边弹窗里对应的值：<br><img data-src="https://i.loli.net/2021/07/07/Z159rMfjOetoEuS.png" alt="设置Wifi Proxy"></p><h4 id="下载Charles-CA-2"><a href="#下载Charles-CA-2" class="headerlink" title="下载Charles CA"></a>下载Charles CA</h4><p>打开模拟器的Chrome浏览器，输入 <strong>chls.pro/ssl</strong>，之后弹出下载Charles CA的提示框，选择下载：<br><img data-src="https://i.loli.net/2021/07/07/Pfxc64zlbBUF97y.png" width="230" height="500" alt="下载CA"><br>如果没有网络，尝试冷启动模拟器，看模拟器下拉框中有没有关于Wifi的限制连接提示，点击之后选择仍要连接，应该就有网了，之后再去浏览器下载CA：<br><img data-src="https://i.loli.net/2021/07/07/7M98LEFyqQSitXa.png" width="650" height="550" alt="连接网络"><br>如果这样还是下载不了，那么打开Charles，点击点击 <mark class="label primary">Help - SSL Proxying - Save Charles Root Certificate</mark> 将Charles CA下载到本地:<br><img data-src="https://i.loli.net/2021/07/07/i2JhtF56X9kWI8L.png" alt="Save Charles Root Certificate"><br>然后手动将文件拖到模拟器，也是一样的。</p><h4 id="安装Charles-CA-1"><a href="#安装Charles-CA-1" class="headerlink" title="安装Charles CA"></a>安装Charles CA</h4><p>进入模拟器<mark class="label primary">Settings - Security - Encryption&amp;credentials</mark>。</p><blockquote><p>Android 11:</p></blockquote><p>选择Install a certificate，点击CA certificate，选择Install anyway，最后点击下载的Charles CA文件，就可以安装成功了：<br><img data-src="https://i.loli.net/2021/07/07/JcGMQ2ysOYE1WlH.png" alt="Android11安装Charles CA"></p><blockquote><p>其它版本</p></blockquote><p>选择 Install from SD card，你就会看到上面下载的Chares CA文件，点击进行安装，名字可以随便写，Credential Use选择VPN and apps：<br><img data-src="https://i.loli.net/2021/07/07/Hpjz6bJVlr8L4eT.png" alt="安装Charles CA"></p><p>安装完成之后去<mark class="label primary">Encryption&amp;credentials-User credentials</mark> 和 <mark class="label primary">Encryption&amp;credentials-Trusted credentials</mark>应该都可以看到安装成功的Charles CA文件：<br><img data-src="https://i.loli.net/2021/07/07/5hSwycPTOI1rjqN.png" width="600" height="550" alt="Charles CA"></p><h4 id="信任Charles-CA-2"><a href="#信任Charles-CA-2" class="headerlink" title="信任Charles CA"></a>信任Charles CA</h4><p>这里是个大坑，很重要，根据 <a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">Charles官方文档</a> 的Android部分所述 ，由于Charles证书是用户安装的，而Android 7.0以后，系统默认不信任用户安装的证书。所以即使我们安装了Charles证书，也并不能成功进行抓包，此时有两种解决办法：</p><ul><li>办法一：使用官网做法，在你要抓包的应用程序源代码中添加配置文件，使该应用程序信任用户安装的Charles证书。</li><li>办法二：将Charles证书的属性更改为系统安装的证书，从根本上解决问题，但是网上能找到的成功案例不多，不过适用于无法改动应用源代码的同学。</li></ul><p>这里我用的办法一，添加配置文件，按照官网说的做就行，在代码库的 <strong>res/xml/</strong> 路径添加network_security_config.xml文件，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;network-security-config&gt; </span><br><span class="line">  &lt;debug-overrides&gt; </span><br><span class="line">    &lt;trust-anchors&gt; </span><br><span class="line">      &lt;!-- Trust user added CAs while debuggable only --&gt;</span><br><span class="line">      &lt;certificates src="user" /&gt; </span><br><span class="line">    &lt;/trust-anchors&gt; </span><br><span class="line">  &lt;/debug-overrides&gt; </span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></tbody></table></figure><p>之后在Manifest.xml里添加下边的reference就行:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;application android:networkSecurityConfig="@xml/network_security_config" ... &gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></tbody></table></figure><p>这里只配置了应用的debug版本，作改动后重新build代码，之后将生成的debug版本.apk文件安装到模拟器，这时信任Charles CA就设置成功了。</p><h4 id="抓取Emulator请求"><a href="#抓取Emulator请求" class="headerlink" title="抓取Emulator请求"></a>抓取Emulator请求</h4><p>打开Charles, 然后<strong>关闭</strong> <mark class="label primary">Proxy-macOS Proxy</mark>设置，其它内容按照上文的 <a href="https://jmyblog.top/CharlesConnect/#%E6%8A%93%E5%8F%96Simulator%E8%AF%B7%E6%B1%82">抓取Simulator请求</a> 部分做就行了，这里不再赘述。</p><h3 id="Android真机"><a href="#Android真机" class="headerlink" title="Android真机"></a>Android真机</h3><p>此部分还没有尝试过，后续会更新。</p><h2 id="利用Breakpoints修改并发送请求"><a href="#利用Breakpoints修改并发送请求" class="headerlink" title="利用Breakpoints修改并发送请求"></a>利用Breakpoints修改并发送请求</h2><h3 id="设置Breakpoints"><a href="#设置Breakpoints" class="headerlink" title="设置Breakpoints"></a>设置Breakpoints</h3><p>通过设置Breakpoints，我们可以修改请求的Request和Response, 鼠标定位到你想要修改的请求，之后右键勾选BreakPints即可，之后再次进行相同请求时，就会出现编辑请求的页面，可以修改Request和Response：<br><img data-src="https://i.loli.net/2021/07/07/chOZeBxnHwtNSyM.png" alt="设置Breakpoints"></p><h3 id="管理Breakpoints"><a href="#管理Breakpoints" class="headerlink" title="管理Breakpoints"></a>管理Breakpoints</h3><p>打开<mark class="label primary">Proxy-Breakpoints Settings</mark>，可以打开管理Breakpoints的弹窗，里面包括已经设置Breakpoints的url，以及Breakpoints的类型：Request和Response<br><img data-src="https://i.loli.net/2021/07/07/3G1OlPSApsaek2b.png" alt="Breakpoints Settings"><br>如果只想修改请求的Request或Response，只需要勾选对应的选项即可：<br><img data-src="https://i.loli.net/2021/07/07/pzOy7Cq2HEDlXrT.png" alt="设置具体抓取类型"></p>]]></content>
    
    
    <summary type="html">抓包移动端请求，测试异常情况。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Charles" scheme="https://jmyblog.top/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>办公室版围城</title>
    <link href="https://jmyblog.top/SomethingsInWork/"/>
    <id>https://jmyblog.top/SomethingsInWork/</id>
    <published>2021-06-27T03:11:26.000Z</published>
    <updated>2022-01-24T11:50:16.318Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://i.loli.net/2021/07/18/s819qyRpVilb2Am.png"><ul><li>城市：X市</li><li>单位：才华有限公司</li><li>角色：G君/L君/H兄/C君/F兄/D兄/王铁锤</li></ul><div class="note info"><p><strong>G君和L君入职了。</strong></p><p>作为应届毕业生的G君，是X市土著，已婚，有留学经历。整体看上去比同龄人少了一丝沧桑，看到G君让王铁锤想到了刚入职的自己，但他可没有G君一样优秀的履历。一段时间下来，周围同事对G君也是一致好评，转正只是时间问题。</p><p>L君为社招入职，有3年工作经验，虽与G君同龄但气质更加沉稳，工作上手也很快。与同事相处也很融洽，无槽点，所以王铁锤同样觉得他转正问题不大。</p><p><strong>H兄要下项目了</strong></p><p>作为项目上的大佬，Leader订了蛋糕并举行了roll off仪式，全项目欢送。王铁锤没有去，因为他刚上项目与H兄并不熟悉亦无交流，加上社恐并不想强行social，所以继续坐在工位上忙(mo)碌(yu)。</p><p>G君看到大家都去，也弱弱的问王铁锤「我也要去吗」，王铁锤诚恳回复「可以不去」，但G君依然去social了，王铁锤表示理解，一个新人确实不能冒被人说不合群的风险。</p><p>Social结束后，大家回到工位，王铁锤旁边刚上项目的C君看到王铁锤已在工位，疑惑发问「你是刚回来还是没去」，王铁锤淡淡回复「没去」，C君作惊讶状「你为什么不去」，王铁锤只好回复「因为不熟，所以不想强行social」，C君停止发问且表情复杂。</p><p><strong>D兄、L兄、F兄要离职了。</strong></p><p>D兄在公司over5年了，王铁锤和他比较相熟，也一起呆过几个项目。他为人风趣，在公司朋友很多，经常邀请王铁锤一起聚餐出游。在 <a href="https://jmyblog.top/Silent-protest/">沉默的抗争</a> 事件后也给了王铁锤极大的安慰，或许这个事件对他也有一些影响吧，在后边待了与该事件几个类似的项目后，也离开了。总之，他是一个有能力的人，确实值得更好的。</p><p>L兄也是 <a href="https://jmyblog.top/Silent-protest/">上述事件</a> 主要人员之一。事件后王铁锤某次电梯中首次与L兄相遇，寒暄时得知他要离职的消息，惊讶之余同样表示理解，虽然L兄只在公司一年，但任谁在那种项目待下去，都会受不了的。</p><p>F兄也是王铁锤相熟的同事，一起呆过几个项目，在公司两年左右。在H兄欢送会结束不久，王铁锤得知他要离职的消息，震惊之余也只能祝好，准备线下再找他八卦一波。</p><p>默默离职的D兄/L兄/F兄，对比H兄声势浩大的roll off仪式，不能不让王铁锤感叹世界的参差。</p><p><strong>H兄欢送会之后，王铁锤被告知要开始写下半年的期望了。</strong></p><p>对于以搬一辈子砖的「不内卷生活」为理想的王铁锤而言，每次搞制定期望或年终总结之类活动的时候，他都不知道自己该干点啥。但为了 <a href="https://jmyblog.top/WorkerStates/">生存</a> ，只得按照套路绞尽脑汁的想点啥写出来。王铁锤无语望天，什么时候才能实现「搬砖自由」呢。</p></div>]]></content>
    
    
    <summary type="html">有人入职，有人离职，有人roll off，还有人要写下半年的期望。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="王铁锤" scheme="https://jmyblog.top/tags/%E7%8E%8B%E9%93%81%E9%94%A4/"/>
    
  </entry>
  
  <entry>
    <title>博客Next主题升级</title>
    <link href="https://jmyblog.top/themeUpgrade/"/>
    <id>https://jmyblog.top/themeUpgrade/</id>
    <published>2021-06-16T02:46:28.000Z</published>
    <updated>2022-01-24T11:50:16.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>前几天在优化博客的浏览体验，过程中参考了一些同道博客，发现他们在聊Next主题的v8版本。因为我也用的是这个主题，但我只更新到了v7.8版本，而且浏览了官网，最新的就是v7.8版本，引起了我的疑惑🤔，然后就开始了解惑和升级之路。</p><h2 id="解惑：theme-next-amp-next-theme"><a href="#解惑：theme-next-amp-next-theme" class="headerlink" title="解惑：theme-next&amp;next-theme"></a>解惑：theme-next&amp;next-theme</h2><p>我目前用的是 <a href="https://github.com/theme-next/">theme-next</a> 团队提供的Next主题，最新的是我在用的v7.8版本：<br><img data-src="https://i.loli.net/2021/06/25/h54FWYfywklibjV.png" alt="theme-next-v7.8"></p><p>浏览了同道博客，发现他们用的是 <a href="https://github.com/next-theme">next-theme</a> 团队提供的Next主题，最新版本确实是v8.x：<br><img data-src="https://i.loli.net/2021/06/25/lpjf4UEsiXhkW8M.png" alt="next-theme-v8"></p><p>那么问题来了，同一个主题为什么有两个团队在维护呢？作为一个合格的吃瓜群众🍉，我嗅到了一丝不寻常的气息，果然，有疑惑的不止我一个人：<br><img data-src="https://i.loli.net/2021/06/25/5fkAD2LBXtCyWux.png" alt="同样疑惑的吃瓜群众"></p><p>紧接着我就找到了答案：<br><img data-src="https://i.loli.net/2021/06/25/oliLXKknhpUQG51.png" alt="原来是一场神仙打架"></p><p>好了，疑惑没有了，虽然已经完成了对当前使用主题的一些优化，但为了与时俱进，还是决定使用新团队开发的Next主题，当然，我心中对大佬们的敬畏是一样的😂</p><h2 id="升级之路"><a href="#升级之路" class="headerlink" title="升级之路"></a>升级之路</h2><p>首先git clone新的 <a href="https://github.com/next-theme/hexo-theme-next">next仓库</a> ，通读了read me，然后按照同道文章进行更新，参考了：<a href="https://asurada.zone/post/Update-Next-From-V7-To-V8/">Hexo Next 主题 V7 升级 V8 记录</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>关于配置文件，新团队提出了 <a href="https://hexo.io/docs/configuration.html#Alternate-Theme-Config">Alternate Theme Config 存储配置</a> 的概念，简单来说就是推荐两种方式存放主题配置文件：</p><ol><li>在博客根目录创建一个_config.next.yml 文件，将next主题的配置迁移到这里，然后在博客配置文件_config.yml里指向这个配置文件。</li><li>直接在博客配置文件_config.yml里添加next主题的所有配置，在一个文件里同时管理博客配置和主题配置。</li></ol><p>我参考的同道文章中使用的就是第一种方式，但我尝试之后，还是觉得之前配置方式(在主题目录和博客根目录管理各自的_config.yml)比较适合我，因为我只有一个主题，而且我一直都是这么做的，已经习惯了，所以上面两种我都不采取。</p><p>于是按照之前的做法，对比新旧next主题配置，直接更改 <strong>next/_config.ym</strong>l 里的内容，从上到下依次改动了：</p><div class="note info"><ul><li>切换到Mist主题</li><li>修改网站图标</li><li>打开博文copyright</li><li>添加菜单栏</li><li>修改头像，打开圆角和旋转效果</li><li>添加社交链接</li><li>添加友链</li><li>修改网站底部信息</li><li>打开标签图标</li><li>开启博客赞赏并添加收款码</li><li>开启代码库复制按钮</li><li>开启浏览进度header bar</li><li>修改字体</li><li>开启图片fancybox和lazyload</li><li>开启livere评论</li><li>开启chatra chat</li></ul></div><p>这些配置大部分都只是把 next/_config.yml 文件里的toggle打开，把false改成true而已，非常方便，没什么可讲的，但有两个功能我觉得可以高亮一下。</p><h4 id="图片fancybox"><a href="#图片fancybox" class="headerlink" title="图片fancybox"></a>图片fancybox</h4><p>开启fancybox只需要在_config.xml里搜索fancybox，然后将false改成true就可以了，简单到不可置信。之后就可以点开博客里的图片，而且还能切换查看上下图、幻灯片播放、查看图片列表，而且还可以看到图片下方的描述，简直了，什么神仙功能，大佬们太棒了❤️：</p><p><img data-src="https://i.loli.net/2021/06/25/iMc3p7a8WSoGsdQ.png" alt="fancybox"></p><h4 id="chatra-chat"><a href="#chatra-chat" class="headerlink" title="chatra chat"></a>chatra chat</h4><p>事实上，之前使用的next主题也有这项配置，但一直没深入研究，不过这次使用之后也觉得超级方便！开启chatra chat只需要在_config.xml里搜索Chat Services，之后开启chat button展示，接着去chatra官网注册账号，把id加上就可以了，官网和找id的路径也在文件里注释了：</p><p><img data-src="https://i.loli.net/2021/06/25/yVWdFzJloPquMt9.png" alt="开启chatra chat"></p><p>chatra官网中也可以进行个性化配置，包括默认回复的信息，展示文本等等：</p><p><img data-src="https://i.loli.net/2021/06/25/ikAVf1JdjSrOxYs.png" alt="自定义弹窗展示文本"><br><img data-src="https://i.loli.net/2021/06/25/J1F2fexgbtGrQ8I.png" alt="自定义用户信息表单"><br><img data-src="https://i.loli.net/2021/06/25/ykLIPbEMOqUQT3s.png" alt="自定义默认回复信息"></p><p>至于使用成本，自注册之日起，会赠送10天的pro套餐，10天之后会回到免费套餐，但这并不影响简单使用，基本的聊天功能还是会支持的，所以还是推荐使用：<br><img data-src="https://i.loli.net/2021/06/25/K7Sug1ksNRw8WyM.png" alt="价格信息"></p><p>Chat Services里列出的其它Chat服务tidio和gitter我也试了，但tidio貌似需要科学上网，gitter貌似只能群聊，隐私感体验较差，所以还是选择了chatra。<br>chatra可以用邮件的方式提示新消息，但刚开始只能在网页上回复消息，后来发现AppStore也有这个应用，叫<strong>Chatra</strong>，下载后就能及时用手机回复消息了：</p><p><img data-src="https://i.loli.net/2021/08/07/fNKCAtxyvwecpRF.png" alt="用手机App发送消息"><br>手机端交互和网页差不多，但不能同时在线：</p><p><img data-src="https://i.loli.net/2021/08/07/fvbPwaZUjMtzOlS.jpg" alt="chatra手机端"></p><h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><p>到这里，基本的配置就ok了，然而我之前还给主题加了一些 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE">个性化设置</a> ，但这次不打算添加太多了，只留下一些必要的就可以，返璞归真。</p><mark class="label success">博客宠物</mark><p>首先就是我们博客右下角萌萌的小黑啦，依然是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E5%8D%9A%E5%AE%A2%E5%AE%A0%E7%89%A9">之前的文章</a> ，在路径 /themes/next/layout/_layout.njk 尾部加上 <strong>live2d()</strong> 的标签就行。</p><mark class="label success">博客运行时间</mark><p>在博客底部加上运行时间真的很有仪式感，跳动的时间感觉博客是“活着的”，还是按照 <a href="https://jmyblog.top/BlogUpdateNote/?highlight=%E5%8D%87%E7%BA%A7#%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4">之前的文章</a> 设置。</p><mark class="label success">校正livere评论的refer值</mark><p>之前由于livere评论的refer值不对，导致评论数据缺失，后来找回来并写了 <a href="https://jmyblog.top/comments-comeback/">一篇文章</a> 讲述解决办法，所以还是按照这个解决办法，在路径 next/source/js/third-party/comments/livere.js 改动之后才能看到所有的评论数据:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refer: 'jmyblog.top' + location.pathname</span><br></pre></td></tr></tbody></table></figure><h2 id="升级后对比"><a href="#升级后对比" class="headerlink" title="升级后对比"></a>升级后对比</h2><p>新版Next主题内置了更多插件，只需要打开开关就能用，确实挺香的。这次升级我也把之前的Next_Gemini卡片式布局，切换到了现在的Next_Mist布局，博客展示更加返璞归真了，对比感觉还是现在的效果比较适合展示博客：</p><p><img data-src="https://i.loli.net/2021/06/24/ibkeCQwLaV9xsXd.jpg" alt="之前是有点花里胡哨哈"></p><p><img data-src="https://i.loli.net/2021/06/24/cHQjPZJUMAq5fta.png" alt="现在沉稳多了"></p><p>这段时间真折腾啊，又是升级博客服务，又是升级主题的，终于告一段落了，之后很长一段时间应该不会再有升级了。为了维护这个小破站，我真是操碎了心，接下来就是专注写作，多更新博客了。</p>]]></content>
    
    
    <summary type="html">返璞归真式主题升级。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="next-theme" scheme="https://jmyblog.top/tags/next-theme/"/>
    
    <category term="theme-next" scheme="https://jmyblog.top/tags/theme-next/"/>
    
  </entry>
  
  <entry>
    <title>博客Pages服务升级</title>
    <link href="https://jmyblog.top/PageServiceUpdate/"/>
    <id>https://jmyblog.top/PageServiceUpdate/</id>
    <published>2021-06-08T08:54:05.000Z</published>
    <updated>2022-01-24T11:50:16.318Z</updated>
    
    <content type="html"><![CDATA[<img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1graz9zi8goj61qm15oah202.jpg"><h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>首先我的博客是同时部署在GithubPages和CodingPages上的，GithubPages提供国外访问，CodingPages加速国内访问。两个服务都加了我的自定义域名 <mark class="label info">jmyblog.top</mark>，且都开启了Https。</p><p>两个服务给我的自定义域名申请的Https证书都是由国外的Let’s Encrypt机构签发，一般这个证书有效期只有三个月。由于我的域名解析设置，在证书快到期时，GithubPages可以帮我自动续申请证书，而CodingPages却不能，这就导致证书到期后在国内不能通过Https的方式访问我的博客，所以每次证书快到期时，我都要登录CodingPages <a href="https://jmyblog.top/HttpsUpdate/">手动续申证书</a>。</p><p>去年的时候，CodingPages服务就一直给我发短信说是升级啥的，但我没有关注，我一直是个破罐子破摔的人，只要它没有停服，博客还能访问就懒的升级。<br>直到有一天我打开博客的时候出现异常，有时是直接访问不了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjgogovj624u10stbw02.jpg" alt="1622540423142.jpg"><br>有时是一些报错，好像是https证书过期之类：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazjzp6g2j61xo1g8n5f02.jpg" alt="1622540733603.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazkajnejj61ww15ywjr02.jpg" alt="1622540555676.jpg"><br>所以想先手动更新一波证书，然而登录Coding之后发现并不是证书的问题，而是CodingPage旧版直接停服了，必须更新才行：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grazp0008pj62l20wuk0u02.jpg" alt="1622532281585.jpg"><br>于是新的一波折腾又开始了，为了以后温故知新，我把折腾过程全程截图保存了下来，就有了这篇博客。</p><h2 id="CodingPages升级腾讯云服务"><a href="#CodingPages升级腾讯云服务" class="headerlink" title="CodingPages升级腾讯云服务"></a>CodingPages升级腾讯云服务</h2><h3 id="绑定腾讯云账号"><a href="#绑定腾讯云账号" class="headerlink" title="绑定腾讯云账号"></a>绑定腾讯云账号</h3><p>先按照升级提示绑定腾讯云账号，看来腾讯是和Coding有某种关系了(后来搜了下好像是CodingPages被腾讯收购了，以后底层全用腾讯云服务，Coding这边只是一个UI的壳子)，总之不管他们啥关系，先升级再说，账号绑定完成后又开启了新的关卡：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grb00pbdghj62e80wkq9s02.jpg" alt="1622538814928.jpg"><br>然后按照指示一顿操作，终于可以使用新版Coding Pages了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyc2uyn8j62g812ijz702.jpg" alt="1622539615813.jpg"></p><h3 id="旧版网站升级"><a href="#旧版网站升级" class="headerlink" title="旧版网站升级"></a>旧版网站升级</h3><p>由于我是要升级之前的网站，所以进入旧版网站列表，找到之前的静态网站，在右上角看到了「升级至新版」的入口：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydne1euj62780kstcx02.jpg" alt="1622539639577.jpg"><br>于是果断进入，选择相应的网站类型，最开始我选择了自己使用的Hexo，后来部署报错了，是因为我并没有把Hexo的配置文件上传到仓库(因为里面有许多我自己使用的插件私钥和密码，不能上传到public的仓库中)。所以后来又选择了静态网站，才部署成功：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyez5zm5j60qw0lhabu02.jpg" alt="1622539686983.jpg"><br>之后又按照提示，去阿里云更改域名的CNAME设置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd41p2dwuj61ac0g840o02.jpg" alt="1623303229231.jpg"><br>完成设置后(顺便改了下网站名字)，新版的网站就开始部署了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcygr10k3j61bs0mewha02.jpg" alt="1622539996713.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyh19l0uj613r07y74z02.jpg" alt="1622540194028.jpg"><br>部署成功后，看到基本信息，有两个网站地址，一个是我的自定义域名，一个是CodingPages提供的访问域名：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd4c4r47uj625210cq8e02.jpg" alt="1623303831826.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyhzt9osj624w0pudm002.jpg" alt="1622540298235.jpg"></p><h3 id="申请腾讯云证书"><a href="#申请腾讯云证书" class="headerlink" title="申请腾讯云证书"></a>申请腾讯云证书</h3><p>切换到自定义域名页面，发现Https证书还在审核中：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyk7l6l7j61620f2jtx02.jpg" alt="1622541431872.jpg"><br>点击「审核中」，就跳转到了腾讯云页面，新的关卡又增加了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcykxfwymj61ag0ic0v902.jpg" alt="1622541560047.jpg"><br>所以根据提示步骤申请证书，进行域名验证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyl51q8ej61610j0n0502.jpg" alt="1622541615687.jpg"><br>去阿里云添加一条TXT的记录进行验证(证书申请成功后就可以删掉这条验证了)：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcyloweifj61040kuwg902.jpg" alt="1622541722382.jpg"><br>验证成功后，到了使用证书这一步，不过我们的证书其实已经签发成功了，并不需要自己手动安装，所以忽略掉后边的步骤：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcym15hk2j610y0p076f02.jpg" alt="1622541808007.jpg"><br>等到第二天再打开Coding页面，发现域名的证书审核已经通过了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcymo4m6lj61620fsdid02.jpg" alt="1622614304295.jpg"><br>之后再访问博客，可以看到证书已经更新了，到期日为明年6/1:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p><h3 id="探索腾讯云"><a href="#探索腾讯云" class="headerlink" title="探索腾讯云"></a>探索腾讯云</h3><p>在腾讯云工作台可以看到证书详情，可以看到它同时帮我们开启了www的subdomain访问方式：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6tw6dw3j60ni0kuwfn02.jpg" alt="1623308612737.jpg"><br>也可以进行管理:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6ueay7lj62ke0l0n2i02.jpg" alt="1623308652667.jpg"><br>域名管理：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>然而，世上没有免费的午餐，腾讯云的服务是要收费的，就在我刚开通一天后，它就给我发了欠费的信息：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd741nv9bj60bl0mwwgr02.jpg" height="400" width="200"><br>虽然不贵，但比起之前免费的CodingPages服务，还是有些差距。而且这里的证书期限是一年，一年以后又不知道有啥幺蛾子，先这样吧，就这样破罐子破摔的凑合着用，我已经充值了10块钱，看它能花多少。</p><h2 id="GithubPages问题解决"><a href="#GithubPages问题解决" class="headerlink" title="GithubPages问题解决"></a>GithubPages问题解决</h2><p>到这里，CodingPages的升级已经完成了，然而我的博客还部署在了GithubPages，所以要再看看GithubPages的服务是否正常。不看不知道，一看吓一跳，果然有问题 <mark class="label warning">Domain's DNS record could not be retrieved...</mark>：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grcydajfznj61mk17oqba02.jpg" alt="1622539358158.jpg"><br>说我的DNS配置不对，要加CNAME。但是我有CNAME呀，不知道为啥有这个报错，于是为了解决这个报错，我开始了漫长的旅途。</p><h3 id="百度-amp-Google"><a href="#百度-amp-Google" class="headerlink" title="百度&amp;Google"></a>百度&amp;Google</h3><p>首先，是在百度和谷歌寻找解决方案，找到了几种方案：<br><span id="inline-toc">1.</span> <a href="https://www.sawlove.com/github-custom-domain-use-https.html">重新绑定域名</a>：是说先把域名remove，然后再重新添加，但是没有解决我的问题。<br><span id="inline-toc">2.</span> 加上www域名前缀：是说在代码库的CNAME文件里给域名加上www前缀，然后在域名解析里也加上www，最后绑定www前缀的域名。但还是没有解决我的问题。<br><span id="inline-toc">3.</span> 让Github自己添加CNAME文件：是说绑定域名后Github会自动在代码库里加上CNAME文件，所以要先把CNAME文件删掉，再重新绑定域名等Github添加文件，然而我照做之后发现Github并没有自动给我添加CNAME文件，所以依然没有解决我的问题。</p><p>总之，折腾了半天，问题还是没有解决，瞧把我给折腾的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd8vxs7z9j60qs1ac0wv02.jpg" height="600" width="350"><br>而且遇到了更多的报错，比如<mark class="label danger">Domain does not resolve to the GitHub Pages server... ：</mark><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vkp1gaj61lu0lg43f02.jpg" alt="1622785367590.jpg"><br>再比如：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30evnlej61mc0fqadr02.jpg" alt="1623129057591.jpg"></p><p>真的累了，甚至想着就用github.io访问好了，GithubPages就不绑定域名了吧：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2tkvgn8j626o0gw78b02.jpg" alt="1622712116380.jpg"></p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>想归想，问题还是要解决的。<br>既然网上的办法解决不了，就乖乖去看官方文档吧，于是直接点击报错信息里的learn more，打开官方文档，开始通读全文：<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a><br>文档里提供了两种自定义域名的绑定配置方法，一种是subdomian，比如 <a href="http://www.example.com/">www.example.com</a> 或者 blog.example.com 这样的，显然我不是这种类型；另一种是apex domain，比如example.com这种的，那可不就是我的域名类型嘛，好，找到方向了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="配置apex-domain"><a href="#配置apex-domain" class="headerlink" title="配置apex domain"></a>配置apex domain</h4><p>然后就按照文档里描述的apex domain的配置方法开始操作，直接跳到第五步：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda1c6edtj61bk0iatcw02.jpg" alt="1623315661401.jpg"><br>说让我添加A记录指向GithubPages提供的这些IP地址，好嘛，安排！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda3xez8lj61qg0a8jte02.jpg" alt="1623315810471.jpg"><br>然后又让我用命令验证配置：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grda6byoyhj61920h8gp102.jpg" alt="1623315955716.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/pmkCEzlanyQBiD5.png" alt="image.png"><br>接着让我加CNAME文件到我的代码库里：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdae57e55j618s05cgne02.jpg" alt="1623316383313.jpg"><br>这个本来就有，最后是可选项，开启强制Https，也打开了，但据说要等24小时：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdaihv34jj61a60d041302.jpg" alt="1623316394352.jpg"><br>好，所有的配置都没毛病，可以添加域名了，那你倒是说说，为毛这个错它还在？！！！：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2vvzu3nj62am18agvy02.jpg" alt="1622786325436.jpg"><br>唉，心态崩了。<br>后来问题解决之后，冷静下来想想，此时报错可能有两个原因，一个是我没等够24小时，等够时间后check again应该就没错了；或者我不开启https应该也不会有错，但我还是想有https的，所以没有采取这种做法。<br>但是，我的关注点在这个报错，为毛我绑定的是没有www的域名，报错里却有www的subdomain?<br>好吧，接着看官方文档。</p><h4 id="配置www-subdomain"><a href="#配置www-subdomain" class="headerlink" title="配置www subdomain"></a>配置www subdomain</h4><p>官方文档上说，如果用的是apex domain，推荐再给它配置www subdomain，好吧，就按你推荐的来：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb5pbocfj61a406stap02.jpg" alt="1623317938517.jpg"><br>上边还说，给apex domain配置www submain的前提是你已经按照上边的方法配置好了apex domain，虽然我的报错还在，但我认为自己还是配置好了apex domain的：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb6kmrwgj619q05gjt502.jpg" alt="1623317950652.jpg"><br>所以按它说的接着来，第一步，域名解析里添加一个www的CNAME记录，指向 xxx.github.io：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb79fv7hj619y0as42e02.jpg" alt="1623317969868.jpg"><br>安排：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbb8h8q7j624805kt9v02.jpg" alt="1623318311090.jpg"><br>接着把代码库里的CNAME文件也加上www：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbct4avzj62640n042t02.jpg" alt="1623318380827.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdbcyyp7nj624y0me42v02.jpg" alt="1623318402390.jpg"><br>第二步，命令验证配置是否正确：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grdb7f8we4j61ac0dgad002.jpg" alt="1623317982442.jpg"><br>没毛病：<br><img data-src="https://i.loli.net/2021/06/11/LeoMy5p6SKGX71O.png" alt="image.png"><br>到这里，配置就已经结束了，激动人心的时候到来了，绑定我的www域名，竟然。。。。。成功了！！！！！小绿勾也打上了：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd30nk1faj60s40ku77202.jpg" alt="1623130387731.jpg"><br>而且也开启了Https，由于我配置www subdomain是在配置apex domain 24小时之后，此时是已经等够24小时的，所以可以开启Https没有报错。<br>血的教训告诉我们，官方文档是真的有用。所以遇到问题，还是先看看人家让你看的官方文档，然后再搜其他的办法。</p><h2 id="为啥要用CodingPages"><a href="#为啥要用CodingPages" class="headerlink" title="为啥要用CodingPages"></a>为啥要用CodingPages</h2><h3 id="CodingPages在哪"><a href="#CodingPages在哪" class="headerlink" title="CodingPages在哪"></a>CodingPages在哪</h3><p>配置好了GithubPages，目前我的个人域名DNS设置是：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3eg62esj61620gkadb02.jpg" alt="1623301889628.jpg"><br>通过命令再次验证DNS设置：<br><img data-src="https://i.loli.net/2021/06/11/JXKaRVnq3iC7GkQ.png" alt="image.png"><br>有没有发现什么问题？<br>是呀，CodingPages的作用在哪呢？验证到的DNS设置只指向了GithubPages服务，而且无论是访问 <a href="https://jmyblog.top/">https://jmyblog.top</a> 还是 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ，显示的Https证书都是Let’s Encrypt签发的：<br><img data-src="https://i.loli.net/2021/06/11/k4UF5refWqgYNCz.png" alt="image.png"></p><h3 id="CodingPages部署节点"><a href="#CodingPages部署节点" class="headerlink" title="CodingPages部署节点"></a>CodingPages部署节点</h3><p>然后再次探索CodingPages，发现它部署的节点是香港：<br><img data-src="https://i.loli.net/2021/06/11/8TQYjyKRqkbOnhw.png" alt="image.png"><br>想部署到其他节点还得备案才行：<br><img data-src="https://i.loli.net/2021/06/11/ltPUcyOdvebphfB.png" alt="image.png"><br>于是连接一个香港区域的VPN，然后再通过命令再次验证DNS设置，终于看到了指向CodingPages的信息和腾讯云签发的证书：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2xyjpa7j616409ejtt02.jpg" alt="1623054662478.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2yiir5aj61620gcjv002.jpg" alt="1623054748589.jpg"></p><h3 id="腾讯云CDN加速"><a href="#腾讯云CDN加速" class="headerlink" title="腾讯云CDN加速"></a>腾讯云CDN加速</h3><p>登录腾讯云，发现它对站点的加速和服务区域都是境外：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6uvk1caj619z08iabi02.jpg" alt="1623308756991.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd6v2r0blj614n0jeq5402.jpg" alt="1623308971575.jpg"><br>想切换加速区域还是得备案才行，而且还得另付国内加速的费用：<br><img data-src="https://i.loli.net/2021/06/11/6N8ZSgoWrUtIQcb.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/06/11/n5TdHZtcaL7Azs6.png" alt="image.png"></p><p>但是备案太麻烦了，而且就我这个小破站估计也没多少人看，孤芳自赏罢了，也不至于搞这么多服务。所以在已经有了GithubPages之外，我需要CodingPages的理由是什么呢？</p><h3 id="使用CodingPages的理由"><a href="#使用CodingPages的理由" class="headerlink" title="使用CodingPages的理由"></a>使用CodingPages的理由</h3><p>从前用CodingPages是想用它免费的国内加速服务，现在虽然不备案就不能加速了，但仔细想了想，虽然我不想备案，也不想开启高端的CDN加速服务，还是有一些理由让我使用它的：</p><p><span id="inline-toc">1.</span> 博客内容推送到百度，理由如下：</p><p><img data-src="https://i.loli.net/2021/06/11/6p5iyxc4XZrM9Yo.png" alt="image.png"></p><p><span id="inline-toc">2.</span> 一个备胎，为了保险起见，同时使用两个服务还是不错的，虽然它们的功能有一些重复。<br><span id="inline-toc">3.</span> 虽然目前只有国外加速服务，好歹能给国外的朋友提高访问体验啊，而且万一以后又想备案呢，留条后路总没错。<br><span id="inline-toc">4.</span> 虽然用它的理由的确乏善可陈，但是配都配好了，我上边折腾这么久也不能白折腾。</p><h2 id="站点验证"><a href="#站点验证" class="headerlink" title="站点验证"></a>站点验证</h2><p>到这里，博客配置就已经结束了，但还是要通过第三方工具验证博客的可访问性和速度。</p><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><p>之前做了百度SEO优化，所以使用百度站长工具验证站点，首先是Https认证：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2zj0qnrj61qk0s6ae502.jpg" alt="1623056320673.jpg"><br>没毛病，这Https是真的，再看看URL抓取：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3hl9bjdj626i0wa0zl02.jpg" alt="1623302070854.jpg"><br>也没毛病，看来百度可以收录我网站的URL，访问抓取都可以，放心了。</p><h3 id="Google收录"><a href="#Google收录" class="headerlink" title="Google收录"></a>Google收录</h3><p>也做过Google的SEO优化，所以使用Google站点工具，先连上站点验证所有权：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2u22ec8j62l418kqah02.jpg" alt="1622714334036.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd2ugu9a6j62la12ewit02.jpg" alt="1622714361935.jpg"><br>然后再上传一次sitemap，确保Google可以抓取网站的URL:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1grd3012an4j62co0sagq802.jpg" alt="1623122594184.jpg"><br>没毛病，看来也ok:<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre98vekm5j61j20xcjyc02.jpg" alt="1623388402076.jpg"></p><h3 id="访问速度"><a href="#访问速度" class="headerlink" title="访问速度"></a>访问速度</h3><p>通过 <a href="http://tool.chinaz.com/speedtest/">这个网站</a> 可以检测博客的访问速度，在国内测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> ，国际测速 <a href="https://jmyblog.top/">https://jmyblog.top</a> 和 <a href="https://www.jmyblog.top/">https://www.jmyblog.top</a> ， 结果都还不错：<br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9o9veadj61n41b411r02.jpg" alt="1623389603223.jpg"><br><img data-src="http://ww1.sinaimg.cn/large/006UcYZmgy1gre9omgv7sj61ne0suwjw02.jpg" alt="1623389638753.jpg"><br><img data-src="https://i.loli.net/2021/06/11/jIZwMAUEbsK4VPa.png" alt="image.png"><br>本来只是想记录自己是咋升级，咋解决问题的，结果却写了这么多<span class="emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>，可能有一些自己的思考吧。先这样凑合着用吧，这样折腾完了，至少以后不用三个月再手动申请证书了。</p>]]></content>
    
    
    <summary type="html">想用自定义域名，可太难了。</summary>
    
    
    
    <category term="维护小破站" scheme="https://jmyblog.top/categories/%E7%BB%B4%E6%8A%A4%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    
    
    <category term="GithubPages" scheme="https://jmyblog.top/tags/GithubPages/"/>
    
    <category term="CodingPages" scheme="https://jmyblog.top/tags/CodingPages/"/>
    
    <category term="腾讯云" scheme="https://jmyblog.top/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第三弹-Android篇</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-3/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-3/</id>
    <published>2021-05-23T10:15:19.000Z</published>
    <updated>2022-01-24T11:50:16.313Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/25/f8GPuvCgVNoA61q.png" alt="image.png"></p><p>上篇博客我们完成了测试代码库在iOS平台的CI集成，这篇文章继续讲Android平台。没有看过前几篇的同学也不用担心，可以先fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">模拟的Android开发代码库</a> 到你的github账户，然后注册一个 <a href="https://www.bitrise.io/">Bitrise</a> 账号即可。</p><h2 id="创建Android应用"><a href="#创建Android应用" class="headerlink" title="创建Android应用"></a>创建Android应用</h2><p>刚注册Bitrise的小伙伴可以选择standard plan -&gt; add first app：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"><br>或者回到Dashboard页面，点击Add new app，选择第一项，就会出现创建App页面：<br><img data-src="https://i.loli.net/2021/05/24/daeLy83u7s15xvJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>选择Privare后继续，然后是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的Android应用代码库 <strong>sample-apps-android-sdk22</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/26/KHQy36Wuvdk9mqX.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/26/X9xa5heLAZbzSrk.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现Android图标，说明它被识别为一个Android app，完成后我们直接点击Next&amp;Next&amp;Confirm走完这一步：<br><img data-src="https://i.loli.net/2021/05/26/v8qybjcYhpX5wFJ.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/26/V4r95zG1pHQkDBP.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/26/2LIiTUCwEjbG1lu.png" alt="image.png"></p><h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/26/UEAFWjvYlk1NMpg.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p><h3 id="添加Emulator并等待启动"><a href="#添加Emulator并等待启动" class="headerlink" title="添加Emulator并等待启动"></a>添加Emulator并等待启动</h3><p>第一步是启动模拟器，由于模拟器启动很慢，所以把它放在第一步。且与iOS不同，Bitrise给Android emulator提供了等待启动的步骤，这样就不用担心模拟器连不上了。可以利用上面的方法在ALL选项里搜索到这一步，然后修改API Level, 这个值对应测试代码库文件 android.conf.js 里的platformVersion(10就是29，11就是30)：<br><img data-src="https://i.loli.net/2021/05/26/Qt6iFbkRIJjZMVq.png" alt="image.png"><br>这一步不需要改动：<br><img data-src="https://i.loli.net/2021/05/26/nZP1lfE2az4DyCo.png" alt="image.png"></p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-android-sdk22</strong> 这个代码库：<br><img data-src="https://i.loli.net/2021/05/26/ZWX6gSilAVazqDu.png" alt="image.png"></p><p>我们先保留以上四步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/26/Tb4AgVXcCSvloQs.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/26/XtOwQhn29dKgubN.png" alt="image.png"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/26/2iJ5YMVmqOUFKsD.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/26/twh71nYu2szfMGI.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/26/qgQIob1tMZDPNjx.png" alt="image.png"><br>然后需要改一下代码库里android.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/26/Jj6OA1CUcwlz5Zo.png" alt="image.png"><br>与iOS不同，在Bitrise配置时，这里deviceName的值不是某个具体设备名称，比如“iPhone 11”，而是固定的“emulator”。</p><h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/Va9m3KDYjM6RTv4.png" alt="image.png"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/26/NDQk2PqSUI3vceo.png" alt="image.png"><br>这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，与iOS不同，Bitrise只给安卓提供了通过Terminal连接Bitrise的远程机器，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/26/wfXjKMclDrLt1Jm.png" alt="image.png"><br>按照Bitrise提供的地址和密码连接即可(每次运行地址和密码都会变)，但只能通过命令行访问，不能直观的看到机器，可以看到我们的测试代码库：<br><img data-src="https://i.loli.net/2021/05/26/FfLzO8Amj7BdxoN.png" alt="image.png"><br>耐心等待，测试就会开始执行并且运行成功，虽然不能通过screen sharing连接服务器直观看到测试执行，但有了等待模拟器的步骤，只要测试代码没有问题，运行速度会很快且成功率高：<br><img data-src="https://i.loli.net/2021/05/26/Bk1JX5f4GgNlc38.png" alt="image.png"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/26/qP6WtDV8L7OAIzl.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/26/u9ScPnVjtvyi57K.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>忽略这个iphone11的名字哈，不知道为啥会带上这个，本来应该是android-emulator之类的开头，不过不要在意这些细节哈哈哈，成功了就行：<br><img data-src="https://i.loli.net/2021/05/26/1scBq5ml7w4nAzO.png" alt="image.png"></p><h2 id="结束之后"><a href="#结束之后" class="headerlink" title="结束之后"></a>结束之后</h2><p>AppUI自动化入门系列到这里就结束啦，不知不觉已经写了一万多字呢，虽然是机器写的，但是手也很酸呐哈哈哈。希望能给大家带来一些新知识和新启发，测试君冲鸭！！！</p>]]></content>
    
    
    <summary type="html">将代码库部署到Bitrise CI，实现Android平台的持续集成。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
    <category term="Android" scheme="https://jmyblog.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第三弹-iOS篇</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-2/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-2/</id>
    <published>2021-05-21T08:46:15.000Z</published>
    <updated>2022-01-24T11:50:16.313Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/C63wHlmUE5o4Nh8.png" alt="image.png"></p><p>通过前两篇博客我们有了一个测试代码库，没有的话可以直接fork <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 到你的github账户，之后就可以进行CI集成啦，本来是想iOS和Android一起讲的，但篇幅太长，就分开了，多图预警。。。</p><h2 id="Bitrise介绍"><a href="#Bitrise介绍" class="headerlink" title="Bitrise介绍"></a>Bitrise介绍</h2><p><a href="https://www.bitrise.io/">Bitrise</a> 是一款CI工具，与同领域其它工具，比如Jenkins/GoCD/Travis CI的不同在于它是专门用来部署手机应用的，它内置了很多手机应用开发的插件，可以帮助开发团队快速搭建环境、构建部署应用，并执行测试。此外，简洁易懂的UI也是它的一大优势。</p><p>由于Bitrise是一个部署App的工具，所以我们需要一个App开发代码库，Bitrise提供给我们两个可以使用的代码库，把它们fork到你的github就行：<a href="https://github.com/bitrise-io/sample-apps-ios-simple-objc">iOS</a> 和 <a href="https://github.com/bitrise-io/sample-apps-android-sdk22">Android</a>。</p><p>由于步骤不尽相同，所以两个平台分开讲，开始之前请先注册一个Bitrise账号，然后登录，选择standard plan，你会看到如下页面：<br><img data-src="https://i.loli.net/2021/05/24/ivXJu7KHpICV6Ay.png" alt="image.png"></p><h2 id="创建iOS应用"><a href="#创建iOS应用" class="headerlink" title="创建iOS应用"></a>创建iOS应用</h2><p>选择 add first app，会进入创建应用页面，选择自己的Bitrise账号，然后选择Private后继续：<br><img data-src="https://i.loli.net/2021/05/24/7JP2ti1xsuGfvDE.png" alt="image.png"><br>下一步是连接代码库，按照提示 Connect Github，连接之后你会看到自己所有的代码库：<br><img data-src="https://i.loli.net/2021/05/24/ZjReaio4EVXcyYl.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/RD9NF4ZMaQ2zwc6.png" alt="image.png"><br>我们选择之前fork的iOS应用代码库 <strong>sample-apps-ios-simple-objc</strong>，然后继续：<br><img data-src="https://i.loli.net/2021/05/24/835XDmsRhif7PCl.png" alt="image.png"><br>由于我们之后还需要Bitrise下载测试代码库，所以选择 I need to, 复制Bitrise提供给我们的SSH key添加到你的github setting里：<br><img data-src="https://i.loli.net/2021/05/24/XJkaPhegf62cK1Y.png" alt="image.png"><br>保存之后选择i’ve added the SSH key，下一步将部署应用的分支命名为master后继续,此时Bitrise会配置你的App(如果有报错就再次选择master分支再部署):<br><img data-src="https://i.loli.net/2021/05/26/HV53lg6SA8bmLpj.png" alt="image.png"><br>之后出现iOS图标，说明它被识别为一个iOS app，完成后我们选择 app-store 为导出方式：<br><img data-src="https://i.loli.net/2021/05/24/XuqvxZcNVnSl5LE.png" alt="image.png"><br>编辑以下设置，然后点击confirm后继续：<br><img data-src="https://i.loli.net/2021/05/24/lvsUiuCqImEkZga.png" alt="image.png"><br>跳过app icon和webhook步骤，点击页面右上角finish按钮完成设置：<br><img data-src="https://i.loli.net/2021/05/24/zNgWhZAep1suL8t.png" alt="image.png"><br>之后页面跳转到Dashboard，Bitrise会跑第一次build，在页面右侧会看到你的App：<br><img data-src="https://i.loli.net/2021/05/24/R1lQBKVOtpTN9JX.png" alt="image.png"></p><h2 id="添加e2e-workflow"><a href="#添加e2e-workflow" class="headerlink" title="添加e2e workflow"></a>添加e2e workflow</h2><p>依次点击页面右侧App -&gt; Workflow ，进入Workflow编辑页面，点击 “+ Workflow” 新增一个名为e2e的 workflow：<br><img data-src="https://i.loli.net/2021/05/24/pDifPg2hGw9ROcl.png" alt="image.png"><br>然后自动进入该workflow的编辑页面，我们将在此workflow下载测试代码库并执行测试，页面左侧为该workflow的执行步骤和内容，Bitrise可能会默认预置一些步骤，点击左侧 + 号可以打开新增步骤页面，搜索你想要的步骤然后点击，它就会被添加到workflow里：<br><img data-src="https://i.loli.net/2021/05/24/N6P28sGVBMnU3T9.png" alt="image.png"><br>接下来请依次添加以下步骤。</p><h3 id="Activate-SSH-key-amp-Git-Clone"><a href="#Activate-SSH-key-amp-Git-Clone" class="headerlink" title="Activate SSH key&amp; Git Clone"></a>Activate SSH key&amp; Git Clone</h3><p>这两步不需要做任何改动，保持默认的配置就好，这两步通常为每个workflow最开始的两个步骤，是用SSH的方式下载主代码库，这里是指 <strong>sample-apps-ios-simple-objc</strong> 这个代码库。</p><h3 id="添加Simulator"><a href="#添加Simulator" class="headerlink" title="添加Simulator"></a>添加Simulator</h3><p>第三步是启动模拟器，就像在本地运行测试一样，我们需要用模拟器执行测试。由于模拟器启动很慢，所以把它放在第三步，可以利用上面的方法搜索到这一步，然后修改Device Model、OS version、Platform，这三个值分别对应测试代码库文件 ios.conf.js 里的deviceName、platformVersion、platformName，在我的代码库里它就对应下图的值:<br><img data-src="https://i.loli.net/2021/05/24/Qr9CitX4TwjNEae.png" alt="image.png"></p><p>我们先保留以上三步，点击右上角保存按钮，之后回到应用页面，选择开始build，选择e2e workflow，然后开始Build:<br><img data-src="https://i.loli.net/2021/05/24/eJPU6g3AQf52cHy.png" alt="image.png"><br>请确保运行成功，一般不会有问题的哈，否则自行搜索解决哦：<br><img data-src="https://i.loli.net/2021/05/24/6bvo2qVZQJiLUrM.png" alt="image.png"></p><h3 id="克隆测试代码库"><a href="#克隆测试代码库" class="headerlink" title="克隆测试代码库"></a>克隆测试代码库</h3><p>然后我们来下载测试代码库，搜索并添加一个Script步骤，内容如下，repo地址请换成自己的哦：<br><img data-src="https://i.loli.net/2021/05/24/YJTKr2nZFby1P6j.png" alt="image.png"><br>然后进入上个build成功的详情页，直接点击rebuild即可：<br><img data-src="https://i.loli.net/2021/05/24/FWTqsZHCjLbR3p5.png" alt="image.png"><br>这里加上pwd的原因是要找到代码库在Bitrise服务器上的路径，这样就可以知道app的绝对路径了，同时也方便进行下边的步骤：<br><img data-src="https://i.loli.net/2021/05/24/mzqBDbnFk3ew2rx.png" alt="image.png"><br>然后需要改一下代码库里ios.conf.js的app路径，这里我的代码库也已经改好了：<br><img data-src="https://i.loli.net/2021/05/24/pFK1HIQv2aDBmiR.png" alt="image.png"></p><h3 id="下载代码库依赖"><a href="#下载代码库依赖" class="headerlink" title="下载代码库依赖"></a>下载代码库依赖</h3><p>同样搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/HSrBmEPCRUysTuD.png" alt="image.png"></p><h3 id="配置WebDriver-Agent"><a href="#配置WebDriver-Agent" class="headerlink" title="配置WebDriver Agent"></a>配置WebDriver Agent</h3><p>还是搜索并添加一个Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/XBCVvrxsTWOpLIl.png" alt="image.png"></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>终于到了关键的一步了，执行测试，添加Script步骤，内容如下：<br><img data-src="https://i.loli.net/2021/05/24/D1iT3QGEnmtxu4d.png" alt="image.png"><br>其实上边几步是可以合到一步的，但为了方便定位错误，我们分的越细越好。这次我们不直接运行rebuild，而是选择“Rebuild with remote access”，这样我们就可以通过Terminal或者Screen sharing连接到Bitrise的远程机器了，在此机器上会运行我们的workflow：<br><img data-src="https://i.loli.net/2021/05/24/HLoqAcZhWnmKfTv.png" alt="image.png"></p><ul><li>Screen Sharing方式<br>Mac电脑搜索Screen Sharing，然后按照上图提供的地址和用户名密码连接即可，不用保存密码，因为每次运行地址和密码信息都不一样：<br><img data-src="https://i.loli.net/2021/05/24/LkcajHwsOi2NGdJ.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/2XTuhMC4RzvL1dj.png" alt="image.png"><br>连接成功后，可以看到模拟器已经启动并安装好了测试app：<br><img data-src="https://i.loli.net/2021/05/24/owjWUS7AJXz2CcO.png" alt="image.png"></li><li>Terminal方式<br>按照Bitrise提供的地址和密码连接即可，但只能通过命令行访问，不能直观的看到机器：<br><img data-src="https://i.loli.net/2021/05/24/UClrYfRTsPz9pvN.png" alt="image.png"><br><img data-src="https://i.loli.net/2021/05/24/8tuIP7OLKgi5b3R.png" alt="image.png"></li></ul><p>可以看到测试已经开始运行，并尝试连接模拟器：<br><img data-src="https://i.loli.net/2021/05/24/SqhAMYJP6HG91KL.png" alt="image.png"><br>然而，在Bitrise远程机器上启动模拟器太慢了，即使我们把初始化simulator的步骤放在第三步，但无法确定它是否成功启动，所以在执行测试时也经常连不上模拟器。只能延长等待时间或者重试次数(这里会重试前10次，每次5分钟左右)，但也还是经常连不上，然后测试就会挂掉，目前我没找到解决方式(也可能是我网络太差或者bitrise免费版会有一些限制)，这算是一个痛点了，在我之前的Build里，只有两次测试执行成功：<br><img data-src="https://i.loli.net/2021/05/24/reWRbGQHMacCt72.png" alt="image.png"></p><h3 id="导出测试报告-amp-部署到Bitrise"><a href="#导出测试报告-amp-部署到Bitrise" class="headerlink" title="导出测试报告&amp;部署到Bitrise"></a>导出测试报告&amp;部署到Bitrise</h3><p>之后搜索添加test report和deploy步骤，就可以在每次运行后看到测试报告了，这里要改路径为下图：<br><img data-src="https://i.loli.net/2021/05/24/4ZJHWCGgRUzjb8m.png" alt="image.png"><br>这个就用系统默认的输入，不用改啥：<br><img data-src="https://i.loli.net/2021/05/24/k1DOBazSQie7v2R.png" alt="image.png"><br>运行后查看：<br><img data-src="https://i.loli.net/2021/05/24/RuSqzrx4bZyPcN5.png" alt="image.png"><br>成功：<br><img data-src="https://i.loli.net/2021/05/24/qQFKNkY5IfhjuTO.png" alt="image.png"><br>失败：<br><img data-src="https://i.loli.net/2021/05/24/wvBzbI3ya4tWUHQ.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">将代码库部署到Bitrise CI，实现iOS平台的持续集成。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Bitrise" scheme="https://jmyblog.top/tags/Bitrise/"/>
    
    <category term="iOS" scheme="https://jmyblog.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>AppUI自动化测试第二弹</title>
    <link href="https://jmyblog.top/AppUI-AutoTest-1/"/>
    <id>https://jmyblog.top/AppUI-AutoTest-1/</id>
    <published>2021-05-20T08:46:15.000Z</published>
    <updated>2022-01-24T11:50:16.313Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/BaDFwHCvbWk8g1x.png" alt="image.png"></p><p>上篇博客我们创建好了测试项目，本篇博客就带大家编写测试代码，然后利用模拟器运行。</p><h2 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h2><p>熟悉了测试项目的结构后，我们就可以按照相同的代码格式编写自己的测试代码啦。<br>首先我们想一想，UI测试的第一步是什么呢？当然是定位元素。<br>对于Web应用，我们可以直接使用浏览器的开发者工具inspector定位页面元素：<br><img data-src="https://i.loli.net/2021/05/20/LWRPKYaSbQji4yH.png" alt="image.png"><br>然而我们的测试对象是App，怎么定位App里的元素呢？答案是利用Appium和模拟器。<br>打开我们下载的Appium desktop应用：<br><img data-src="https://i.loli.net/2021/05/20/Xb2R1rJf3PNDEkV.png" width="350" height="300"><br>选择 Start Server, Appium Server就运行起来啦:<br><img data-src="https://i.loli.net/2021/05/20/r27GjW6cAdwHtSK.png" alt="image.png"><br>鼠标hover到右上角的🔍图标，出现tip提示 <strong>Start Inspector Session</strong>，很明显这就是我们用来定位App元素的工具啦，点击之后出现下图窗口：<br><img data-src="https://i.loli.net/2021/05/20/t3b2iRPjNBOpW8x.png" alt="image.png"><br>这里我们只关注当前的Tab窗口，其它部分不做介绍。在这个窗口中，我们可以通过设置 <strong>Desired Capabilities</strong> 来启动一个iOS/Android模拟器，Desired Capabilities是一系列模拟器配置项的集合，分为iOS和Android两个平台，有很多配置项，有两个平台公共的也有各平台单独的配置，完整的配置项列表在这里：<a href="http://appium.io/docs/en/writing-running-appium/caps/index.html#appium-desired-capabilities">Appium Desired Capabilities</a>。</p><p>下边我们使用5个公共的Desired Capabilities配置项分别启动iOS和Android的模拟器：platformName、platformVersion、deviceName、automationName、app，他们分别代表操作系统名称、操作系统版本、设备名称、自动化引擎名称、app路径，想更多的了解这五个配置项可以看上边的配置项列表。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h3 id="启动iOS-Simulator"><a href="#启动iOS-Simulator" class="headerlink" title="启动iOS Simulator"></a>启动iOS Simulator</h3><p>首先执行 <strong>xcrun instruments -s</strong> 命令来查看Xcode提供给我们所有的iOS模拟器种类，包括设备名称和操作系统版本等等：</p><p><img data-src="https://i.loli.net/2021/05/20/eJZMpn3ayOgB78i.png" alt="image.png"></p><p>然后选择一个模拟设备，按照json格式新增一个Desired Capabilities，这里我们以iPhone 11为例，粘贴下边的Desired Capabilities到Appium Start Inspector窗口，然后点击Save As按钮保存这个配置，这里我把它保存为iOS：<br><img data-src="https://i.loli.net/2021/05/20/VdDgGbmSFpCOUea.png" alt="image.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "iOS",</span><br><span class="line">  "platformVersion": "14.0",</span><br><span class="line">  "deviceName": "iPhone 11",</span><br><span class="line">  "automationName": "XCUITest",</span><br><span class="line">  "app": ""</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后它就可以在 Saved Capability Sets 窗口里看到啦，以后可以单独对它做修改。<br>然而我们还缺少一个app字段，它是我们测试app的绝对路径，WebdriverIO给初学者提供了iOS和Android两个平台的 <a href="https://github.com/webdriverio/native-demo-app/releases">demo app</a>，它们具有现代App的代码结构，非常适合用来做App测试：<br><img data-src="https://i.loli.net/2021/05/20/Ayx3YSEpuZlFc8a.png" alt="image.png"><br>下载完成后，把.apk文件和解压后的.app文件都放入项目的app文件夹中，之后修改Desired Capabilities里的app路径为绝对路径，然后保存：<br><img data-src="https://i.loli.net/2021/05/20/wJlyN5mUjLFdXeM.png" alt="image.png"><br>点击Start Session后，稍等片刻，就能看到模拟器启动并出现元素定位窗口，测试app已被打开：<br><img data-src="https://i.loli.net/2021/05/20/kTL578EawBCpRno.png" alt="image.png"><br>元素定位窗口由两部分组成，左侧为App视图，右侧为代码和元素视图，在左侧视图中点击App元素，对应的元素信息就会出现在右侧视图，比较常用的是Xpath，但也可以用id/class来定位元素：<br><img data-src="https://i.loli.net/2021/05/20/cDygiatb1qG3EX2.png" alt="image.png"><br>元素定位窗口的App视图只能展示一个页面，不能通过点击直接切换App页面。要做到这一点，我们只能先切换模拟器页面，之后点击元素定位窗口上方的刷新图标，新的页面视图才会出现：<br><img data-src="https://i.loli.net/2021/05/20/ihJ7OZzbE2rFXYV.png" alt="image.png"></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位iOS平台的App元素了，然后我们来编写测试代码，这里我们来编写最简单的两个Case，登录和注册。</p><div class="note info"><p>首先是登录，要实现登录操作，我们首先要切换到上边的登录页面，之后输入邮箱和密码，再点击登录即可。<br>然后是注册，需要切换到上边的登录页面，然后切换到注册tab页，之后输入邮箱、密码、确认密码字段，最后点击注册即可。</p></div><p>回到VSCode，登录页面已被定义，且已有示例的selector写法，通过定位元素，我们可以按照示例定义页面元素的selector，再新增方法对元素进行操作，最后在e2e.js中调用页面方法完成测试。</p><p><img data-src="https://i.loli.net/2021/05/20/MLUTP2BbmGR76Op.png" alt="image.png"></p><p>大家可以按照这个思路自己编写测试代码，这里我就不贴代码了，不过可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将内容copy到对应文件夹(results文件夹只用copy result.txt)，其中ios.conf.js就是我们上边设置的Desired Capabilities，要在编辑器里运行代码我们必须得加上它，将其修改成你本地的配置即可，这里我有两个app路径，其中一个(没注释的)与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/SrQML96uvleWqBX.png" alt="image.png"></p><p>最后运行 <strong>npm run test:ios</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，运行视频：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3OTk3Ng==" frameborder="0" 'allowfullscreen'=""></iframe><p>测试报告是利用junit做的，可以在 wdio.conf.js 文件里查看：<br><img data-src="https://i.loli.net/2021/05/26/nhUuXidOpwWzZ9G.png" alt="image.png"></p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="启动Android-Emulator"><a href="#启动Android-Emulator" class="headerlink" title="启动Android Emulator"></a>启动Android Emulator</h3><p>打开我们下载的Android Studio，进入编辑页面，点击右上角AVD Manager图标打开模拟器窗口：<br><img data-src="https://i.loli.net/2021/05/20/wiFyJgqWZXbDAmG.png" alt="image.png"><br>这里会列出所有可以使用的安卓模拟器，初次打开时，可能没有Virtual Device，可以通过“Create Virtual Device”来创建一个，创建时下载OS版本需要一些时间哦，如果有默认的Virtual Device就不用下载了。然后启动你的安卓模拟器：</p><p><img data-src="https://i.loli.net/2021/05/24/n1865FmjlbKyupU.png" alt="image.png"></p><p>安卓模拟器右侧是一些菜单项，包括开关机、音量、旋转等等，以及一些高级设置，可以访问 <a href="https://developer.android.com/studio/run/emulator">在Android模拟器上运行应用</a> 了解更多。</p><p>接着和iOS一样，在Appium desktop里新增Virtual Device对应的Desired Capabilities，然后Save as保存它，下边是我保存的配置，需要修改成和你的模拟器一致：</p><p><img data-src="https://i.loli.net/2021/05/24/TM3skJ47iDX8l9b.png" alt="image.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "platformName": "Android",</span><br><span class="line">  "platformVersion": "10.0",</span><br><span class="line">  "deviceName": "Pixel_3_XL_API_29",</span><br><span class="line">  "automationName": "UiAutomator2",</span><br><span class="line">  "app": "你的安卓app绝对路径，应该在app文件夹里"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>保持你的安卓模拟器启动状态，然后Start Session，就会看到和刚才iOS一样的元素定位窗口，测试app已在模拟器中打开：</p><p><img data-src="https://i.loli.net/2021/05/24/MoekacB4D9TAtsu.png" alt="image.png"></p><p>事实上，你可以同时打开iOS和Android的模拟器和元素定位窗口，一起定位iOS和Android的元素：</p><p><img data-src="https://i.loli.net/2021/05/24/R6yJCZVgfUNwQB5.png" alt="image.png"></p><h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>到这里，我们已经能够定位Android平台的App元素了，同样可以按照之前的思路自己编写登录注册的测试代码，事实上只需要修改上边iOS的Selector为Android格式即可。<br>也可以访问 <a href="https://github.com/Summyj/AppUI-AutoTest">我的代码库</a> 看到示例代码，将android.conf.js内容修改成你本地的配置即可，这里我有两个app路径和两个deviceName，多出的两个(没注释的)同样与后边集成CI步骤有关，可以先注释掉：<br><img data-src="https://i.loli.net/2021/05/26/dvgs5SKQrHXEkUh.png" alt="image.png"></p><p>最后运行 <strong>npm run test:android</strong>(这是我的自定义命令，可以在package.json文件里看到它的定义) 执行测试，运行前请确保Appium desktop已退出，也要确保安卓模拟器为启动状态，运行视频：</p><iframe height="498" width="510" src="https://player.youku.com/embed/XNTE1ODA3NzE4MA==" frameborder="0" 'allowfullscreen'=""></iframe><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p>上面我们使用模拟器和两个demo app，利用Appium inspector完成了登录注册功能的自动化测试。当然，只懂得这些是远远不够的，首先我们知道，当代App有几种类型：<strong>Native app</strong>、<strong>Web app</strong>以及<strong>Hybrid app</strong>，这三者的区别是什么、如何测试显然是一个重要的课题，网上已经有许多文章讲述它们的区别，比如 <a href="https://www.jianshu.com/p/a40fefcadc94">这篇文章</a> ，所以我就不再赘述了。</p><p>而除了login页面，demo app也提供了其它不同类型的页面，比如WebView、Swipe等生活中常见的页面类型。同样，针对于此demo app，WebDriverIO提供了 <a href="https://github.com/webdriverio/appium-boilerplate">示例代码库</a>，也包括iOS和Android两个平台，里面有包含以下类型的测试示例代码：</p><ul><li>测试native app</li><li>测试webview</li><li>在手机端利用Safari/Chrome执行浏览器测试</li><li>利用Sauce Labs Service、BrowserStack两个云服务平台提供的真机/模拟器执行测试</li></ul><p>每一种测试类型都有对应的config文件，但此代码库用的不是mocha框架，而是jasmine框架。而且虽然它测试了两个平台，但由于只是selector不同，所以通过配置不用重复定义页面，一个页面可以被两个平台调用，感兴趣的同学可以深入学习。</p><p>完成后别忘了把代码推送到Github哦，方便进行下一步的CI集成。</p>]]></content>
    
    
    <summary type="html">利用模拟器和Appium定位App元素，编写测试代码。</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jmyblog.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="自动化测试" scheme="https://jmyblog.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Appium" scheme="https://jmyblog.top/tags/Appium/"/>
    
  </entry>
  
</feed>
